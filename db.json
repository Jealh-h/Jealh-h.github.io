{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"themes/amber/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/amber/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/amber/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/amber/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/amber/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/amber/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/amber/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/amber/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/amber/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/amber/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/amber/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/amber/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/amber/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/amber/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/amber/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/amber/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/amber/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/amber/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"themes/amber/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/amber/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/amber/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/amber/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/amber/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/amber/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/amber/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/amber/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/amber/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/amber/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/amber/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/amber/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/amber/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"d4c178941bdc5e06b035393a72cfd390869dda1b","modified":1633097034537},{"_id":"source/_posts/2021年终总结.md","hash":"9a94ab73f3e242a89f551bfaf57af6b8e236b591","modified":1651286084174},{"_id":"source/_posts/actions进行轻服务的页面部署.md","hash":"0def500f55ef5bc36009fad59bfffacc99ac4294","modified":1651286083685},{"_id":"source/_posts/hello-world.md","hash":"5414ced3c805dd059cd34ca5b7020ef86da8c8fc","modified":1633093685434},{"_id":"source/_posts/react合成事件.md","hash":"ec34b069e16cca8f77b19de1ea36113b9148abaf","modified":1651853501706},{"_id":"source/_posts/一封阿里云的喝茶邮件.md","hash":"f43635ba073f3211edfb8e49065bb197c2d1e292","modified":1651286083684},{"_id":"source/_posts/numpy条件选择.md","hash":"e4be493ebc3302ec0c39fccfceb9fd2e1487d71f","modified":1634057243125},{"_id":"source/_posts/对javaScript事件冒泡与事件捕获的再学习.md","hash":"57f08d0322bd3e9e01b1936f952c8ae60e0f64a1","modified":1651286084175},{"_id":"source/_posts/聊聊JavaScript事件循环.md","hash":"23effa788329d5b00a75ff822dfcd41483cc404b","modified":1651286083684},{"_id":"source/_posts/一次base64指令的powershell.md","hash":"c5c5daeef512a1b2b1e2c73b9f373b98336c6b03","modified":1651286083682},{"_id":"source/_data/linklist.json","hash":"4fcd6b35bb283f6387fd97d2813929862f41d359","modified":1658388567414},{"_id":"source/_posts/谈谈cookie、session与token-jwt.md","hash":"7e5e6f1d4462642e5577e939509ada36436c5289","modified":1651286084175},{"_id":"source/about/index.md","hash":"3a788aeb3bd3fb53a5c5743fe0acd76918b99785","modified":1651420119120},{"_id":"source/friendsLinks/index.md","hash":"cd71821a92344a3e195463579fc22728a73f62c4","modified":1636621183202},{"_id":"source/tags/index.md","hash":"ea754bcd04f6e4f97f06a685343e3b8a2f9e6b6e","modified":1634057327973},{"_id":"source/images/avatar.png","hash":"6aaf9775d28026f8ce19d2a446776b6514b56d14","modified":1632492321449},{"_id":"source/categories/index.md","hash":"8bb00681c25c4426920b993dd32ac98f8499ada8","modified":1633095085901},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1632487263672},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1632487263670},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1632487263671},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1632487263683},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1632487263684},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1632487263682},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1632487263684},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1632487263685},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1632487263772},{"_id":"themes/next/_config.yml","hash":"876284691bd235b43251513f959520c510f44fef","modified":1632488269410},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1632487263686},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1632487263673},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1632487263703},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1632487263678},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1632487263678},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1632487263673},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1632487263679},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1632487263679},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1632487263679},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1632487263680},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1632487263681},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1632487263682},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1632487263681},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1632487263689},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1632487263688},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1632487263690},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1632487263688},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1632487263691},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1632487263692},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1632487263693},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1632487263694},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1632487263694},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1632487263704},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1632487263704},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1632487263705},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1632487263706},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1632487263706},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1632487263706},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1632487263706},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1632487263708},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1632487263707},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1632487263708},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1632487263709},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1632487263711},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1632487263710},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1632487263712},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1632487263711},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1632487263713},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1632487263712},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1632487263714},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1632487263715},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1632487263713},{"_id":"themes/next/layout/_layout.swig","hash":"f1d4a6e8a5630bcf7be5900d95463ce45fb6e3c2","modified":1644588788898},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1632487263715},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1632487263714},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1632487263769},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1632487263769},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1632487263770},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1632487263771},{"_id":"themes/next/layout/page.swig","hash":"13e3069523ed2cb0b0845ae9ffa144db5213b9ef","modified":1636620596463},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1632487263771},{"_id":"themes/next/layout/links.swig","hash":"135ebb07d4afe3cf6697041eb1e625dd566e82a0","modified":1636620791861},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1632487263794},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1632487263676},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1632487263677},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1632487263675},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1632487263676},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1632487263696},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1632487263695},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1632487263697},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1632487263698},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1632487263698},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1632487263697},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1632487263699},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1632487263700},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1632487263695},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1632487263702},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1632487263702},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1632487263700},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1632487263701},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"f29b50d83bcdc9e70696b6a8a8917d8b2ad4be10","modified":1644585417337},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1632487263717},{"_id":"themes/next/layout/_macro/post.swig","hash":"883c59628b086aa566481cc110ad9577e97ed5e6","modified":1644585504164},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1632487263719},{"_id":"themes/next/layout/_partials/footer.swig","hash":"068082d68a1dea32baef3520895ce88f21013253","modified":1653315889585},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1632487263726},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1632487263720},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1632487263728},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1632487263736},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1632487263756},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1632487263749},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1632487263759},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1632487263760},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1632487263738},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1632487263737},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1632487263740},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1632487263786},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1632487263785},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1632487263787},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1632487263744},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1632487263744},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1632487263806},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1632487263788},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1632487263789},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1632487263861},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1632487263881},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1632487263774},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1632487263791},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1632487263792},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1632487263793},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1632487263792},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1632487263797},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1632487263798},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1632487263796},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1632487263799},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1632487263801},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1632487263800},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1632487263802},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1632487263803},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1632487263892},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1632487263892},{"_id":"themes/next/source/js/fireworks.js","hash":"545c23cb641073dba2e361674f264f32bf90f72b","modified":1644599082654},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1632487263804},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1632487263803},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1632487263893},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1632487263894},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1632487263894},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1632487263899},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1632487263882},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1632487263901},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1632487263883},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1632487263884},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1632487263885},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1632487263886},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1632487263887},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1632487263888},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1632487263887},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1632487263886},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1632487263889},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1632487263890},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1632487263889},{"_id":"themes/next/source/images/favicon.ico","hash":"45a4501b730f68d716cb8e7571c49e93911c4ae5","modified":1644297647873},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1632487263891},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1632487263721},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1632487263722},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1632487263723},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1632487263724},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1632487263725},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1632487263725},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1632487263728},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1632487263727},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1632487263726},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1632487263730},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1632487263730},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1632487263729},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1632487263731},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1632487263733},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1632487263735},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1632487263732},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1632487263734},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1632487263736},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1632487263746},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1632487263748},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1632487263748},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1632487263747},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1632487263751},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1632487263751},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1632487263753},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1632487263753},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1632487263754},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1632487263755},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1632487263755},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1632487263756},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1632487263757},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1632487263759},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1632487263758},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1632487263761},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1632487263762},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1632487263763},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1632487263764},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1632487263764},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1632487263765},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1632487263766},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1632487263766},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1632487263767},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1632487263768},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1632487263741},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1632487263739},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1632487263742},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1632487263742},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1632487263743},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1632487263778},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1632487263779},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1632487263778},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1632487263780},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1632487263781},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1632487263782},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1632487263783},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1632487263784},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1632487263879},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1632487263878},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1632487263879},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1632487263880},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1632487263881},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1632487263775},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1632487263776},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1632487263776},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1632487263896},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1632487263898},{"_id":"themes/next/source/lib/canvas-ribbon/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1653313577135},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"62ff1ba692f3153d0288c514c42c6c92cc17e9b6","modified":1653313577137},{"_id":"themes/next/source/lib/canvas-ribbon/README.md","hash":"da243fc43315d5953438dab71eb59dc3961c33e3","modified":1653313577136},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1632487263909},{"_id":"themes/next/source/lib/symbols-count-time/symbols-count-time.js","hash":"8e223ec1c4af5a9b3119edc8cd135c15bec830f8","modified":1653314921560},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1632487263807},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1632487263808},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1632487263809},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1632487263822},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1632487263910},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6bb284d54df80b3b4eeca0e5a75f7198ec39cd28","modified":1644652265733},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1632487263847},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1632487263848},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1632487263852},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1632487263853},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1632487263853},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1632487263854},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1632487263860},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1632487263837},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1632487263837},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1632487263863},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1632487263864},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1632487263865},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1632487263866},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1632487263867},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1632487263867},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"2fc8c0f164233c0a225ab397a71f83877e51f0b5","modified":1644646474729},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1632487263869},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1632487263869},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1632487263870},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1632487263871},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1632487263871},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1632487263872},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1632487263873},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1632487263874},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1632487263876},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1632487263875},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1632487263876},{"_id":"themes/next/source/lib/canvas-ribbon/.git/config","hash":"859dd85203388dc5f882e8b78019889577e2dbb2","modified":1653313577123},{"_id":"themes/next/source/lib/canvas-ribbon/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1653313577110},{"_id":"themes/next/source/lib/canvas-ribbon/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1653313574744},{"_id":"themes/next/source/lib/canvas-ribbon/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1653313577134},{"_id":"themes/next/source/lib/canvas-ribbon/.git/index","hash":"b23492925d360ac3ea0fcc74219a78c2a7b68b6d","modified":1653313577138},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1632487263903},{"_id":"themes/next/source/lib/canvas-ribbon/.git/packed-refs","hash":"1a669ea6243f62a7f4c02d82225d6a49fdadb567","modified":1653313577097},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1632487263907},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1632487263810},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1632487263812},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1632487263811},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1632487263813},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1632487263814},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1632487263813},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1632487263815},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1632487263816},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1632487263816},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1632487263817},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1632487263818},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1632487263818},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1632487263819},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1632487263819},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1632487263820},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1632487263821},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1632487263820},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a58b1c0a0389d20a6f18e5591f0010aefe154f7a","modified":1644587937751},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1632487263823},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1632487263825},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1632487263849},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1632487263826},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1632487263824},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1632487263826},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1632487263850},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1632487263851},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1632487263851},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1632487263855},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1632487263856},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1632487263856},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1632487263859},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1632487263857},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1632487263860},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1632487263828},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1632487263830},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1632487263831},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1632487263832},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1632487263833},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"47ca8733f3f48a0c1ddfe4b21f6d134a670b8c63","modified":1644646857818},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1632487263858},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1632487263835},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1632487263839},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1632487263834},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1632487263840},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1632487263842},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1632487263842},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1632487263841},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1632487263843},{"_id":"themes/next/source/lib/canvas-ribbon/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1653313574769},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1632487263845},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1632487263846},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1632487263845},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1632487263844},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1653313574747},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1653313574749},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1653313574751},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1653313574754},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1653313574753},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1653313574758},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1653313574756},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1653313574760},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1653313574762},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1653313574765},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/update.sample","hash":"92e81cca38312414b140f52b9de0655ee232f65f","modified":1653313574767},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/HEAD","hash":"6766ce96f0e01225b5134a84eb897f2bc9079411","modified":1653313577116},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1653313574763},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/02/5cf882fc75a324b1d71b0921eb52ea427387fd","hash":"4a0f15d00f50c629f01c2274e26ef05b3779b6c6","modified":1653313576961},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1653313576971},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/15/9cfb8a3050111dfb3e6635e3f37fe68de2ab30","hash":"f4e1752896135edd6c9a36164b45893a59839548","modified":1653313577027},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/20/47d8728f7950fcc2276c339ee199302805838d","hash":"813e7f6c3b8954c40b250e6ba592d6bac7874397","modified":1653313577032},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/25/3593d429ba9f66eb536d2577e4aa8b74ed7dfa","hash":"b68bb1519d36e82753367a811009e5850db4ddce","modified":1653313576958},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/25/3acc9a19f8a5047f053ea8b4a62684a4204939","hash":"d2210d7c39aa3801a198b38651a3f013d27bdd46","modified":1653313576952},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/2b/41ae14433eb4a13cd99ac9736635723e813c32","hash":"0e30e5106b7021432c917699f60684276e727eb9","modified":1653313576955},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1653313576975},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/39/ea36a17ae4ce235f97d0cc1993cc51f932aa16","hash":"d3b328e06996ff12a2cf1f546bb78ab37a0b3b50","modified":1653313576947},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/56/4913335d11e112ac80e8d550c8347016007f6d","hash":"50e9db730ceac6b2d0c8e8d5a3fec450290fdd8e","modified":1653313576994},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/57/6d268825c6e7b3892828b61b9b408600faa1f2","hash":"2ca9617d2459b9e010e71b3b221fec42d76cae32","modified":1653313577030},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/5d/93512df328612ac84d124d0a64f78ddcd7ec28","hash":"94dc5692c542e87ed40ce00ab5e5d72d4ae78f23","modified":1653313576986},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/58/b315e0ea2584550eebcda4f1c17a9a7f2bea16","hash":"c7dc07b78ad53f0f515b3243a0ff09fb8ddb8235","modified":1653313576998},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/58/76c74f8c24cb9306189bf49fdf937b955c065c","hash":"283c92c40dc84fa11eba7c8b2ee8c5234dbf7ee6","modified":1653313576990},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1653313576979},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/7e/871dba93cad35ffcec76a936259ae9a3641bc7","hash":"957e9e7db09ee72fc49ca852d3cc67242567fa45","modified":1653313577038},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/6c/34e310dd41c6bfa8db842190388ab83e6d4fa2","hash":"b327c0ce763240a6a8bd2f3fb55ace6b9e3df671","modified":1653313576968},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/a2/822bd3b1fad40e718ded64ddfac693c4ac24c4","hash":"14b60f650711229ee8301f49e8403bb4bb991e09","modified":1653313576983},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/a4/14bc6b6b6deb276c361d14724cdc6aa9b65b84","hash":"5252d85b51d1de339004b7f6b2cd9efce16730c8","modified":1653313577002},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/a5/b8ea74a3afbc760b01b6d4bd432f4f1ace013e","hash":"afdcce658085edbf16ce7f4719bec0cb5536e77f","modified":1653313577006},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/ab/2197a6f5baffdd1d2895c169f4777921cc4027","hash":"81a75ca40bcfd278d6a9d67dedc8d61d959e2baa","modified":1653313577035},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/bc/43844047aa08d2b58a40fe3915a8382214a588","hash":"34086f267f92f39ea9819a5eafc04921661467d7","modified":1653313577012},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/b9/07949515b208cc605b513ff9d5b8153cbe2fe1","hash":"8fb6e8f2e6b4df8787239335ef9777a6c888d3c0","modified":1653313577023},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/c5/8416b72bd371aaf3bc8952f819c1afd3e4c0b4","hash":"aa8e6e340697fc6d9697c1ab8213ee40aca4ea82","modified":1653313577019},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/c6/d0381e6cd08086561110f76b5f921bf81a6f87","hash":"be98eb9329c91132e90d942a44d05a41c78b4470","modified":1653313576964},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/heads/master","hash":"16bd947558482613ed699f6cd50bfef39a7837da","modified":1653313577115},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/refs/heads/master","hash":"6766ce96f0e01225b5134a84eb897f2bc9079411","modified":1653313577119},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1653313577107},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/refs/remotes/origin/HEAD","hash":"6766ce96f0e01225b5134a84eb897f2bc9079411","modified":1653313577107},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1632487263906},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1632487263908},{"_id":"public/atom.xml","hash":"d38b1555a370c73441353f0bf36725d9e0a89e6b","modified":1653316276268},{"_id":"public/search.xml","hash":"b0a38a0885eeda01531a8ade7332f2d98d905aa8","modified":1653316276268},{"_id":"public/about/index.html","hash":"bf6a8339ee7aac8dac308b500c2896e27528dcda","modified":1653316276268},{"_id":"public/tags/index.html","hash":"620564d4d81f9233760edca1368964b04713042f","modified":1653316276268},{"_id":"public/categories/index.html","hash":"4cf5b426667fbe927f74581b00cbb223641de8cf","modified":1653316276268},{"_id":"public/archives/2021/09/index.html","hash":"43863ae21016af17a7719b1087014152c934a712","modified":1653316276268},{"_id":"public/archives/2021/10/index.html","hash":"d5aecafa3116fcf8e0a406db07f33f0f530f5f92","modified":1653316276268},{"_id":"public/archives/2021/11/index.html","hash":"7b61a5d8cb471248ea143a0b340f43963bf21e6e","modified":1653316276268},{"_id":"public/archives/2021/12/index.html","hash":"3f93f0e6ec43c3dba4570a8b8a17d202d1c38927","modified":1653316276268},{"_id":"public/archives/2022/index.html","hash":"fa739dbae6a763d49df0abdba8b8d795ab76cc7e","modified":1653316276268},{"_id":"public/archives/2022/01/index.html","hash":"4568433ab629272882a7548952b952a9c8a94560","modified":1653316276268},{"_id":"public/archives/2022/02/index.html","hash":"e84876aed65b2f2dd45894acd596f04cd83f1b09","modified":1653316276268},{"_id":"public/archives/2022/05/index.html","hash":"12226f569eb7224d25b9ec5b358a3b057c57a437","modified":1653316276268},{"_id":"public/categories/年终总结/index.html","hash":"5ce3b33eaea4691b28e58df93f49ec47db04c53e","modified":1653316276268},{"_id":"public/categories/react/index.html","hash":"027568aebe72dba2378c9533a52b12bd9b213b5b","modified":1653316276268},{"_id":"public/categories/python/index.html","hash":"06928997a71749e07a4fd860908d16807f061648","modified":1653316276268},{"_id":"public/categories/一些趣事的🌟/index.html","hash":"1b7dd9ff636ebf22792932ca2161976a1de25d1d","modified":1653316276268},{"_id":"public/categories/javascript/index.html","hash":"8bbff181c8a6775b848977667c8f30ce1edfa074","modified":1653316276268},{"_id":"public/categories/web/index.html","hash":"a068091d01694f67beaa39f969b1739fec58d3cc","modified":1653316276268},{"_id":"public/tags/deploy-qingfuwu/index.html","hash":"7f60c8b70732d11166e2ea84916774cfc5abfdb4","modified":1653316276268},{"_id":"public/tags/numpy/index.html","hash":"a86f4a25949fb3327b08a46e3a74378e984adbe4","modified":1653316276268},{"_id":"public/tags/Event/index.html","hash":"2f081252dc930ef176e0a469f377f5c4b7239f22","modified":1653316276268},{"_id":"public/friendsLinks/index.html","hash":"36aa0588c92377fc30ea72d18798ce20cb2a5749","modified":1653316276268},{"_id":"public/2022/02/08/一封阿里云的喝茶邮件/index.html","hash":"df58982800409ab123d1b615497a0b3e7812de07","modified":1653316276268},{"_id":"public/2022/01/12/聊聊JavaScript事件循环/index.html","hash":"9d307e2434b1562327b4b81d7ffd175134d8bd00","modified":1653316276268},{"_id":"public/2022/05/01/react合成事件/index.html","hash":"d8981053f21aba4c8843ddde46887a1ca9122932","modified":1653316276268},{"_id":"public/2022/01/03/2021年终总结/index.html","hash":"35de70cdfdec1801ba80479362613542116dd7da","modified":1653316276268},{"_id":"public/2021/12/07/谈谈cookie、session与token-jwt/index.html","hash":"087f9904a50f0bad7edb96d10ded128a97868ccf","modified":1653316276268},{"_id":"public/2021/11/18/一次base64指令的powershell/index.html","hash":"955811410ad017aa9ec8c63a1d17fa5692b7ad8e","modified":1653316276268},{"_id":"public/2021/10/22/actions进行轻服务的页面部署/index.html","hash":"ff14464c3f5311c29b8fd85e3efb3dfddb362eb0","modified":1653316276268},{"_id":"public/2021/10/21/对javaScript事件冒泡与事件捕获的再学习/index.html","hash":"64b864343d3fa118678c3a1b07b681d55ca95680","modified":1653316276268},{"_id":"public/2021/09/24/hello-world/index.html","hash":"13603086c92853e4a4641d7f301a480af54f28c9","modified":1653316276268},{"_id":"public/2021/10/13/numpy条件选择/index.html","hash":"74f16cb91ecc301b0bd7007d5891daea2e717e18","modified":1653316276268},{"_id":"public/archives/index.html","hash":"60484a94e3d28c2dd966f5c020376d6ea35a3a25","modified":1653316276268},{"_id":"public/archives/2021/index.html","hash":"60873737054a82600644f0d888438b0c94f792f3","modified":1653316276268},{"_id":"public/index.html","hash":"eadaf04109091f2d3b28b20dde9b6502bd98416a","modified":1653316276268},{"_id":"public/CNAME","hash":"d4c178941bdc5e06b035393a72cfd390869dda1b","modified":1653316276268},{"_id":"public/images/avatar.png","hash":"6aaf9775d28026f8ce19d2a446776b6514b56d14","modified":1653316276268},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1653316276268},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1653316276268},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1653316276268},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1653316276268},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1653316276268},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1653316276268},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1653316276268},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1653316276268},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1653316276268},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1653316276268},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1653316276268},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1653316276268},{"_id":"public/images/favicon.ico","hash":"45a4501b730f68d716cb8e7571c49e93911c4ae5","modified":1653316276268},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1653316276268},{"_id":"public/lib/canvas-ribbon/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1653316276268},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1653316276268},{"_id":"public/css/main.css","hash":"8c5c8c54baae4329c2ee3afcb8788f4247db42aa","modified":1653316276268},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1653316276268},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1653316276268},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1653316276268},{"_id":"public/js/fireworks.js","hash":"545c23cb641073dba2e361674f264f32bf90f72b","modified":1653316276268},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1653316276268},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1653316276268},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1653316276268},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1653316276268},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1653316276268},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1653316276268},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1653316276268},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"65b1a8f12d04b15d7ed6eeb9d11dec760a799c5f","modified":1653316276268},{"_id":"public/lib/canvas-ribbon/README.html","hash":"1b6d10c79836d002d90f4bcf35f498f1bf38c7ee","modified":1653316276268},{"_id":"public/lib/symbols-count-time/symbols-count-time.js","hash":"8e223ec1c4af5a9b3119edc8cd135c15bec830f8","modified":1653316276268},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1653316276268},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1653316276268},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1653316276268},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1653316276268},{"_id":"source/_posts/svg基础.md","hash":"45fce28343344cc8fd16f5543ef8d1dcdee26280","modified":1660450750341},{"_id":"themes/amber/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1659939194046},{"_id":"themes/amber/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1659939194046},{"_id":"themes/amber/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1659939194048},{"_id":"themes/amber/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1659939194046},{"_id":"themes/amber/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1659939194048},{"_id":"themes/amber/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1659939194048},{"_id":"themes/amber/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1659939194048},{"_id":"themes/amber/_config.yml","hash":"28affbf524bb97208c97795bd3f016e516c5f9e1","modified":1660115187700},{"_id":"themes/amber/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1659939194048},{"_id":"themes/amber/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1659939194060},{"_id":"themes/amber/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1659939194048},{"_id":"themes/amber/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1659939194046},{"_id":"themes/amber/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1659939194046},{"_id":"themes/amber/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1659939194047},{"_id":"themes/amber/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1659939194051},{"_id":"themes/amber/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1659939194047},{"_id":"themes/amber/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1659939194047},{"_id":"themes/amber/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1659939194047},{"_id":"themes/amber/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1659939194047},{"_id":"themes/amber/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1659939194047},{"_id":"themes/amber/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1659939194047},{"_id":"themes/amber/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1659939194048},{"_id":"themes/amber/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1659939194047},{"_id":"themes/amber/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1659939194049},{"_id":"themes/amber/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1659939194049},{"_id":"themes/amber/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1659939194049},{"_id":"themes/amber/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1659939194049},{"_id":"themes/amber/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1659939194049},{"_id":"themes/amber/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1659939194049},{"_id":"themes/amber/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1659939194049},{"_id":"themes/amber/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1659939194049},{"_id":"themes/amber/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1659939194051},{"_id":"themes/amber/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1659939194051},{"_id":"themes/amber/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1659939194051},{"_id":"themes/amber/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1659939194049},{"_id":"themes/amber/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1659939194051},{"_id":"themes/amber/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1659939194051},{"_id":"themes/amber/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1659939194051},{"_id":"themes/amber/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1659939194051},{"_id":"themes/amber/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1659939194052},{"_id":"themes/amber/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1659939194051},{"_id":"themes/amber/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1659939194052},{"_id":"themes/amber/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1659939194052},{"_id":"themes/amber/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1659939194052},{"_id":"themes/amber/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1659939194052},{"_id":"themes/amber/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1659939194052},{"_id":"themes/amber/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1659939194052},{"_id":"themes/amber/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1659939194052},{"_id":"themes/amber/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1659939194052},{"_id":"themes/amber/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1659939194052},{"_id":"themes/amber/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1659939194053},{"_id":"themes/amber/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1659939194053},{"_id":"themes/amber/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1659939194053},{"_id":"themes/amber/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1659939194053},{"_id":"themes/amber/layout/_layout.swig","hash":"f1d4a6e8a5630bcf7be5900d95463ce45fb6e3c2","modified":1659939194053},{"_id":"themes/amber/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1659939194060},{"_id":"themes/amber/layout/links.swig","hash":"611f9bd64b42abed7c78f49b8eed127b101645ab","modified":1659939194060},{"_id":"themes/amber/layout/page.swig","hash":"13e3069523ed2cb0b0845ae9ffa144db5213b9ef","modified":1659939194060},{"_id":"themes/amber/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1659939194060},{"_id":"themes/amber/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1659939194060},{"_id":"themes/amber/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1659939194060},{"_id":"themes/amber/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1659939194060},{"_id":"themes/amber/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1659939194047},{"_id":"themes/amber/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1659939194047},{"_id":"themes/amber/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1659939194047},{"_id":"themes/amber/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1659939194049},{"_id":"themes/amber/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1659939194062},{"_id":"themes/amber/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1659939194047},{"_id":"themes/amber/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1659939194050},{"_id":"themes/amber/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1659939194050},{"_id":"themes/amber/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1659939194050},{"_id":"themes/amber/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1659939194050},{"_id":"themes/amber/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1659939194050},{"_id":"themes/amber/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1659939194050},{"_id":"themes/amber/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1659939194050},{"_id":"themes/amber/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1659939194051},{"_id":"themes/amber/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1659939194050},{"_id":"themes/amber/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1659939194050},{"_id":"themes/amber/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1659939194051},{"_id":"themes/amber/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1659939194050},{"_id":"themes/amber/layout/_macro/passage-end-tag.swig","hash":"f29b50d83bcdc9e70696b6a8a8917d8b2ad4be10","modified":1659939194053},{"_id":"themes/amber/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1659939194053},{"_id":"themes/amber/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1659939194054},{"_id":"themes/amber/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1659939194053},{"_id":"themes/amber/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1659939194055},{"_id":"themes/amber/layout/_partials/footer.swig","hash":"992fa89bdf555fab75417cc5abe28a06621d0182","modified":1660115187701},{"_id":"themes/amber/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1659939194056},{"_id":"themes/amber/layout/_macro/post.swig","hash":"883c59628b086aa566481cc110ad9577e97ed5e6","modified":1659939194053},{"_id":"themes/amber/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1659939194055},{"_id":"themes/amber/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1659939194056},{"_id":"themes/amber/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1659939194056},{"_id":"themes/amber/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1659939194057},{"_id":"themes/amber/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1659939194056},{"_id":"themes/amber/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1659939194058},{"_id":"themes/amber/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1659939194057},{"_id":"themes/amber/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1659939194061},{"_id":"themes/amber/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1659939194058},{"_id":"themes/amber/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1659939194057},{"_id":"themes/amber/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1659939194061},{"_id":"themes/amber/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1659939194062},{"_id":"themes/amber/scripts/filters/minify.js","hash":"110660274504fe4933f12f332c6c1adb034e4f80","modified":1660115187702},{"_id":"themes/amber/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1659939194061},{"_id":"themes/amber/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1659939194062},{"_id":"themes/amber/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1659939194062},{"_id":"themes/amber/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1659939194062},{"_id":"themes/amber/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1659939194060},{"_id":"themes/amber/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1659939194062},{"_id":"themes/amber/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1659939194062},{"_id":"themes/amber/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1659939194062},{"_id":"themes/amber/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1659939194062},{"_id":"themes/amber/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1659939194062},{"_id":"themes/amber/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1659939194062},{"_id":"themes/amber/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1659939194062},{"_id":"themes/amber/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1659939194063},{"_id":"themes/amber/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1659939194063},{"_id":"themes/amber/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1659939194059},{"_id":"themes/amber/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1659939194063},{"_id":"themes/amber/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1659939194073},{"_id":"themes/amber/source/css/main.styl","hash":"9b4fcd14b5b85d532a82dbc1c18eb5b286902ebc","modified":1660115187703},{"_id":"themes/amber/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1659939194076},{"_id":"themes/amber/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1659939194076},{"_id":"themes/amber/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1659939194076},{"_id":"themes/amber/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1659939194063},{"_id":"themes/amber/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1659939194076},{"_id":"themes/amber/source/css/_colors.styl","hash":"51d6971cb3090cd84b26019b12ea2aa7adeba3e7","modified":1660121145267},{"_id":"themes/amber/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1659939194077},{"_id":"themes/amber/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1659939194077},{"_id":"themes/amber/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1659939194077},{"_id":"themes/amber/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1659939194077},{"_id":"themes/amber/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1659939194077},{"_id":"themes/amber/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1659939194077},{"_id":"themes/amber/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1659939194077},{"_id":"themes/amber/source/images/favicon.ico","hash":"45a4501b730f68d716cb8e7571c49e93911c4ae5","modified":1659939194077},{"_id":"themes/amber/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1659939194078},{"_id":"themes/amber/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1659939194077},{"_id":"themes/amber/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1659939194077},{"_id":"themes/amber/source/js/fireworks.js","hash":"545c23cb641073dba2e361674f264f32bf90f72b","modified":1659939194078},{"_id":"themes/amber/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1659939194078},{"_id":"themes/amber/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1659939194078},{"_id":"themes/amber/source/js/motion.js","hash":"c44fed8b215611710f600b8b880c1d1f17ed97ac","modified":1660115187703},{"_id":"themes/amber/source/js/utils.js","hash":"c00604b8873f18c20d8b5d54965e55f344b37412","modified":1660115187703},{"_id":"themes/amber/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1659939194054},{"_id":"themes/amber/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1659939194054},{"_id":"themes/amber/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1659939194055},{"_id":"themes/amber/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1659939194055},{"_id":"themes/amber/layout/_partials/header/brand.swig","hash":"2ff0ad69f103bd7536954bb2d87ce182cd842fe4","modified":1660115187702},{"_id":"themes/amber/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1659939194054},{"_id":"themes/amber/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1659939194055},{"_id":"themes/amber/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1659939194055},{"_id":"themes/amber/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1659939194055},{"_id":"themes/amber/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1659939194079},{"_id":"themes/amber/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1659939194078},{"_id":"themes/amber/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1659939194055},{"_id":"themes/amber/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1659939194055},{"_id":"themes/amber/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1659939194056},{"_id":"themes/amber/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1659939194056},{"_id":"themes/amber/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1659939194054},{"_id":"themes/amber/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1659939194056},{"_id":"themes/amber/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1659939194056},{"_id":"themes/amber/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1659939194056},{"_id":"themes/amber/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1659939194056},{"_id":"themes/amber/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1659939194057},{"_id":"themes/amber/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1659939194057},{"_id":"themes/amber/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1659939194057},{"_id":"themes/amber/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1659939194057},{"_id":"themes/amber/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1659939194057},{"_id":"themes/amber/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1659939194057},{"_id":"themes/amber/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1659939194056},{"_id":"themes/amber/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1659939194057},{"_id":"themes/amber/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1659939194057},{"_id":"themes/amber/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1659939194058},{"_id":"themes/amber/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1659939194058},{"_id":"themes/amber/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1659939194058},{"_id":"themes/amber/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1659939194058},{"_id":"themes/amber/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1659939194058},{"_id":"themes/amber/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1659939194058},{"_id":"themes/amber/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1659939194058},{"_id":"themes/amber/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1659939194058},{"_id":"themes/amber/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1659939194058},{"_id":"themes/amber/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1659939194058},{"_id":"themes/amber/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1659939194059},{"_id":"themes/amber/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1659939194058},{"_id":"themes/amber/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1659939194059},{"_id":"themes/amber/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1659939194059},{"_id":"themes/amber/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1659939194059},{"_id":"themes/amber/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1659939194059},{"_id":"themes/amber/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1659939194059},{"_id":"themes/amber/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1659939194059},{"_id":"themes/amber/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1659939194061},{"_id":"themes/amber/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1659939194059},{"_id":"themes/amber/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1659939194061},{"_id":"themes/amber/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1659939194061},{"_id":"themes/amber/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1659939194061},{"_id":"themes/amber/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1659939194061},{"_id":"themes/amber/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1659939194061},{"_id":"themes/amber/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1659939194061},{"_id":"themes/amber/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1659939194061},{"_id":"themes/amber/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1659939194060},{"_id":"themes/amber/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1659939194060},{"_id":"themes/amber/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1659939194060},{"_id":"themes/amber/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1659939194076},{"_id":"themes/amber/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1659939194075},{"_id":"themes/amber/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1659939194076},{"_id":"themes/amber/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1659939194076},{"_id":"themes/amber/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1659939194059},{"_id":"themes/amber/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1659939194078},{"_id":"themes/amber/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1659939194078},{"_id":"themes/amber/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1659939194080},{"_id":"themes/amber/source/css/_variables/base.styl","hash":"5f32728cbd4e554d18bb7eefc17256df7d8423c4","modified":1660120392327},{"_id":"themes/amber/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1659939194063},{"_id":"themes/amber/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1659939194063},{"_id":"themes/amber/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1659939194063},{"_id":"themes/amber/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1659939194070},{"_id":"themes/amber/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1659939194061},{"_id":"themes/amber/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1659939194080},{"_id":"themes/amber/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1659939194068},{"_id":"themes/amber/source/css/_common/scaffolding/base.styl","hash":"6bb284d54df80b3b4eeca0e5a75f7198ec39cd28","modified":1659939194071},{"_id":"themes/amber/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1659939194072},{"_id":"themes/amber/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1659939194071},{"_id":"themes/amber/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1659939194070},{"_id":"themes/amber/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1659939194072},{"_id":"themes/amber/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1659939194071},{"_id":"themes/amber/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1659939194072},{"_id":"themes/amber/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1659939194072},{"_id":"themes/amber/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1659939194073},{"_id":"themes/amber/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1659939194073},{"_id":"themes/amber/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1659939194073},{"_id":"themes/amber/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1659939194074},{"_id":"themes/amber/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1659939194074},{"_id":"themes/amber/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1659939194074},{"_id":"themes/amber/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1659939194074},{"_id":"themes/amber/source/css/_schemes/Muse/_header.styl","hash":"2fc8c0f164233c0a225ab397a71f83877e51f0b5","modified":1659939194074},{"_id":"themes/amber/source/css/_schemes/Muse/_sidebar.styl","hash":"2956105ac18b0f4ad97e11c8ae30b83ea0d76da9","modified":1660116669206},{"_id":"themes/amber/source/css/_schemes/Muse/_menu.styl","hash":"60bc133190cc916596c81ec5e87787d4bf4f5e0f","modified":1660121145269},{"_id":"themes/amber/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1659939194074},{"_id":"themes/amber/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1659939194074},{"_id":"themes/amber/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1659939194074},{"_id":"themes/amber/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1659939194075},{"_id":"themes/amber/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1659939194075},{"_id":"themes/amber/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1659939194075},{"_id":"themes/amber/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1659939194075},{"_id":"themes/amber/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1659939194075},{"_id":"themes/amber/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1659939194075},{"_id":"themes/amber/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1659939194079},{"_id":"themes/amber/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1659939194079},{"_id":"themes/amber/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1659939194063},{"_id":"themes/amber/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1659939194063},{"_id":"themes/amber/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1659939194063},{"_id":"themes/amber/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1659939194064},{"_id":"themes/amber/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1659939194064},{"_id":"themes/amber/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1659939194064},{"_id":"themes/amber/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1659939194064},{"_id":"themes/amber/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1659939194064},{"_id":"themes/amber/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1659939194064},{"_id":"themes/amber/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1659939194064},{"_id":"themes/amber/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1659939194067},{"_id":"themes/amber/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1659939194067},{"_id":"themes/amber/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1659939194067},{"_id":"themes/amber/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1659939194067},{"_id":"themes/amber/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1659939194067},{"_id":"themes/amber/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1659939194067},{"_id":"themes/amber/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1659939194068},{"_id":"themes/amber/source/css/_common/components/post/post.styl","hash":"595748507432b11ca81fe79090596ce9fb8913b1","modified":1660121145268},{"_id":"themes/amber/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1659939194069},{"_id":"themes/amber/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1659939194068},{"_id":"themes/amber/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1659939194068},{"_id":"themes/amber/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1659939194068},{"_id":"themes/amber/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1659939194068},{"_id":"themes/amber/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1659939194069},{"_id":"themes/amber/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1659939194069},{"_id":"themes/amber/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1659939194068},{"_id":"themes/amber/source/css/_common/outline/header/site-meta.styl","hash":"1a4ad0ba4240fdc79cdc747bafad7c83c01a8171","modified":1660133042211},{"_id":"themes/amber/source/css/_common/outline/header/github-banner.styl","hash":"2eebaeb38dddb7d64c4649ff9a843ee8da1e220f","modified":1660115187703},{"_id":"themes/amber/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1659939194070},{"_id":"themes/amber/source/css/_common/outline/header/menu.styl","hash":"51a92f7a787f51e13ae5b4cc02201319509ae34f","modified":1660133042211},{"_id":"themes/amber/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1659939194070},{"_id":"themes/amber/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1659939194069},{"_id":"themes/amber/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1659939194070},{"_id":"themes/amber/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1659939194070},{"_id":"themes/amber/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"a599a7e36a40527b4531647149f15dc4fcfbfdf4","modified":1660121145268},{"_id":"themes/amber/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1659939194070},{"_id":"themes/amber/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1659939194071},{"_id":"themes/amber/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1659939194070},{"_id":"themes/amber/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1659939194070},{"_id":"themes/amber/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1659939194071},{"_id":"themes/amber/source/css/_common/outline/sidebar/sidebar.styl","hash":"b13b0644be6575ca203c8446e24e3a38043b9054","modified":1660135036721},{"_id":"themes/amber/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1659939194071},{"_id":"themes/amber/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1659939194071},{"_id":"themes/amber/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1659939194071},{"_id":"themes/amber/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1659939194072},{"_id":"themes/amber/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1659939194072},{"_id":"themes/amber/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1659939194072},{"_id":"themes/amber/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1659939194072},{"_id":"themes/amber/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1659939194072},{"_id":"themes/amber/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1659939194073},{"_id":"themes/amber/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1659939194073},{"_id":"themes/amber/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1659939194073},{"_id":"themes/amber/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1659939194079},{"_id":"themes/amber/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1659939194079}],"Category":[{"name":"年终总结","_id":"cl3itto7g00049ov72lbgfwrc"},{"name":"react","_id":"cl3itto7p000b9ov74t0u0acw"},{"name":"python","_id":"cl3itto7s000h9ov73ypo63cr"},{"name":"一些趣事的🌟","_id":"cl3itto7w000n9ov7aym638rk"},{"name":"javascript","_id":"cl3itto7y000r9ov79esg8k14"},{"name":"web","_id":"cl3itto7y000t9ov7ew5r3d52"}],"Data":[{"_id":"linklist","data":[{"nickname":"ZCW","avatar":"http://sherry.formeky.xyz:8090/upload/2021/09/QQ%E5%9B%BE%E7%89%8720210629151630-d1748408bc4d4d3b995abaf38440b71d.jpg","site":"http://sherry.formeky.xyz:8090/","descp":"后端工程师"},{"nickname":"LJC","site":"https://lengthmin.me/","descp":"这大概就是大佬吧","avatar":"https://lengthmin.me/images/avatar.png"}]}],"Page":[{"title":"· 关于 ·","date":"2021-10-01T11:24:48.000Z","_content":"\n```javascript\n喜欢 JavaScript;\n兴趣 python;\n害怕新东西，但又喜欢新东西;\n热爱前端，更爱大前端;\n喜欢生活，希望生活也喜欢我😂\n```\n\n> %E7%83%AD%E7%88%B1%E4%BD%A0%E6%89%80%E7%83%AD%E7%88%B1 ----------- _mySelf_（url encoded😀）\n","source":"about/index.md","raw":"---\ntitle: · 关于 ·\ndate: 2021-10-01 19:24:48\n---\n\n```javascript\n喜欢 JavaScript;\n兴趣 python;\n害怕新东西，但又喜欢新东西;\n热爱前端，更爱大前端;\n喜欢生活，希望生活也喜欢我😂\n```\n\n> %E7%83%AD%E7%88%B1%E4%BD%A0%E6%89%80%E7%83%AD%E7%88%B1 ----------- _mySelf_（url encoded😀）\n","updated":"2022-05-01T15:48:39.120Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl3itto7700009ov7h3nyeqkr","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">喜欢 JavaScript;</span><br><span class=\"line\">兴趣 python;</span><br><span class=\"line\">害怕新东西，但又喜欢新东西;</span><br><span class=\"line\">热爱前端，更爱大前端;</span><br><span class=\"line\">喜欢生活，希望生活也喜欢我😂</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>%E7%83%AD%E7%88%B1%E4%BD%A0%E6%89%80%E7%83%AD%E7%88%B1 ———– _mySelf_（url encoded😀）</p>\n</blockquote>\n","site":{"data":{"linklist":[{"nickname":"ZCW","avatar":"http://sherry.formeky.xyz:8090/upload/2021/09/QQ%E5%9B%BE%E7%89%8720210629151630-d1748408bc4d4d3b995abaf38440b71d.jpg","site":"http://sherry.formeky.xyz:8090/","descp":"后端工程师"},{"nickname":"LJC","site":"https://lengthmin.me/","descp":"这大概就是大佬吧","avatar":"https://lengthmin.me/images/avatar.png"}]}},"length":147,"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">喜欢 JavaScript;</span><br><span class=\"line\">兴趣 python;</span><br><span class=\"line\">害怕新东西，但又喜欢新东西;</span><br><span class=\"line\">热爱前端，更爱大前端;</span><br><span class=\"line\">喜欢生活，希望生活也喜欢我😂</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>%E7%83%AD%E7%88%B1%E4%BD%A0%E6%89%80%E7%83%AD%E7%88%B1 ———– _mySelf_（url encoded😀）</p>\n</blockquote>\n"},{"title":"下面的各位都是大佬","date":"2021-11-08T16:16:21.000Z","type":"links","_content":"","source":"friendsLinks/index.md","raw":"---\ntitle: 下面的各位都是大佬\ndate: 2021-11-09 00:16:21\ntype: links\n---\n","updated":"2021-11-11T08:59:43.202Z","path":"friendsLinks/index.html","comments":1,"layout":"page","_id":"cl3itto7d00029ov7au5chuk3","content":"","site":{"data":{"linklist":[{"nickname":"ZCW","avatar":"http://sherry.formeky.xyz:8090/upload/2021/09/QQ%E5%9B%BE%E7%89%8720210629151630-d1748408bc4d4d3b995abaf38440b71d.jpg","site":"http://sherry.formeky.xyz:8090/","descp":"后端工程师"},{"nickname":"LJC","site":"https://lengthmin.me/","descp":"这大概就是大佬吧","avatar":"https://lengthmin.me/images/avatar.png"}]}},"length":0,"excerpt":"","more":""},{"title":"tags","date":"2021-10-01T11:24:20.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-10-01 19:24:20\ntype: \"tags\"\ncomments: false\n---\n","updated":"2021-10-12T16:48:47.973Z","path":"tags/index.html","layout":"page","_id":"cl3itto7i00059ov7c0q8hm6t","content":"","site":{"data":{"linklist":[{"nickname":"ZCW","avatar":"http://sherry.formeky.xyz:8090/upload/2021/09/QQ%E5%9B%BE%E7%89%8720210629151630-d1748408bc4d4d3b995abaf38440b71d.jpg","site":"http://sherry.formeky.xyz:8090/","descp":"后端工程师"},{"nickname":"LJC","site":"https://lengthmin.me/","descp":"这大概就是大佬吧","avatar":"https://lengthmin.me/images/avatar.png"}]}},"length":0,"excerpt":"","more":""},{"title":"categories","date":"2021-10-01T11:23:20.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-10-01 19:23:20\ntype: \"categories\"\n---\n","updated":"2021-10-01T13:31:25.901Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl3itto7l00089ov76qqihpch","content":"","site":{"data":{"linklist":[{"nickname":"ZCW","avatar":"http://sherry.formeky.xyz:8090/upload/2021/09/QQ%E5%9B%BE%E7%89%8720210629151630-d1748408bc4d4d3b995abaf38440b71d.jpg","site":"http://sherry.formeky.xyz:8090/","descp":"后端工程师"},{"nickname":"LJC","site":"https://lengthmin.me/","descp":"这大概就是大佬吧","avatar":"https://lengthmin.me/images/avatar.png"}]}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"2021年终总结","date":"2022-01-02T17:44:31.000Z","_content":"\n> 感想： 时间过得真的很快，而需要学习的东西一直在变多，从大二到大三的，慢慢地就觉得自己接触的领域所渺小。而这一年里感受最深的总还是时间不够的样子。\n\n---\n\n<!-- more -->\n\n### 学习\n\n在学习上，尽管不是所有课程安排得很妥当，但也有一些课程让我受益良多。记忆比较深刻得还是暑假前的 flutter 课程吧。那一次面临得挑战是未知、课程时间短。而最终的任务是使用 flutter 完成一个 APP。而我做的就是一个记笔记的 APP 了[(https://github.com/Jealh-h/lightNote)](https://github.com/Jealh-h/lightNote)，尽管功能不是那么完善，但这次让我体验到了全栈开发的一些困难吧，得益于 eggjs 框架能让我一个不太懂后端的轻松一点.......。数据分析这门课也挺好的，至少让我在机器学习方面能够调库了，能训练模型了。特别是在最后的房价预测的项目上，从数据获取到数据分析再到模型预测，这一套下来让我觉得 python 更加强大了。其次就是数据可视化了，虽然说理论课着实有一点无聊，好在实验课还比较有趣，这次让我体验了一把 d3js,给我的感觉就是 jquery 的一个兄弟一样，只不过更加适合于绘制图形。最后说说编译原理吧，这门课就感觉比较神奇吧？！从词法分析到语法分析，再到语义分析等等。都感觉有很强的理论支撑。单就对于给定的 test 来说，做一个词法分析、语法分析的工作量就挺大的（求 NFA、DFA,改写 LL(1)文法等等），可见哪些语言之父是有多 🐂 了。\n\n### 生活\n\n在这一年里依然那么喜欢逛 bi 站,喜欢听音乐。印象最深的还是《双城之战》了,一方面是我喜欢的画风，但是呢这剧情确实有点虐了,这大概就是角色设定吧。\n**qq 音乐年度报告**\n![qq音乐](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/qqmusic_2021.PNG)\n\n**bilibili 年度报告**\n![bilibili](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/bilibili_2021.PNG)\n\n### 技术栈\n\n在技术栈上，对于 react 的使用更加熟悉了，尽管自己想用 vue 写一个个人博客，但写到一半还是放弃了（可能那时候还不知道一些强大的 nodejs 框架吧）。所以还是 hexo 香啊，就这样发现了写博客是一件强化记忆的事情。在这一年里，虽然在知识广度上有了提升，但在深度上感觉还学提升。比较纠结的还是对于一些工具不知到是要会到什么层度吧，比如 webpack,vite 是会按照官方文档配置，还是能熟练地写出来。暑期在实验室期间，把原有的 oj3 由 webpack 构建改成了 vite,只能说 vite 真快。使用 react 重写了一个会议室管理系统端。而对于微信小程序那边，虽然没有获得奖，但也收获了一些开发经验吧。而对于一些其他知识，比如 rust、electron、wasm、以及游戏开发都是很想学的，但都会感觉自由的时间太少，而学习又需要耗费大量时间。所以还需要控制自己、让自己珍惜时间啊。\n\n### 期望\n\n希望自己记忆力好一点。\n每一天都要崭新的一点。\n对渴望的事情执着一点。\n让自己的想法丰富一点。\n\n**就上面那么亿点就够了**\n","source":"_posts/2021年终总结.md","raw":"---\ntitle: 2021年终总结\ndate: 2022-01-03 01:44:31\ntags:\ncategories: 年终总结\n---\n\n> 感想： 时间过得真的很快，而需要学习的东西一直在变多，从大二到大三的，慢慢地就觉得自己接触的领域所渺小。而这一年里感受最深的总还是时间不够的样子。\n\n---\n\n<!-- more -->\n\n### 学习\n\n在学习上，尽管不是所有课程安排得很妥当，但也有一些课程让我受益良多。记忆比较深刻得还是暑假前的 flutter 课程吧。那一次面临得挑战是未知、课程时间短。而最终的任务是使用 flutter 完成一个 APP。而我做的就是一个记笔记的 APP 了[(https://github.com/Jealh-h/lightNote)](https://github.com/Jealh-h/lightNote)，尽管功能不是那么完善，但这次让我体验到了全栈开发的一些困难吧，得益于 eggjs 框架能让我一个不太懂后端的轻松一点.......。数据分析这门课也挺好的，至少让我在机器学习方面能够调库了，能训练模型了。特别是在最后的房价预测的项目上，从数据获取到数据分析再到模型预测，这一套下来让我觉得 python 更加强大了。其次就是数据可视化了，虽然说理论课着实有一点无聊，好在实验课还比较有趣，这次让我体验了一把 d3js,给我的感觉就是 jquery 的一个兄弟一样，只不过更加适合于绘制图形。最后说说编译原理吧，这门课就感觉比较神奇吧？！从词法分析到语法分析，再到语义分析等等。都感觉有很强的理论支撑。单就对于给定的 test 来说，做一个词法分析、语法分析的工作量就挺大的（求 NFA、DFA,改写 LL(1)文法等等），可见哪些语言之父是有多 🐂 了。\n\n### 生活\n\n在这一年里依然那么喜欢逛 bi 站,喜欢听音乐。印象最深的还是《双城之战》了,一方面是我喜欢的画风，但是呢这剧情确实有点虐了,这大概就是角色设定吧。\n**qq 音乐年度报告**\n![qq音乐](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/qqmusic_2021.PNG)\n\n**bilibili 年度报告**\n![bilibili](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/bilibili_2021.PNG)\n\n### 技术栈\n\n在技术栈上，对于 react 的使用更加熟悉了，尽管自己想用 vue 写一个个人博客，但写到一半还是放弃了（可能那时候还不知道一些强大的 nodejs 框架吧）。所以还是 hexo 香啊，就这样发现了写博客是一件强化记忆的事情。在这一年里，虽然在知识广度上有了提升，但在深度上感觉还学提升。比较纠结的还是对于一些工具不知到是要会到什么层度吧，比如 webpack,vite 是会按照官方文档配置，还是能熟练地写出来。暑期在实验室期间，把原有的 oj3 由 webpack 构建改成了 vite,只能说 vite 真快。使用 react 重写了一个会议室管理系统端。而对于微信小程序那边，虽然没有获得奖，但也收获了一些开发经验吧。而对于一些其他知识，比如 rust、electron、wasm、以及游戏开发都是很想学的，但都会感觉自由的时间太少，而学习又需要耗费大量时间。所以还需要控制自己、让自己珍惜时间啊。\n\n### 期望\n\n希望自己记忆力好一点。\n每一天都要崭新的一点。\n对渴望的事情执着一点。\n让自己的想法丰富一点。\n\n**就上面那么亿点就够了**\n","slug":"2021年终总结","published":1,"updated":"2022-04-30T02:34:44.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3itto7a00019ov7gn0t1vp2","content":"<blockquote>\n<p>感想： 时间过得真的很快，而需要学习的东西一直在变多，从大二到大三的，慢慢地就觉得自己接触的领域所渺小。而这一年里感受最深的总还是时间不够的样子。</p>\n</blockquote>\n<hr>\n<span id=\"more\"></span>\n\n<h3 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h3><p>在学习上，尽管不是所有课程安排得很妥当，但也有一些课程让我受益良多。记忆比较深刻得还是暑假前的 flutter 课程吧。那一次面临得挑战是未知、课程时间短。而最终的任务是使用 flutter 完成一个 APP。而我做的就是一个记笔记的 APP 了<a href=\"https://github.com/Jealh-h/lightNote\">(https://github.com/Jealh-h/lightNote)</a>，尽管功能不是那么完善，但这次让我体验到了全栈开发的一些困难吧，得益于 eggjs 框架能让我一个不太懂后端的轻松一点…….。数据分析这门课也挺好的，至少让我在机器学习方面能够调库了，能训练模型了。特别是在最后的房价预测的项目上，从数据获取到数据分析再到模型预测，这一套下来让我觉得 python 更加强大了。其次就是数据可视化了，虽然说理论课着实有一点无聊，好在实验课还比较有趣，这次让我体验了一把 d3js,给我的感觉就是 jquery 的一个兄弟一样，只不过更加适合于绘制图形。最后说说编译原理吧，这门课就感觉比较神奇吧？！从词法分析到语法分析，再到语义分析等等。都感觉有很强的理论支撑。单就对于给定的 test 来说，做一个词法分析、语法分析的工作量就挺大的（求 NFA、DFA,改写 LL(1)文法等等），可见哪些语言之父是有多 🐂 了。</p>\n<h3 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h3><p>在这一年里依然那么喜欢逛 bi 站,喜欢听音乐。印象最深的还是《双城之战》了,一方面是我喜欢的画风，但是呢这剧情确实有点虐了,这大概就是角色设定吧。<br><strong>qq 音乐年度报告</strong><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/qqmusic_2021.PNG\" alt=\"qq音乐\"></p>\n<p><strong>bilibili 年度报告</strong><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/bilibili_2021.PNG\" alt=\"bilibili\"></p>\n<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3><p>在技术栈上，对于 react 的使用更加熟悉了，尽管自己想用 vue 写一个个人博客，但写到一半还是放弃了（可能那时候还不知道一些强大的 nodejs 框架吧）。所以还是 hexo 香啊，就这样发现了写博客是一件强化记忆的事情。在这一年里，虽然在知识广度上有了提升，但在深度上感觉还学提升。比较纠结的还是对于一些工具不知到是要会到什么层度吧，比如 webpack,vite 是会按照官方文档配置，还是能熟练地写出来。暑期在实验室期间，把原有的 oj3 由 webpack 构建改成了 vite,只能说 vite 真快。使用 react 重写了一个会议室管理系统端。而对于微信小程序那边，虽然没有获得奖，但也收获了一些开发经验吧。而对于一些其他知识，比如 rust、electron、wasm、以及游戏开发都是很想学的，但都会感觉自由的时间太少，而学习又需要耗费大量时间。所以还需要控制自己、让自己珍惜时间啊。</p>\n<h3 id=\"期望\"><a href=\"#期望\" class=\"headerlink\" title=\"期望\"></a>期望</h3><p>希望自己记忆力好一点。<br>每一天都要崭新的一点。<br>对渴望的事情执着一点。<br>让自己的想法丰富一点。</p>\n<p><strong>就上面那么亿点就够了</strong></p>\n","site":{"data":{"linklist":[{"nickname":"ZCW","avatar":"http://sherry.formeky.xyz:8090/upload/2021/09/QQ%E5%9B%BE%E7%89%8720210629151630-d1748408bc4d4d3b995abaf38440b71d.jpg","site":"http://sherry.formeky.xyz:8090/","descp":"后端工程师"},{"nickname":"LJC","site":"https://lengthmin.me/","descp":"这大概就是大佬吧","avatar":"https://lengthmin.me/images/avatar.png"}]}},"length":1127,"excerpt":"<blockquote>\n<p>感想： 时间过得真的很快，而需要学习的东西一直在变多，从大二到大三的，慢慢地就觉得自己接触的领域所渺小。而这一年里感受最深的总还是时间不够的样子。</p>\n</blockquote>\n<hr>","more":"<h3 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h3><p>在学习上，尽管不是所有课程安排得很妥当，但也有一些课程让我受益良多。记忆比较深刻得还是暑假前的 flutter 课程吧。那一次面临得挑战是未知、课程时间短。而最终的任务是使用 flutter 完成一个 APP。而我做的就是一个记笔记的 APP 了<a href=\"https://github.com/Jealh-h/lightNote\">(https://github.com/Jealh-h/lightNote)</a>，尽管功能不是那么完善，但这次让我体验到了全栈开发的一些困难吧，得益于 eggjs 框架能让我一个不太懂后端的轻松一点…….。数据分析这门课也挺好的，至少让我在机器学习方面能够调库了，能训练模型了。特别是在最后的房价预测的项目上，从数据获取到数据分析再到模型预测，这一套下来让我觉得 python 更加强大了。其次就是数据可视化了，虽然说理论课着实有一点无聊，好在实验课还比较有趣，这次让我体验了一把 d3js,给我的感觉就是 jquery 的一个兄弟一样，只不过更加适合于绘制图形。最后说说编译原理吧，这门课就感觉比较神奇吧？！从词法分析到语法分析，再到语义分析等等。都感觉有很强的理论支撑。单就对于给定的 test 来说，做一个词法分析、语法分析的工作量就挺大的（求 NFA、DFA,改写 LL(1)文法等等），可见哪些语言之父是有多 🐂 了。</p>\n<h3 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h3><p>在这一年里依然那么喜欢逛 bi 站,喜欢听音乐。印象最深的还是《双城之战》了,一方面是我喜欢的画风，但是呢这剧情确实有点虐了,这大概就是角色设定吧。<br><strong>qq 音乐年度报告</strong><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/qqmusic_2021.PNG\" alt=\"qq音乐\"></p>\n<p><strong>bilibili 年度报告</strong><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/bilibili_2021.PNG\" alt=\"bilibili\"></p>\n<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3><p>在技术栈上，对于 react 的使用更加熟悉了，尽管自己想用 vue 写一个个人博客，但写到一半还是放弃了（可能那时候还不知道一些强大的 nodejs 框架吧）。所以还是 hexo 香啊，就这样发现了写博客是一件强化记忆的事情。在这一年里，虽然在知识广度上有了提升，但在深度上感觉还学提升。比较纠结的还是对于一些工具不知到是要会到什么层度吧，比如 webpack,vite 是会按照官方文档配置，还是能熟练地写出来。暑期在实验室期间，把原有的 oj3 由 webpack 构建改成了 vite,只能说 vite 真快。使用 react 重写了一个会议室管理系统端。而对于微信小程序那边，虽然没有获得奖，但也收获了一些开发经验吧。而对于一些其他知识，比如 rust、electron、wasm、以及游戏开发都是很想学的，但都会感觉自由的时间太少，而学习又需要耗费大量时间。所以还需要控制自己、让自己珍惜时间啊。</p>\n<h3 id=\"期望\"><a href=\"#期望\" class=\"headerlink\" title=\"期望\"></a>期望</h3><p>希望自己记忆力好一点。<br>每一天都要崭新的一点。<br>对渴望的事情执着一点。<br>让自己的想法丰富一点。</p>\n<p><strong>就上面那么亿点就够了</strong></p>"},{"title":"使用github actions进行轻服务的页面部署","date":"2021-10-22T02:22:14.000Z","_content":"\n# 使用 github actions 进行[轻服务](https://qingfuwu.cn/)的页面托管\n\n### 首先，轻服务官方文档给出了手动部署页面的教程[页面托管](https://qingfuwu.cn/docs/openapi/sdk/hosting.html#%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E6%89%98%E7%AE%A1%E4%BF%A1%E6%81%AF)。而我这里就简单地介绍一下使用 github actions 的自动部署。只要会一点 github actions,实现起来也比较简单。\n\n[看看效果](https://qcjtoy.web.cloudendpoint.cn/)\n\n### 1.github 创建仓库，配置.github/workflow/\\*.yml,同时设置 secrets 变量 ACCESS_TOKEN 与 SERVICE_ID.\n\n- #### 配置 workflow 的 yml 文件。\n  直接复制里面的 Usage,[Deploy to ByteInspire Hosting](https://github.com/marketplace/actions/deploy-to-byteinspire-hosting)\n\n```yaml\nname: Deploy Hosting\n\non: push\n\njobs:\n  build_and_deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      # Add any build steps here. For example:\n      # - run: npm ci && npm run build\n      - uses: byteinspire/hosting-deployer-action@v1\n        with:\n          service-id: \"${{ secrets.SERVICE_ID }}\"\n          token: \"${{ secrets.ACCESS_TOKEN }}\"\n          # Or you can use file param to directly specify the ziped file path\n          directory: ./\n```\n\n<!-- more -->\n\n- #### 配置 secrets 的变量 ACCESS_TOKEN 与 SERVICE_ID\n\n1. ACCESS_TOKEN\n   官方已经写得很详细了[创建和管理访问凭证](https://qingfuwu.cn/docs/openapi/personaltoken.html#%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E5%87%AD%E8%AF%81)\n   ![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221004.png)\n   ![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221006.png)\n2. SERVICE_ID\n   登录轻服务后[https://qingfuwu.cn/dashboard](https://qingfuwu.cn/dashboard)，在首页就能看见你创建的所有服务。\n   ![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110220950.png)\n   这里就选择 hello world 这个服务，点击进去，再进入到设置里面就可以看见 SERVICE_ID.当然这里你也可以直接点击页面托管，上传压缩文件手动部署。![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110220952.png)\n3. 添加变量到 secrets 里面，这里我已经添加上了。这里要注意的是设置 respository secret，因为最开始设置成 environment secret 而失败几次 😭\n   ![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110220955.png)\n\n### 2. 经过上面的步骤，大致就可以完成了。\n\n#####看看 actions 吧，忽略前几次 environment secret 的锅 😂\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221013.png)\n进入页面托管，点击网站域名，就可以看见部署后的页面了。\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221016.png)\n最终效果：\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221025.png)\n","source":"_posts/actions进行轻服务的页面部署.md","raw":"---\ntitle: 使用github actions进行轻服务的页面部署\ndate: 2021-10-22 10:22:14\ntags: deploy qingfuwu\n---\n\n# 使用 github actions 进行[轻服务](https://qingfuwu.cn/)的页面托管\n\n### 首先，轻服务官方文档给出了手动部署页面的教程[页面托管](https://qingfuwu.cn/docs/openapi/sdk/hosting.html#%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E6%89%98%E7%AE%A1%E4%BF%A1%E6%81%AF)。而我这里就简单地介绍一下使用 github actions 的自动部署。只要会一点 github actions,实现起来也比较简单。\n\n[看看效果](https://qcjtoy.web.cloudendpoint.cn/)\n\n### 1.github 创建仓库，配置.github/workflow/\\*.yml,同时设置 secrets 变量 ACCESS_TOKEN 与 SERVICE_ID.\n\n- #### 配置 workflow 的 yml 文件。\n  直接复制里面的 Usage,[Deploy to ByteInspire Hosting](https://github.com/marketplace/actions/deploy-to-byteinspire-hosting)\n\n```yaml\nname: Deploy Hosting\n\non: push\n\njobs:\n  build_and_deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      # Add any build steps here. For example:\n      # - run: npm ci && npm run build\n      - uses: byteinspire/hosting-deployer-action@v1\n        with:\n          service-id: \"${{ secrets.SERVICE_ID }}\"\n          token: \"${{ secrets.ACCESS_TOKEN }}\"\n          # Or you can use file param to directly specify the ziped file path\n          directory: ./\n```\n\n<!-- more -->\n\n- #### 配置 secrets 的变量 ACCESS_TOKEN 与 SERVICE_ID\n\n1. ACCESS_TOKEN\n   官方已经写得很详细了[创建和管理访问凭证](https://qingfuwu.cn/docs/openapi/personaltoken.html#%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E5%87%AD%E8%AF%81)\n   ![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221004.png)\n   ![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221006.png)\n2. SERVICE_ID\n   登录轻服务后[https://qingfuwu.cn/dashboard](https://qingfuwu.cn/dashboard)，在首页就能看见你创建的所有服务。\n   ![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110220950.png)\n   这里就选择 hello world 这个服务，点击进去，再进入到设置里面就可以看见 SERVICE_ID.当然这里你也可以直接点击页面托管，上传压缩文件手动部署。![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110220952.png)\n3. 添加变量到 secrets 里面，这里我已经添加上了。这里要注意的是设置 respository secret，因为最开始设置成 environment secret 而失败几次 😭\n   ![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110220955.png)\n\n### 2. 经过上面的步骤，大致就可以完成了。\n\n#####看看 actions 吧，忽略前几次 environment secret 的锅 😂\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221013.png)\n进入页面托管，点击网站域名，就可以看见部署后的页面了。\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221016.png)\n最终效果：\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221025.png)\n","slug":"actions进行轻服务的页面部署","published":1,"updated":"2022-04-30T02:34:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3itto7e00039ov7hsyw17j7","content":"<h1 id=\"使用-github-actions-进行轻服务的页面托管\"><a href=\"#使用-github-actions-进行轻服务的页面托管\" class=\"headerlink\" title=\"使用 github actions 进行轻服务的页面托管\"></a>使用 github actions 进行<a href=\"https://qingfuwu.cn/\">轻服务</a>的页面托管</h1><h3 id=\"首先，轻服务官方文档给出了手动部署页面的教程页面托管。而我这里就简单地介绍一下使用-github-actions-的自动部署。只要会一点-github-actions-实现起来也比较简单。\"><a href=\"#首先，轻服务官方文档给出了手动部署页面的教程页面托管。而我这里就简单地介绍一下使用-github-actions-的自动部署。只要会一点-github-actions-实现起来也比较简单。\" class=\"headerlink\" title=\"首先，轻服务官方文档给出了手动部署页面的教程页面托管。而我这里就简单地介绍一下使用 github actions 的自动部署。只要会一点 github actions,实现起来也比较简单。\"></a>首先，轻服务官方文档给出了手动部署页面的教程<a href=\"https://qingfuwu.cn/docs/openapi/sdk/hosting.html#%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E6%89%98%E7%AE%A1%E4%BF%A1%E6%81%AF\">页面托管</a>。而我这里就简单地介绍一下使用 github actions 的自动部署。只要会一点 github actions,实现起来也比较简单。</h3><p><a href=\"https://qcjtoy.web.cloudendpoint.cn/\">看看效果</a></p>\n<h3 id=\"1-github-创建仓库，配置-github-workflow-yml-同时设置-secrets-变量-ACCESS-TOKEN-与-SERVICE-ID\"><a href=\"#1-github-创建仓库，配置-github-workflow-yml-同时设置-secrets-变量-ACCESS-TOKEN-与-SERVICE-ID\" class=\"headerlink\" title=\"1.github 创建仓库，配置.github/workflow/*.yml,同时设置 secrets 变量 ACCESS_TOKEN 与 SERVICE_ID.\"></a>1.github 创建仓库，配置.github/workflow/*.yml,同时设置 secrets 变量 ACCESS_TOKEN 与 SERVICE_ID.</h3><ul>\n<li><h4 id=\"配置-workflow-的-yml-文件。\"><a href=\"#配置-workflow-的-yml-文件。\" class=\"headerlink\" title=\"配置 workflow 的 yml 文件。\"></a>配置 workflow 的 yml 文件。</h4>直接复制里面的 Usage,<a href=\"https://github.com/marketplace/actions/deploy-to-byteinspire-hosting\">Deploy to ByteInspire Hosting</a></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Deploy</span> <span class=\"string\">Hosting</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span> <span class=\"string\">push</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build_and_deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"comment\"># Add any build steps here. For example:</span></span><br><span class=\"line\">      <span class=\"comment\"># - run: npm ci &amp;&amp; npm run build</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">byteinspire/hosting-deployer-action@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">service-id:</span> <span class=\"string\">&quot;$<span class=\"template-variable\">&#123;&#123; secrets.SERVICE_ID &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">token:</span> <span class=\"string\">&quot;$<span class=\"template-variable\">&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">          <span class=\"comment\"># Or you can use file param to directly specify the ziped file path</span></span><br><span class=\"line\">          <span class=\"attr\">directory:</span> <span class=\"string\">./</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<ul>\n<li><h4 id=\"配置-secrets-的变量-ACCESS-TOKEN-与-SERVICE-ID\"><a href=\"#配置-secrets-的变量-ACCESS-TOKEN-与-SERVICE-ID\" class=\"headerlink\" title=\"配置 secrets 的变量 ACCESS_TOKEN 与 SERVICE_ID\"></a>配置 secrets 的变量 ACCESS_TOKEN 与 SERVICE_ID</h4></li>\n</ul>\n<ol>\n<li>ACCESS_TOKEN<br>官方已经写得很详细了<a href=\"https://qingfuwu.cn/docs/openapi/personaltoken.html#%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E5%87%AD%E8%AF%81\">创建和管理访问凭证</a><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221004.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221006.png\"></li>\n<li>SERVICE_ID<br>登录轻服务后<a href=\"https://qingfuwu.cn/dashboard\">https://qingfuwu.cn/dashboard</a>，在首页就能看见你创建的所有服务。<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110220950.png\"><br>这里就选择 hello world 这个服务，点击进去，再进入到设置里面就可以看见 SERVICE_ID.当然这里你也可以直接点击页面托管，上传压缩文件手动部署。<img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110220952.png\"></li>\n<li>添加变量到 secrets 里面，这里我已经添加上了。这里要注意的是设置 respository secret，因为最开始设置成 environment secret 而失败几次 😭<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110220955.png\"></li>\n</ol>\n<h3 id=\"2-经过上面的步骤，大致就可以完成了。\"><a href=\"#2-经过上面的步骤，大致就可以完成了。\" class=\"headerlink\" title=\"2. 经过上面的步骤，大致就可以完成了。\"></a>2. 经过上面的步骤，大致就可以完成了。</h3><p>#####看看 actions 吧，忽略前几次 environment secret 的锅 😂<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221013.png\"><br>进入页面托管，点击网站域名，就可以看见部署后的页面了。<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221016.png\"><br>最终效果：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221025.png\"></p>\n","site":{"data":{"linklist":[{"nickname":"ZCW","avatar":"http://sherry.formeky.xyz:8090/upload/2021/09/QQ%E5%9B%BE%E7%89%8720210629151630-d1748408bc4d4d3b995abaf38440b71d.jpg","site":"http://sherry.formeky.xyz:8090/","descp":"后端工程师"},{"nickname":"LJC","site":"https://lengthmin.me/","descp":"这大概就是大佬吧","avatar":"https://lengthmin.me/images/avatar.png"}]}},"length":1064,"excerpt":"<h1 id=\"使用-github-actions-进行轻服务的页面托管\"><a href=\"#使用-github-actions-进行轻服务的页面托管\" class=\"headerlink\" title=\"使用 github actions 进行轻服务的页面托管\"></a>使用 github actions 进行<a href=\"https://qingfuwu.cn/\">轻服务</a>的页面托管</h1><h3 id=\"首先，轻服务官方文档给出了手动部署页面的教程页面托管。而我这里就简单地介绍一下使用-github-actions-的自动部署。只要会一点-github-actions-实现起来也比较简单。\"><a href=\"#首先，轻服务官方文档给出了手动部署页面的教程页面托管。而我这里就简单地介绍一下使用-github-actions-的自动部署。只要会一点-github-actions-实现起来也比较简单。\" class=\"headerlink\" title=\"首先，轻服务官方文档给出了手动部署页面的教程页面托管。而我这里就简单地介绍一下使用 github actions 的自动部署。只要会一点 github actions,实现起来也比较简单。\"></a>首先，轻服务官方文档给出了手动部署页面的教程<a href=\"https://qingfuwu.cn/docs/openapi/sdk/hosting.html#%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E6%89%98%E7%AE%A1%E4%BF%A1%E6%81%AF\">页面托管</a>。而我这里就简单地介绍一下使用 github actions 的自动部署。只要会一点 github actions,实现起来也比较简单。</h3><p><a href=\"https://qcjtoy.web.cloudendpoint.cn/\">看看效果</a></p>\n<h3 id=\"1-github-创建仓库，配置-github-workflow-yml-同时设置-secrets-变量-ACCESS-TOKEN-与-SERVICE-ID\"><a href=\"#1-github-创建仓库，配置-github-workflow-yml-同时设置-secrets-变量-ACCESS-TOKEN-与-SERVICE-ID\" class=\"headerlink\" title=\"1.github 创建仓库，配置.github/workflow/*.yml,同时设置 secrets 变量 ACCESS_TOKEN 与 SERVICE_ID.\"></a>1.github 创建仓库，配置.github/workflow/*.yml,同时设置 secrets 变量 ACCESS_TOKEN 与 SERVICE_ID.</h3><ul>\n<li><h4 id=\"配置-workflow-的-yml-文件。\"><a href=\"#配置-workflow-的-yml-文件。\" class=\"headerlink\" title=\"配置 workflow 的 yml 文件。\"></a>配置 workflow 的 yml 文件。</h4>直接复制里面的 Usage,<a href=\"https://github.com/marketplace/actions/deploy-to-byteinspire-hosting\">Deploy to ByteInspire Hosting</a></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Deploy</span> <span class=\"string\">Hosting</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span> <span class=\"string\">push</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build_and_deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"comment\"># Add any build steps here. For example:</span></span><br><span class=\"line\">      <span class=\"comment\"># - run: npm ci &amp;&amp; npm run build</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">byteinspire/hosting-deployer-action@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">service-id:</span> <span class=\"string\">&quot;$<span class=\"template-variable\">&#123;&#123; secrets.SERVICE_ID &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">token:</span> <span class=\"string\">&quot;$<span class=\"template-variable\">&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">          <span class=\"comment\"># Or you can use file param to directly specify the ziped file path</span></span><br><span class=\"line\">          <span class=\"attr\">directory:</span> <span class=\"string\">./</span></span><br></pre></td></tr></table></figure>","more":"<ul>\n<li><h4 id=\"配置-secrets-的变量-ACCESS-TOKEN-与-SERVICE-ID\"><a href=\"#配置-secrets-的变量-ACCESS-TOKEN-与-SERVICE-ID\" class=\"headerlink\" title=\"配置 secrets 的变量 ACCESS_TOKEN 与 SERVICE_ID\"></a>配置 secrets 的变量 ACCESS_TOKEN 与 SERVICE_ID</h4></li>\n</ul>\n<ol>\n<li>ACCESS_TOKEN<br>官方已经写得很详细了<a href=\"https://qingfuwu.cn/docs/openapi/personaltoken.html#%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E5%87%AD%E8%AF%81\">创建和管理访问凭证</a><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221004.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221006.png\"></li>\n<li>SERVICE_ID<br>登录轻服务后<a href=\"https://qingfuwu.cn/dashboard\">https://qingfuwu.cn/dashboard</a>，在首页就能看见你创建的所有服务。<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110220950.png\"><br>这里就选择 hello world 这个服务，点击进去，再进入到设置里面就可以看见 SERVICE_ID.当然这里你也可以直接点击页面托管，上传压缩文件手动部署。<img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110220952.png\"></li>\n<li>添加变量到 secrets 里面，这里我已经添加上了。这里要注意的是设置 respository secret，因为最开始设置成 environment secret 而失败几次 😭<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110220955.png\"></li>\n</ol>\n<h3 id=\"2-经过上面的步骤，大致就可以完成了。\"><a href=\"#2-经过上面的步骤，大致就可以完成了。\" class=\"headerlink\" title=\"2. 经过上面的步骤，大致就可以完成了。\"></a>2. 经过上面的步骤，大致就可以完成了。</h3><p>#####看看 actions 吧，忽略前几次 environment secret 的锅 😂<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221013.png\"><br>进入页面托管，点击网站域名，就可以看见部署后的页面了。<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221016.png\"><br>最终效果：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110221025.png\"></p>"},{"title":"react事件系统","date":"2022-05-01T15:06:13.000Z","_content":"\n## 开始注册事件\n\n- 这里只是简单的设置一些变量值，见下面代码\n\n```typescript\n// 注册事件\n// DOMPluginEventSystem.ts\nSimpleEventPlugin.registerEvents();\nEnterLeaveEventPlugin.registerEvents();\nChangeEventPlugin.registerEvents();\nSelectEventPlugin.registerEvents();\nBeforeInputEventPlugin.registerEvents();\n```\n\n```typescript\n\nallNativeEvent:Set<DOMEventName> = {'click','keyup','keydown',...};\n\nregistrationNameDependencies[\"onClick\"] = [\"click\"];\nregistrationNameDependencies['onMouseEnter'] = ['mouseout', 'mouseover']; //...\n\ntopLevelEventsToReactNames:Map<DOMEventName,string|null> = {\"click\":\"onClick\"};\n```\n\n<!-- more -->\n\n## 大致流程\n\n![flowchart](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202205062357.png)\n\n## listenToAllSupportedEvent\n\n- 接下来是让root容器监听所有支持的事件\n\n非委托事件只有捕获阶段。\n而委托事件捕获冒泡都会绑定。\n\n```typescript\nallNativeEvents.forEach(domEventName => {\n  // 我们单独处理selectionchange更改，因为它不会冒泡，需要出现在document上\n  if (domEventName !== 'selectionchange') {\n    if (!nonDelegatedEvents.has(domEventName)) {\n      // 不捕获\n      listenToNativeEvent(domEventName, false, rootContainerElement);\n    }\n    // nonDelegatedEvents事件是是捕获阶段监听器\n    // delegatedEvents是冒泡捕获都有\n    listenToNativeEvent(domEventName, true, rootContainerElement);\n  }\n});\n```\n\n**_注意：_**selectionChange事件是监听在document上的，因为它不会冒泡。\n\n## 绑定react的listener到root || document上\n\nlistenToNativeEvent **-->** addTrappedEventListener **-->** listener = createEventListenerWrapperWithPriority\n\n## createEventListenerWrapperWithPriority\n\n这里进行创建listener,listener有如下几种：\n\n```typescript\nfunction createEventListenerWrapperWithPriority(\n  targetContainer: EventTarget,\n  domEventName: DOMEventName,\n  eventSystemFlags: EventSystemFlags,\n): Function {\n  const eventPriority = getEventPriority(domEventName);\n  let listenerWrapper;\n  switch (eventPriority) {\n    // 一般事件都是DiscreteEventPriority\n    case DiscreteEventPriority:\n      listenerWrapper = dispatchDiscreteEvent;\n      break;\n    case ContinuousEventPriority:\n      listenerWrapper = dispatchContinuousEvent;\n      break;\n    case DefaultEventPriority:\n    default:\n      listenerWrapper = dispatchEvent;\n      break;\n  }\n  return listenerWrapper.bind(\n    null,\n    domEventName,\n    eventSystemFlags,\n    targetContainer,\n  );\n}\n```\n\n这三种listener存在一个优先级的差别。\n最终都会调用dispatchEvent.\n\n## dispatchEvent\n\n- 这是react进行触发事件监听函数的地方，这里的listener是绑定到组件props上的事件处理函数。\n\n首先判断是否是allowReplay事件：\n\n```typescript\n  const allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;\n  // eventSystemFlags capture时等于4,bubble时等于0\n  // capture & 4 = 4; bubble & 4 = 0\n  // IS_CAPTURE_PHASE = 4\n```\n\n然后是先去尝试调度事件,判定是否会blockOn：\n\n```typescript\n  const blockedOn = attemptToDispatchEvent(\n    domEventName,\n    eventSystemFlags,\n    targetContainer,\n    nativeEvent,\n  );\n```\n\n## attemptToDispatchEvent\n\n1. 先是获取真正的事件触发元素：e.targe，这里称为nativeEventTarget\n2. 获取nativeEventTarget上的Fiber,即\"__reactFiber${Random...}\"属性。这里是targetInst.\n3. 处理让targetInst为null的情况。\n    1. 节点被unmounted,即不能通过return属性到达根节点。\n    2. 如果最近的mounted是SuspenseCompnent | HostRoot | 最近的mountedFiber  !== targetInst\n\n接下来进入真正的事件调度函数。\n\n## dispatchEventForPluginEventSystem\n\n- 在这里面，会有一个mainLoop,去寻找一个root节点，因为在root节点上，会绑定一些事件。\n- 遍历的方式是从当前节点一直往上（return）.\n- 最后batchedEventUpdates ---> dispatchEventsForPlugins\n\n```typescript\n// DOMPluginEventSystem\nfunction dispatchEventForPluginEventSystem(\n  domEventName: DOMEventName,\n  eventSystemFlags: EventSystemFlags,\n  nativeEvent: AnyNativeEvent,\n  targetInst: null | Fiber, // 触发事件的Fiber\n  targetContainer: EventTarget, // root\n): void {\n  let ancestorInst = targetInst;\n  if (\n    (eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 &&\n    (eventSystemFlags & IS_NON_DELEGATED) === 0\n  ) {\n    const targetContainerNode = targetContainer as Node;\n\n    if (targetInst !== null) {\n\n      let node = targetInst;\n      mainLoop: while (true) {\n        // ...搜索root container\n      }\n    }\n  }\n\n  batchedEventUpdates(() =>\n  // 进入合成事件系统\n    dispatchEventsForPlugins(\n      domEventName,\n      eventSystemFlags,\n      nativeEvent,\n      ancestorInst,\n      targetContainer,\n    ),\n  );\n}\n```\n\n## dispatchEventsForPlugins\n\n- 将nativeEvent转换成synthesizeEvent,并加入dispatchQueue，最终processDispatchQueue。\n\n_extractEvents:_\n\n  > 创建DispatchEntry:{event:listeners}，并添加到dispatchQueue\n\n  1. 工厂模式确定SyntheticEventCtor\n  2. accumulateSinglePhaseListeners从target到root遍历，获取绑定到props的事件处理函数，添加用户自己添加的事件处理函数到listeners数组里并返回。\n  3. dispatchQueue.push({event,listeners})\n  这里event也就是synthesizeEvent对象，即在事件绑定后的回调函数的默认参数event.\n\n_processDispatchQueue:_\n\n> 遍历dispatchQueue,处理每个事件的listeners数组\n\n```typescript\n/**\n * 调用processDispatchQueueItemsInOrder，执行事件处理函数\n * @param {Array<{\n * event: ReactSyntheticEvent,\n * listeners: Array<{\n * instance: null | Fiber,\n * listener: Function,\n * currentTarget: EventTarget,\n * }>}} dispatchQueue\n * @param {EventSystemFlags} eventSystemFlags\n */\nexport function processDispatchQueue(\n  dispatchQueue: DispatchQueue,\n  eventSystemFlags: EventSystemFlags,\n): void {\n  const inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\n  for (let i = 0; i < dispatchQueue.length; i++) {\n    // { event: ReactSyntheticEvent,listeners: Array < DispatchListener >};\n    const { event, listeners } = dispatchQueue[i];\n\n    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);\n    //  event system doesn't use pooling.\n    // 事件系统不使用池。\n  }\n  // This would be a good time to rethrow if any of the event handlers threw.\n  rethrowCaughtError();\n}\n```\n\n- processDispatchQueueItemsInOrder\n\n> 根据inCapturePhase判定是capture还是bubble,\n\n```typescript\n    /**\n * 执行事件队列，根据是否捕获确定事件的执行顺序\n * []dispatchListeners\n * 捕获：重最后一个到第一个\n * 冒泡：重0到最后一个\n * @param {ReactSyntheticEvent} event\n * @param {Array<DispatchListener>} dispatchListeners\n * @param {boolean} inCapturePhase\n * @returns\n */\nfunction processDispatchQueueItemsInOrder(\n  event: ReactSyntheticEvent,\n  dispatchListeners: Array<DispatchListener>,\n  inCapturePhase: boolean,\n): void {\n  let previousInstance;\n  // 捕获\n  // 因为添加dispatcher时是从当前然后return到null,所以捕获是倒过来的运行\n  if (inCapturePhase) {\n    for (let i = dispatchListeners.length - 1; i >= 0; i--) {\n      // { instance: null | Fiber,listener: Function,currentTarget: EventTarget};\n      const { instance, currentTarget, listener } = dispatchListeners[i];\n\n      // 阻止冒泡stopPropagation\n      if (instance !== previousInstance && event.isPropagationStopped()) {\n        return;\n      }\n      executeDispatch(event, listener, currentTarget);\n      previousInstance = instance;\n    }\n  } else {\n    for (let i = 0; i < dispatchListeners.length; i++) {\n      const { instance, currentTarget, listener } = dispatchListeners[i];\n      if (instance !== previousInstance && event.isPropagationStopped()) {\n        return;\n      }\n      executeDispatch(event, listener, currentTarget);\n      previousInstance = instance;\n    }\n  }\n}\n```\n\n## executeDispatch\n\n- 最终调用用户的处理函数,其中包含一些react的invoke函数，以及一些在开发环境下的createEvent事件。\n\n> 本文还有许多细节没有提到，只是大致说明了事件系统的一个流程\n\n## 未完待续\n","source":"_posts/react合成事件.md","raw":"---\ntitle: react事件系统\ndate: 2022-05-01 23:06:13\ntags:\ncategories: react\n---\n\n## 开始注册事件\n\n- 这里只是简单的设置一些变量值，见下面代码\n\n```typescript\n// 注册事件\n// DOMPluginEventSystem.ts\nSimpleEventPlugin.registerEvents();\nEnterLeaveEventPlugin.registerEvents();\nChangeEventPlugin.registerEvents();\nSelectEventPlugin.registerEvents();\nBeforeInputEventPlugin.registerEvents();\n```\n\n```typescript\n\nallNativeEvent:Set<DOMEventName> = {'click','keyup','keydown',...};\n\nregistrationNameDependencies[\"onClick\"] = [\"click\"];\nregistrationNameDependencies['onMouseEnter'] = ['mouseout', 'mouseover']; //...\n\ntopLevelEventsToReactNames:Map<DOMEventName,string|null> = {\"click\":\"onClick\"};\n```\n\n<!-- more -->\n\n## 大致流程\n\n![flowchart](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202205062357.png)\n\n## listenToAllSupportedEvent\n\n- 接下来是让root容器监听所有支持的事件\n\n非委托事件只有捕获阶段。\n而委托事件捕获冒泡都会绑定。\n\n```typescript\nallNativeEvents.forEach(domEventName => {\n  // 我们单独处理selectionchange更改，因为它不会冒泡，需要出现在document上\n  if (domEventName !== 'selectionchange') {\n    if (!nonDelegatedEvents.has(domEventName)) {\n      // 不捕获\n      listenToNativeEvent(domEventName, false, rootContainerElement);\n    }\n    // nonDelegatedEvents事件是是捕获阶段监听器\n    // delegatedEvents是冒泡捕获都有\n    listenToNativeEvent(domEventName, true, rootContainerElement);\n  }\n});\n```\n\n**_注意：_**selectionChange事件是监听在document上的，因为它不会冒泡。\n\n## 绑定react的listener到root || document上\n\nlistenToNativeEvent **-->** addTrappedEventListener **-->** listener = createEventListenerWrapperWithPriority\n\n## createEventListenerWrapperWithPriority\n\n这里进行创建listener,listener有如下几种：\n\n```typescript\nfunction createEventListenerWrapperWithPriority(\n  targetContainer: EventTarget,\n  domEventName: DOMEventName,\n  eventSystemFlags: EventSystemFlags,\n): Function {\n  const eventPriority = getEventPriority(domEventName);\n  let listenerWrapper;\n  switch (eventPriority) {\n    // 一般事件都是DiscreteEventPriority\n    case DiscreteEventPriority:\n      listenerWrapper = dispatchDiscreteEvent;\n      break;\n    case ContinuousEventPriority:\n      listenerWrapper = dispatchContinuousEvent;\n      break;\n    case DefaultEventPriority:\n    default:\n      listenerWrapper = dispatchEvent;\n      break;\n  }\n  return listenerWrapper.bind(\n    null,\n    domEventName,\n    eventSystemFlags,\n    targetContainer,\n  );\n}\n```\n\n这三种listener存在一个优先级的差别。\n最终都会调用dispatchEvent.\n\n## dispatchEvent\n\n- 这是react进行触发事件监听函数的地方，这里的listener是绑定到组件props上的事件处理函数。\n\n首先判断是否是allowReplay事件：\n\n```typescript\n  const allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;\n  // eventSystemFlags capture时等于4,bubble时等于0\n  // capture & 4 = 4; bubble & 4 = 0\n  // IS_CAPTURE_PHASE = 4\n```\n\n然后是先去尝试调度事件,判定是否会blockOn：\n\n```typescript\n  const blockedOn = attemptToDispatchEvent(\n    domEventName,\n    eventSystemFlags,\n    targetContainer,\n    nativeEvent,\n  );\n```\n\n## attemptToDispatchEvent\n\n1. 先是获取真正的事件触发元素：e.targe，这里称为nativeEventTarget\n2. 获取nativeEventTarget上的Fiber,即\"__reactFiber${Random...}\"属性。这里是targetInst.\n3. 处理让targetInst为null的情况。\n    1. 节点被unmounted,即不能通过return属性到达根节点。\n    2. 如果最近的mounted是SuspenseCompnent | HostRoot | 最近的mountedFiber  !== targetInst\n\n接下来进入真正的事件调度函数。\n\n## dispatchEventForPluginEventSystem\n\n- 在这里面，会有一个mainLoop,去寻找一个root节点，因为在root节点上，会绑定一些事件。\n- 遍历的方式是从当前节点一直往上（return）.\n- 最后batchedEventUpdates ---> dispatchEventsForPlugins\n\n```typescript\n// DOMPluginEventSystem\nfunction dispatchEventForPluginEventSystem(\n  domEventName: DOMEventName,\n  eventSystemFlags: EventSystemFlags,\n  nativeEvent: AnyNativeEvent,\n  targetInst: null | Fiber, // 触发事件的Fiber\n  targetContainer: EventTarget, // root\n): void {\n  let ancestorInst = targetInst;\n  if (\n    (eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 &&\n    (eventSystemFlags & IS_NON_DELEGATED) === 0\n  ) {\n    const targetContainerNode = targetContainer as Node;\n\n    if (targetInst !== null) {\n\n      let node = targetInst;\n      mainLoop: while (true) {\n        // ...搜索root container\n      }\n    }\n  }\n\n  batchedEventUpdates(() =>\n  // 进入合成事件系统\n    dispatchEventsForPlugins(\n      domEventName,\n      eventSystemFlags,\n      nativeEvent,\n      ancestorInst,\n      targetContainer,\n    ),\n  );\n}\n```\n\n## dispatchEventsForPlugins\n\n- 将nativeEvent转换成synthesizeEvent,并加入dispatchQueue，最终processDispatchQueue。\n\n_extractEvents:_\n\n  > 创建DispatchEntry:{event:listeners}，并添加到dispatchQueue\n\n  1. 工厂模式确定SyntheticEventCtor\n  2. accumulateSinglePhaseListeners从target到root遍历，获取绑定到props的事件处理函数，添加用户自己添加的事件处理函数到listeners数组里并返回。\n  3. dispatchQueue.push({event,listeners})\n  这里event也就是synthesizeEvent对象，即在事件绑定后的回调函数的默认参数event.\n\n_processDispatchQueue:_\n\n> 遍历dispatchQueue,处理每个事件的listeners数组\n\n```typescript\n/**\n * 调用processDispatchQueueItemsInOrder，执行事件处理函数\n * @param {Array<{\n * event: ReactSyntheticEvent,\n * listeners: Array<{\n * instance: null | Fiber,\n * listener: Function,\n * currentTarget: EventTarget,\n * }>}} dispatchQueue\n * @param {EventSystemFlags} eventSystemFlags\n */\nexport function processDispatchQueue(\n  dispatchQueue: DispatchQueue,\n  eventSystemFlags: EventSystemFlags,\n): void {\n  const inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\n  for (let i = 0; i < dispatchQueue.length; i++) {\n    // { event: ReactSyntheticEvent,listeners: Array < DispatchListener >};\n    const { event, listeners } = dispatchQueue[i];\n\n    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);\n    //  event system doesn't use pooling.\n    // 事件系统不使用池。\n  }\n  // This would be a good time to rethrow if any of the event handlers threw.\n  rethrowCaughtError();\n}\n```\n\n- processDispatchQueueItemsInOrder\n\n> 根据inCapturePhase判定是capture还是bubble,\n\n```typescript\n    /**\n * 执行事件队列，根据是否捕获确定事件的执行顺序\n * []dispatchListeners\n * 捕获：重最后一个到第一个\n * 冒泡：重0到最后一个\n * @param {ReactSyntheticEvent} event\n * @param {Array<DispatchListener>} dispatchListeners\n * @param {boolean} inCapturePhase\n * @returns\n */\nfunction processDispatchQueueItemsInOrder(\n  event: ReactSyntheticEvent,\n  dispatchListeners: Array<DispatchListener>,\n  inCapturePhase: boolean,\n): void {\n  let previousInstance;\n  // 捕获\n  // 因为添加dispatcher时是从当前然后return到null,所以捕获是倒过来的运行\n  if (inCapturePhase) {\n    for (let i = dispatchListeners.length - 1; i >= 0; i--) {\n      // { instance: null | Fiber,listener: Function,currentTarget: EventTarget};\n      const { instance, currentTarget, listener } = dispatchListeners[i];\n\n      // 阻止冒泡stopPropagation\n      if (instance !== previousInstance && event.isPropagationStopped()) {\n        return;\n      }\n      executeDispatch(event, listener, currentTarget);\n      previousInstance = instance;\n    }\n  } else {\n    for (let i = 0; i < dispatchListeners.length; i++) {\n      const { instance, currentTarget, listener } = dispatchListeners[i];\n      if (instance !== previousInstance && event.isPropagationStopped()) {\n        return;\n      }\n      executeDispatch(event, listener, currentTarget);\n      previousInstance = instance;\n    }\n  }\n}\n```\n\n## executeDispatch\n\n- 最终调用用户的处理函数,其中包含一些react的invoke函数，以及一些在开发环境下的createEvent事件。\n\n> 本文还有许多细节没有提到，只是大致说明了事件系统的一个流程\n\n## 未完待续\n","slug":"react合成事件","published":1,"updated":"2022-05-06T16:11:41.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3itto7j00069ov79wd2fx34","content":"<h2 id=\"开始注册事件\"><a href=\"#开始注册事件\" class=\"headerlink\" title=\"开始注册事件\"></a>开始注册事件</h2><ul>\n<li>这里只是简单的设置一些变量值，见下面代码</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册事件</span></span><br><span class=\"line\"><span class=\"comment\">// DOMPluginEventSystem.ts</span></span><br><span class=\"line\">SimpleEventPlugin.registerEvents();</span><br><span class=\"line\">EnterLeaveEventPlugin.registerEvents();</span><br><span class=\"line\">ChangeEventPlugin.registerEvents();</span><br><span class=\"line\">SelectEventPlugin.registerEvents();</span><br><span class=\"line\">BeforeInputEventPlugin.registerEvents();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">allNativeEvent</span>:<span class=\"built_in\">Set</span>&lt;DOMEventName&gt; = &#123;<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"string\">&#x27;keyup&#x27;</span>,<span class=\"string\">&#x27;keydown&#x27;</span>,...&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">registrationNameDependencies[<span class=\"string\">&quot;onClick&quot;</span>] = [<span class=\"string\">&quot;click&quot;</span>];</span><br><span class=\"line\">registrationNameDependencies[<span class=\"string\">&#x27;onMouseEnter&#x27;</span>] = [<span class=\"string\">&#x27;mouseout&#x27;</span>, <span class=\"string\">&#x27;mouseover&#x27;</span>]; <span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">topLevelEventsToReactNames:<span class=\"built_in\">Map</span>&lt;DOMEventName,<span class=\"built_in\">string</span>|<span class=\"literal\">null</span>&gt; = &#123;<span class=\"string\">&quot;click&quot;</span>:<span class=\"string\">&quot;onClick&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"大致流程\"><a href=\"#大致流程\" class=\"headerlink\" title=\"大致流程\"></a>大致流程</h2><p><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202205062357.png\" alt=\"flowchart\"></p>\n<h2 id=\"listenToAllSupportedEvent\"><a href=\"#listenToAllSupportedEvent\" class=\"headerlink\" title=\"listenToAllSupportedEvent\"></a>listenToAllSupportedEvent</h2><ul>\n<li>接下来是让root容器监听所有支持的事件</li>\n</ul>\n<p>非委托事件只有捕获阶段。<br>而委托事件捕获冒泡都会绑定。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allNativeEvents.forEach(<span class=\"function\"><span class=\"params\">domEventName</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 我们单独处理selectionchange更改，因为它不会冒泡，需要出现在document上</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (domEventName !== <span class=\"string\">&#x27;selectionchange&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nonDelegatedEvents.has(domEventName)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不捕获</span></span><br><span class=\"line\">      listenToNativeEvent(domEventName, <span class=\"literal\">false</span>, rootContainerElement);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// nonDelegatedEvents事件是是捕获阶段监听器</span></span><br><span class=\"line\">    <span class=\"comment\">// delegatedEvents是冒泡捕获都有</span></span><br><span class=\"line\">    listenToNativeEvent(domEventName, <span class=\"literal\">true</span>, rootContainerElement);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>**<em>注意：</em>**selectionChange事件是监听在document上的，因为它不会冒泡。</p>\n<h2 id=\"绑定react的listener到root-document上\"><a href=\"#绑定react的listener到root-document上\" class=\"headerlink\" title=\"绑定react的listener到root || document上\"></a>绑定react的listener到root || document上</h2><p>listenToNativeEvent <strong>–&gt;</strong> addTrappedEventListener <strong>–&gt;</strong> listener = createEventListenerWrapperWithPriority</p>\n<h2 id=\"createEventListenerWrapperWithPriority\"><a href=\"#createEventListenerWrapperWithPriority\" class=\"headerlink\" title=\"createEventListenerWrapperWithPriority\"></a>createEventListenerWrapperWithPriority</h2><p>这里进行创建listener,listener有如下几种：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createEventListenerWrapperWithPriority</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  targetContainer: EventTarget,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  domEventName: DOMEventName,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  eventSystemFlags: EventSystemFlags,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>): <span class=\"title\">Function</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> eventPriority = getEventPriority(domEventName);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> listenerWrapper;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (eventPriority) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一般事件都是DiscreteEventPriority</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> DiscreteEventPriority:</span><br><span class=\"line\">      listenerWrapper = dispatchDiscreteEvent;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ContinuousEventPriority:</span><br><span class=\"line\">      listenerWrapper = dispatchContinuousEvent;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DefaultEventPriority:</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      listenerWrapper = dispatchEvent;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> listenerWrapper.bind(</span><br><span class=\"line\">    <span class=\"literal\">null</span>,</span><br><span class=\"line\">    domEventName,</span><br><span class=\"line\">    eventSystemFlags,</span><br><span class=\"line\">    targetContainer,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这三种listener存在一个优先级的差别。<br>最终都会调用dispatchEvent.</p>\n<h2 id=\"dispatchEvent\"><a href=\"#dispatchEvent\" class=\"headerlink\" title=\"dispatchEvent\"></a>dispatchEvent</h2><ul>\n<li>这是react进行触发事件监听函数的地方，这里的listener是绑定到组件props上的事件处理函数。</li>\n</ul>\n<p>首先判断是否是allowReplay事件：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allowReplay = (eventSystemFlags &amp; IS_CAPTURE_PHASE) === <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">// eventSystemFlags capture时等于4,bubble时等于0</span></span><br><span class=\"line\"><span class=\"comment\">// capture &amp; 4 = 4; bubble &amp; 4 = 0</span></span><br><span class=\"line\"><span class=\"comment\">// IS_CAPTURE_PHASE = 4</span></span><br></pre></td></tr></table></figure>\n\n<p>然后是先去尝试调度事件,判定是否会blockOn：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> blockedOn = attemptToDispatchEvent(</span><br><span class=\"line\">  domEventName,</span><br><span class=\"line\">  eventSystemFlags,</span><br><span class=\"line\">  targetContainer,</span><br><span class=\"line\">  nativeEvent,</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"attemptToDispatchEvent\"><a href=\"#attemptToDispatchEvent\" class=\"headerlink\" title=\"attemptToDispatchEvent\"></a>attemptToDispatchEvent</h2><ol>\n<li>先是获取真正的事件触发元素：e.targe，这里称为nativeEventTarget</li>\n<li>获取nativeEventTarget上的Fiber,即”__reactFiber${Random…}”属性。这里是targetInst.</li>\n<li>处理让targetInst为null的情况。<ol>\n<li>节点被unmounted,即不能通过return属性到达根节点。</li>\n<li>如果最近的mounted是SuspenseCompnent | HostRoot | 最近的mountedFiber  !== targetInst</li>\n</ol>\n</li>\n</ol>\n<p>接下来进入真正的事件调度函数。</p>\n<h2 id=\"dispatchEventForPluginEventSystem\"><a href=\"#dispatchEventForPluginEventSystem\" class=\"headerlink\" title=\"dispatchEventForPluginEventSystem\"></a>dispatchEventForPluginEventSystem</h2><ul>\n<li>在这里面，会有一个mainLoop,去寻找一个root节点，因为在root节点上，会绑定一些事件。</li>\n<li>遍历的方式是从当前节点一直往上（return）.</li>\n<li>最后batchedEventUpdates —&gt; dispatchEventsForPlugins</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DOMPluginEventSystem</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchEventForPluginEventSystem</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  domEventName: DOMEventName,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  eventSystemFlags: EventSystemFlags,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  nativeEvent: AnyNativeEvent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  targetInst: <span class=\"literal\">null</span> | Fiber, <span class=\"comment\">// 触发事件的Fiber</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  targetContainer: EventTarget, <span class=\"comment\">// root</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ancestorInst = targetInst;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    (eventSystemFlags &amp; IS_EVENT_HANDLE_NON_MANAGED_NODE) === <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">    (eventSystemFlags &amp; IS_NON_DELEGATED) === <span class=\"number\">0</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> targetContainerNode = targetContainer <span class=\"keyword\">as</span> Node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (targetInst !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> node = targetInst;</span><br><span class=\"line\">      mainLoop: <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...搜索root container</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  batchedEventUpdates(<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">// 进入合成事件系统</span></span><br><span class=\"line\">    dispatchEventsForPlugins(</span><br><span class=\"line\">      domEventName,</span><br><span class=\"line\">      eventSystemFlags,</span><br><span class=\"line\">      nativeEvent,</span><br><span class=\"line\">      ancestorInst,</span><br><span class=\"line\">      targetContainer,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"dispatchEventsForPlugins\"><a href=\"#dispatchEventsForPlugins\" class=\"headerlink\" title=\"dispatchEventsForPlugins\"></a>dispatchEventsForPlugins</h2><ul>\n<li>将nativeEvent转换成synthesizeEvent,并加入dispatchQueue，最终processDispatchQueue。</li>\n</ul>\n<p><em>extractEvents:</em></p>\n<blockquote>\n<p>创建DispatchEntry:{event:listeners}，并添加到dispatchQueue</p>\n</blockquote>\n<ol>\n<li>工厂模式确定SyntheticEventCtor</li>\n<li>accumulateSinglePhaseListeners从target到root遍历，获取绑定到props的事件处理函数，添加用户自己添加的事件处理函数到listeners数组里并返回。</li>\n<li>dispatchQueue.push({event,listeners})<br>这里event也就是synthesizeEvent对象，即在事件绑定后的回调函数的默认参数event.</li>\n</ol>\n<p><em>processDispatchQueue:</em></p>\n<blockquote>\n<p>遍历dispatchQueue,处理每个事件的listeners数组</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 调用processDispatchQueueItemsInOrder，执行事件处理函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Array&lt;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"doctag\"><span class=\"comment\"> * event: ReactSyntheticEvent,</span></span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"doctag\"><span class=\"comment\"> * listeners: Array&lt;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"doctag\"><span class=\"comment\"> * instance: null | Fiber,</span></span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"doctag\"><span class=\"comment\"> * listener: Function,</span></span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"doctag\"><span class=\"comment\"> * currentTarget: EventTarget,</span></span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"doctag\"><span class=\"comment\"> * &#125;</span></span>&gt;&#125;&#125; dispatchQueue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;EventSystemFlags&#125;</span> <span class=\"variable\">eventSystemFlags</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processDispatchQueue</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  dispatchQueue: DispatchQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  eventSystemFlags: EventSystemFlags,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inCapturePhase = (eventSystemFlags &amp; IS_CAPTURE_PHASE) !== <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; dispatchQueue.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &#123; event: ReactSyntheticEvent,listeners: Array &lt; DispatchListener &gt;&#125;;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; event, listeners &#125; = dispatchQueue[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);</span><br><span class=\"line\">    <span class=\"comment\">//  event system doesn&#x27;t use pooling.</span></span><br><span class=\"line\">    <span class=\"comment\">// 事件系统不使用池。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// This would be a good time to rethrow if any of the event handlers threw.</span></span><br><span class=\"line\">  rethrowCaughtError();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>processDispatchQueueItemsInOrder</li>\n</ul>\n<blockquote>\n<p>根据inCapturePhase判定是capture还是bubble,</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 执行事件队列，根据是否捕获确定事件的执行顺序</span></span><br><span class=\"line\"><span class=\"comment\"> * []dispatchListeners</span></span><br><span class=\"line\"><span class=\"comment\"> * 捕获：重最后一个到第一个</span></span><br><span class=\"line\"><span class=\"comment\"> * 冒泡：重0到最后一个</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ReactSyntheticEvent&#125;</span> <span class=\"variable\">event</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Array&lt;DispatchListener&gt;&#125;</span> <span class=\"variable\">dispatchListeners</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;boolean&#125;</span> <span class=\"variable\">inCapturePhase</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processDispatchQueueItemsInOrder</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  event: ReactSyntheticEvent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  dispatchListeners: <span class=\"built_in\">Array</span>&lt;DispatchListener&gt;,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  inCapturePhase: <span class=\"built_in\">boolean</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> previousInstance;</span><br><span class=\"line\">  <span class=\"comment\">// 捕获</span></span><br><span class=\"line\">  <span class=\"comment\">// 因为添加dispatcher时是从当前然后return到null,所以捕获是倒过来的运行</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (inCapturePhase) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = dispatchListeners.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// &#123; instance: null | Fiber,listener: Function,currentTarget: EventTarget&#125;;</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; instance, currentTarget, listener &#125; = dispatchListeners[i];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 阻止冒泡stopPropagation</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (instance !== previousInstance &amp;&amp; event.isPropagationStopped()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      executeDispatch(event, listener, currentTarget);</span><br><span class=\"line\">      previousInstance = instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; dispatchListeners.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; instance, currentTarget, listener &#125; = dispatchListeners[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (instance !== previousInstance &amp;&amp; event.isPropagationStopped()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      executeDispatch(event, listener, currentTarget);</span><br><span class=\"line\">      previousInstance = instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"executeDispatch\"><a href=\"#executeDispatch\" class=\"headerlink\" title=\"executeDispatch\"></a>executeDispatch</h2><ul>\n<li>最终调用用户的处理函数,其中包含一些react的invoke函数，以及一些在开发环境下的createEvent事件。</li>\n</ul>\n<blockquote>\n<p>本文还有许多细节没有提到，只是大致说明了事件系统的一个流程</p>\n</blockquote>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2>","site":{"data":{"linklist":[{"nickname":"ZCW","avatar":"http://sherry.formeky.xyz:8090/upload/2021/09/QQ%E5%9B%BE%E7%89%8720210629151630-d1748408bc4d4d3b995abaf38440b71d.jpg","site":"http://sherry.formeky.xyz:8090/","descp":"后端工程师"},{"nickname":"LJC","site":"https://lengthmin.me/","descp":"这大概就是大佬吧","avatar":"https://lengthmin.me/images/avatar.png"}]}},"length":6320,"excerpt":"<h2 id=\"开始注册事件\"><a href=\"#开始注册事件\" class=\"headerlink\" title=\"开始注册事件\"></a>开始注册事件</h2><ul>\n<li>这里只是简单的设置一些变量值，见下面代码</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册事件</span></span><br><span class=\"line\"><span class=\"comment\">// DOMPluginEventSystem.ts</span></span><br><span class=\"line\">SimpleEventPlugin.registerEvents();</span><br><span class=\"line\">EnterLeaveEventPlugin.registerEvents();</span><br><span class=\"line\">ChangeEventPlugin.registerEvents();</span><br><span class=\"line\">SelectEventPlugin.registerEvents();</span><br><span class=\"line\">BeforeInputEventPlugin.registerEvents();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">allNativeEvent</span>:<span class=\"built_in\">Set</span>&lt;DOMEventName&gt; = &#123;<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"string\">&#x27;keyup&#x27;</span>,<span class=\"string\">&#x27;keydown&#x27;</span>,...&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">registrationNameDependencies[<span class=\"string\">&quot;onClick&quot;</span>] = [<span class=\"string\">&quot;click&quot;</span>];</span><br><span class=\"line\">registrationNameDependencies[<span class=\"string\">&#x27;onMouseEnter&#x27;</span>] = [<span class=\"string\">&#x27;mouseout&#x27;</span>, <span class=\"string\">&#x27;mouseover&#x27;</span>]; <span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">topLevelEventsToReactNames:<span class=\"built_in\">Map</span>&lt;DOMEventName,<span class=\"built_in\">string</span>|<span class=\"literal\">null</span>&gt; = &#123;<span class=\"string\">&quot;click&quot;</span>:<span class=\"string\">&quot;onClick&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"大致流程\"><a href=\"#大致流程\" class=\"headerlink\" title=\"大致流程\"></a>大致流程</h2><p><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202205062357.png\" alt=\"flowchart\"></p>\n<h2 id=\"listenToAllSupportedEvent\"><a href=\"#listenToAllSupportedEvent\" class=\"headerlink\" title=\"listenToAllSupportedEvent\"></a>listenToAllSupportedEvent</h2><ul>\n<li>接下来是让root容器监听所有支持的事件</li>\n</ul>\n<p>非委托事件只有捕获阶段。<br>而委托事件捕获冒泡都会绑定。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allNativeEvents.forEach(<span class=\"function\"><span class=\"params\">domEventName</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 我们单独处理selectionchange更改，因为它不会冒泡，需要出现在document上</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (domEventName !== <span class=\"string\">&#x27;selectionchange&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nonDelegatedEvents.has(domEventName)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不捕获</span></span><br><span class=\"line\">      listenToNativeEvent(domEventName, <span class=\"literal\">false</span>, rootContainerElement);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// nonDelegatedEvents事件是是捕获阶段监听器</span></span><br><span class=\"line\">    <span class=\"comment\">// delegatedEvents是冒泡捕获都有</span></span><br><span class=\"line\">    listenToNativeEvent(domEventName, <span class=\"literal\">true</span>, rootContainerElement);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>**<em>注意：</em>**selectionChange事件是监听在document上的，因为它不会冒泡。</p>\n<h2 id=\"绑定react的listener到root-document上\"><a href=\"#绑定react的listener到root-document上\" class=\"headerlink\" title=\"绑定react的listener到root || document上\"></a>绑定react的listener到root || document上</h2><p>listenToNativeEvent <strong>–&gt;</strong> addTrappedEventListener <strong>–&gt;</strong> listener = createEventListenerWrapperWithPriority</p>\n<h2 id=\"createEventListenerWrapperWithPriority\"><a href=\"#createEventListenerWrapperWithPriority\" class=\"headerlink\" title=\"createEventListenerWrapperWithPriority\"></a>createEventListenerWrapperWithPriority</h2><p>这里进行创建listener,listener有如下几种：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createEventListenerWrapperWithPriority</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  targetContainer: EventTarget,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  domEventName: DOMEventName,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  eventSystemFlags: EventSystemFlags,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>): <span class=\"title\">Function</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> eventPriority = getEventPriority(domEventName);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> listenerWrapper;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (eventPriority) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一般事件都是DiscreteEventPriority</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> DiscreteEventPriority:</span><br><span class=\"line\">      listenerWrapper = dispatchDiscreteEvent;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ContinuousEventPriority:</span><br><span class=\"line\">      listenerWrapper = dispatchContinuousEvent;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DefaultEventPriority:</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      listenerWrapper = dispatchEvent;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> listenerWrapper.bind(</span><br><span class=\"line\">    <span class=\"literal\">null</span>,</span><br><span class=\"line\">    domEventName,</span><br><span class=\"line\">    eventSystemFlags,</span><br><span class=\"line\">    targetContainer,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这三种listener存在一个优先级的差别。<br>最终都会调用dispatchEvent.</p>\n<h2 id=\"dispatchEvent\"><a href=\"#dispatchEvent\" class=\"headerlink\" title=\"dispatchEvent\"></a>dispatchEvent</h2><ul>\n<li>这是react进行触发事件监听函数的地方，这里的listener是绑定到组件props上的事件处理函数。</li>\n</ul>\n<p>首先判断是否是allowReplay事件：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allowReplay = (eventSystemFlags &amp; IS_CAPTURE_PHASE) === <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">// eventSystemFlags capture时等于4,bubble时等于0</span></span><br><span class=\"line\"><span class=\"comment\">// capture &amp; 4 = 4; bubble &amp; 4 = 0</span></span><br><span class=\"line\"><span class=\"comment\">// IS_CAPTURE_PHASE = 4</span></span><br></pre></td></tr></table></figure>\n\n<p>然后是先去尝试调度事件,判定是否会blockOn：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> blockedOn = attemptToDispatchEvent(</span><br><span class=\"line\">  domEventName,</span><br><span class=\"line\">  eventSystemFlags,</span><br><span class=\"line\">  targetContainer,</span><br><span class=\"line\">  nativeEvent,</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"attemptToDispatchEvent\"><a href=\"#attemptToDispatchEvent\" class=\"headerlink\" title=\"attemptToDispatchEvent\"></a>attemptToDispatchEvent</h2><ol>\n<li>先是获取真正的事件触发元素：e.targe，这里称为nativeEventTarget</li>\n<li>获取nativeEventTarget上的Fiber,即”__reactFiber${Random…}”属性。这里是targetInst.</li>\n<li>处理让targetInst为null的情况。<ol>\n<li>节点被unmounted,即不能通过return属性到达根节点。</li>\n<li>如果最近的mounted是SuspenseCompnent | HostRoot | 最近的mountedFiber  !== targetInst</li>\n</ol>\n</li>\n</ol>\n<p>接下来进入真正的事件调度函数。</p>\n<h2 id=\"dispatchEventForPluginEventSystem\"><a href=\"#dispatchEventForPluginEventSystem\" class=\"headerlink\" title=\"dispatchEventForPluginEventSystem\"></a>dispatchEventForPluginEventSystem</h2><ul>\n<li>在这里面，会有一个mainLoop,去寻找一个root节点，因为在root节点上，会绑定一些事件。</li>\n<li>遍历的方式是从当前节点一直往上（return）.</li>\n<li>最后batchedEventUpdates —&gt; dispatchEventsForPlugins</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DOMPluginEventSystem</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchEventForPluginEventSystem</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  domEventName: DOMEventName,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  eventSystemFlags: EventSystemFlags,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  nativeEvent: AnyNativeEvent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  targetInst: <span class=\"literal\">null</span> | Fiber, <span class=\"comment\">// 触发事件的Fiber</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  targetContainer: EventTarget, <span class=\"comment\">// root</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ancestorInst = targetInst;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    (eventSystemFlags &amp; IS_EVENT_HANDLE_NON_MANAGED_NODE) === <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">    (eventSystemFlags &amp; IS_NON_DELEGATED) === <span class=\"number\">0</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> targetContainerNode = targetContainer <span class=\"keyword\">as</span> Node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (targetInst !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> node = targetInst;</span><br><span class=\"line\">      mainLoop: <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...搜索root container</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  batchedEventUpdates(<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">// 进入合成事件系统</span></span><br><span class=\"line\">    dispatchEventsForPlugins(</span><br><span class=\"line\">      domEventName,</span><br><span class=\"line\">      eventSystemFlags,</span><br><span class=\"line\">      nativeEvent,</span><br><span class=\"line\">      ancestorInst,</span><br><span class=\"line\">      targetContainer,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"dispatchEventsForPlugins\"><a href=\"#dispatchEventsForPlugins\" class=\"headerlink\" title=\"dispatchEventsForPlugins\"></a>dispatchEventsForPlugins</h2><ul>\n<li>将nativeEvent转换成synthesizeEvent,并加入dispatchQueue，最终processDispatchQueue。</li>\n</ul>\n<p><em>extractEvents:</em></p>\n<blockquote>\n<p>创建DispatchEntry:{event:listeners}，并添加到dispatchQueue</p>\n</blockquote>\n<ol>\n<li>工厂模式确定SyntheticEventCtor</li>\n<li>accumulateSinglePhaseListeners从target到root遍历，获取绑定到props的事件处理函数，添加用户自己添加的事件处理函数到listeners数组里并返回。</li>\n<li>dispatchQueue.push({event,listeners})<br>这里event也就是synthesizeEvent对象，即在事件绑定后的回调函数的默认参数event.</li>\n</ol>\n<p><em>processDispatchQueue:</em></p>\n<blockquote>\n<p>遍历dispatchQueue,处理每个事件的listeners数组</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 调用processDispatchQueueItemsInOrder，执行事件处理函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Array&lt;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"doctag\"><span class=\"comment\"> * event: ReactSyntheticEvent,</span></span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"doctag\"><span class=\"comment\"> * listeners: Array&lt;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"doctag\"><span class=\"comment\"> * instance: null | Fiber,</span></span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"doctag\"><span class=\"comment\"> * listener: Function,</span></span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"doctag\"><span class=\"comment\"> * currentTarget: EventTarget,</span></span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"doctag\"><span class=\"comment\"> * &#125;</span></span>&gt;&#125;&#125; dispatchQueue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;EventSystemFlags&#125;</span> <span class=\"variable\">eventSystemFlags</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processDispatchQueue</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  dispatchQueue: DispatchQueue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  eventSystemFlags: EventSystemFlags,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inCapturePhase = (eventSystemFlags &amp; IS_CAPTURE_PHASE) !== <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; dispatchQueue.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &#123; event: ReactSyntheticEvent,listeners: Array &lt; DispatchListener &gt;&#125;;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; event, listeners &#125; = dispatchQueue[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);</span><br><span class=\"line\">    <span class=\"comment\">//  event system doesn&#x27;t use pooling.</span></span><br><span class=\"line\">    <span class=\"comment\">// 事件系统不使用池。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// This would be a good time to rethrow if any of the event handlers threw.</span></span><br><span class=\"line\">  rethrowCaughtError();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>processDispatchQueueItemsInOrder</li>\n</ul>\n<blockquote>\n<p>根据inCapturePhase判定是capture还是bubble,</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 执行事件队列，根据是否捕获确定事件的执行顺序</span></span><br><span class=\"line\"><span class=\"comment\"> * []dispatchListeners</span></span><br><span class=\"line\"><span class=\"comment\"> * 捕获：重最后一个到第一个</span></span><br><span class=\"line\"><span class=\"comment\"> * 冒泡：重0到最后一个</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ReactSyntheticEvent&#125;</span> <span class=\"variable\">event</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Array&lt;DispatchListener&gt;&#125;</span> <span class=\"variable\">dispatchListeners</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;boolean&#125;</span> <span class=\"variable\">inCapturePhase</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processDispatchQueueItemsInOrder</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  event: ReactSyntheticEvent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  dispatchListeners: <span class=\"built_in\">Array</span>&lt;DispatchListener&gt;,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  inCapturePhase: <span class=\"built_in\">boolean</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> previousInstance;</span><br><span class=\"line\">  <span class=\"comment\">// 捕获</span></span><br><span class=\"line\">  <span class=\"comment\">// 因为添加dispatcher时是从当前然后return到null,所以捕获是倒过来的运行</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (inCapturePhase) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = dispatchListeners.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// &#123; instance: null | Fiber,listener: Function,currentTarget: EventTarget&#125;;</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; instance, currentTarget, listener &#125; = dispatchListeners[i];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 阻止冒泡stopPropagation</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (instance !== previousInstance &amp;&amp; event.isPropagationStopped()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      executeDispatch(event, listener, currentTarget);</span><br><span class=\"line\">      previousInstance = instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; dispatchListeners.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; instance, currentTarget, listener &#125; = dispatchListeners[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (instance !== previousInstance &amp;&amp; event.isPropagationStopped()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      executeDispatch(event, listener, currentTarget);</span><br><span class=\"line\">      previousInstance = instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"executeDispatch\"><a href=\"#executeDispatch\" class=\"headerlink\" title=\"executeDispatch\"></a>executeDispatch</h2><ul>\n<li>最终调用用户的处理函数,其中包含一些react的invoke函数，以及一些在开发环境下的createEvent事件。</li>\n</ul>\n<blockquote>\n<p>本文还有许多细节没有提到，只是大致说明了事件系统的一个流程</p>\n</blockquote>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2>"},{"title":"numpy条件选择","date":"2021-10-12T16:38:35.000Z","_content":"\n## numpy 的条件筛选\n\n### 筛选基础\n\n#### 数组切片\n\n我们一般都知道 python 的 [ ] 操作符可以进行切片操作,举例如下:\n\n```python\narr = [1,2,3]\n#切片操作参数介绍：[起始位置下标（默认最开始）:结束位置下标(默认最后):步长(默认为一)]\narr[0:2]\n# [1,2]\n\narr[0:2:2]\n# [1,3]\n\n# 当步长为-1时，能够逆置数组\narr[::-1]\n# [3,2,1]\n```\n\n<!--more-->\n\n#### 下面是 ndarray 二维数组的例子\n\n##### 单列/行筛选\n\n```python\narr = [\n[1,2,3,4],\n[4,5,6,7]\n]\narr = np.array(arr)\n# 单列筛选\n# 列筛选，第一个冒号不能省略\narr[:,0] # 选择下标为0的列\n# [1,4]\n\n# 单行筛选\narr[0] # 选择下标为0的行，就像普通的二维数组访问第一个一维数组一样\n# [1,2,3,4]\n```\n\n##### 多行/列筛选\n\n```python\narr = [\n[1,2,3,4],\n[4,5,6,7]\n]\narr = np.array(arr)\n# 多列筛选\n\t# 选择某个下标区间的列\narr[:,0:2]\n# [\n# [1,2],\n# [4,5]\n# ]\n\t# 选择某些列\narr[:,[0,3]] # 选择下标为 0，3的列\n# [\n# [1,4],\n# [4,7]\n# ]\n\t# bool选择\n\t# bool数组的  长度  必须要与列的  维数相同\narr[:,[True,False,False,False]]\n# [\n# [1],\n# [4]\n# ]\n\n# 多行筛选\n# 与多列筛选类似\narr = np.array([\n[1,2,3,4],\n[4,5,6,7],\n[8,9,10,11]\n])\n\t# 选择某些行\narr[[0,1]]\n# [[\n# [1,2,3,4],\n# [4,5,6,7]\n# ]]\n\t# 其余就不在赘述，可以字行测试\n```\n\n### 条件筛选\n\n通过上面的一些基本的筛选规则，可以大致了解了 numpy 的筛选原则了，那么下面就看一 numpy 比较强大的条件筛选吧。而条件筛选就是依赖 bool 筛选实现的。\n\n#### 条件筛选行\n\n```python\narr = np.array([\n[1,2,3,4],\n[4,5,6,7],\n[8,9,10,11]\n])\n\n# 例如：选择第一个元素为偶数的行\narr[arr[:,0]%2==0]\n# [[ 4,  5,  6,  7],\n#  [ 8,  9, 10, 11]]\n```\n\n我们可以看一下上面发生了什么。\n首先: arr[:,0]x 选择除了二维数组的第一列-----[1,4,8]\n然后: arr[:,0]%2==0 得到了一个 bool 数组-----[False,True,True]\n最后 arr[[False,True,True]],这个样子是不是有点熟悉了，也就是上面的 bool 筛选。\n\n#### 条件筛选列\n\n```python\n# 与行筛选类似\narr[:,arr[1]>5] # 选择第二行中大于5的列\n# [[ 3,  4],\n#  [ 6,  7],\n#  [10, 11]]\n```\n\n#### 行列一起选择\n\n```python\narr[arr>5] # 选择arr中，大于5的元素\n# 其中arr>5得到一个二维的bool数组\n# [[False, False, False, False],\n#  [False, False,  True,  True],\n#  [ True,  True,  True,  True]]\n# 最终结果是一个一维数组\n# [ 6,  7,  8,  9, 10, 11]\n```\n\n##### 注意：在进行行列一起选择时，可能会有元素类型不一致的情况，如第一列 int，第二列是 str，这样再用 arr>5 就会出现错误。\n\n#### 多条件选择\n\n```python\narr[(arr>5) & (arr%2==0)] # 选择大于5且为偶数的元素\n# [ 6,  8, 10]\n```\n\n##### 注意：多条件要用（）括起每一个条件，逻辑关系用 | 或者 &，不能用 and,or 这样。\n","source":"_posts/numpy条件选择.md","raw":"---\ntitle: numpy条件选择\ndate: 2021-10-13 00:38:35\ntags: numpy\ncategories: python\n---\n\n## numpy 的条件筛选\n\n### 筛选基础\n\n#### 数组切片\n\n我们一般都知道 python 的 [ ] 操作符可以进行切片操作,举例如下:\n\n```python\narr = [1,2,3]\n#切片操作参数介绍：[起始位置下标（默认最开始）:结束位置下标(默认最后):步长(默认为一)]\narr[0:2]\n# [1,2]\n\narr[0:2:2]\n# [1,3]\n\n# 当步长为-1时，能够逆置数组\narr[::-1]\n# [3,2,1]\n```\n\n<!--more-->\n\n#### 下面是 ndarray 二维数组的例子\n\n##### 单列/行筛选\n\n```python\narr = [\n[1,2,3,4],\n[4,5,6,7]\n]\narr = np.array(arr)\n# 单列筛选\n# 列筛选，第一个冒号不能省略\narr[:,0] # 选择下标为0的列\n# [1,4]\n\n# 单行筛选\narr[0] # 选择下标为0的行，就像普通的二维数组访问第一个一维数组一样\n# [1,2,3,4]\n```\n\n##### 多行/列筛选\n\n```python\narr = [\n[1,2,3,4],\n[4,5,6,7]\n]\narr = np.array(arr)\n# 多列筛选\n\t# 选择某个下标区间的列\narr[:,0:2]\n# [\n# [1,2],\n# [4,5]\n# ]\n\t# 选择某些列\narr[:,[0,3]] # 选择下标为 0，3的列\n# [\n# [1,4],\n# [4,7]\n# ]\n\t# bool选择\n\t# bool数组的  长度  必须要与列的  维数相同\narr[:,[True,False,False,False]]\n# [\n# [1],\n# [4]\n# ]\n\n# 多行筛选\n# 与多列筛选类似\narr = np.array([\n[1,2,3,4],\n[4,5,6,7],\n[8,9,10,11]\n])\n\t# 选择某些行\narr[[0,1]]\n# [[\n# [1,2,3,4],\n# [4,5,6,7]\n# ]]\n\t# 其余就不在赘述，可以字行测试\n```\n\n### 条件筛选\n\n通过上面的一些基本的筛选规则，可以大致了解了 numpy 的筛选原则了，那么下面就看一 numpy 比较强大的条件筛选吧。而条件筛选就是依赖 bool 筛选实现的。\n\n#### 条件筛选行\n\n```python\narr = np.array([\n[1,2,3,4],\n[4,5,6,7],\n[8,9,10,11]\n])\n\n# 例如：选择第一个元素为偶数的行\narr[arr[:,0]%2==0]\n# [[ 4,  5,  6,  7],\n#  [ 8,  9, 10, 11]]\n```\n\n我们可以看一下上面发生了什么。\n首先: arr[:,0]x 选择除了二维数组的第一列-----[1,4,8]\n然后: arr[:,0]%2==0 得到了一个 bool 数组-----[False,True,True]\n最后 arr[[False,True,True]],这个样子是不是有点熟悉了，也就是上面的 bool 筛选。\n\n#### 条件筛选列\n\n```python\n# 与行筛选类似\narr[:,arr[1]>5] # 选择第二行中大于5的列\n# [[ 3,  4],\n#  [ 6,  7],\n#  [10, 11]]\n```\n\n#### 行列一起选择\n\n```python\narr[arr>5] # 选择arr中，大于5的元素\n# 其中arr>5得到一个二维的bool数组\n# [[False, False, False, False],\n#  [False, False,  True,  True],\n#  [ True,  True,  True,  True]]\n# 最终结果是一个一维数组\n# [ 6,  7,  8,  9, 10, 11]\n```\n\n##### 注意：在进行行列一起选择时，可能会有元素类型不一致的情况，如第一列 int，第二列是 str，这样再用 arr>5 就会出现错误。\n\n#### 多条件选择\n\n```python\narr[(arr>5) & (arr%2==0)] # 选择大于5且为偶数的元素\n# [ 6,  8, 10]\n```\n\n##### 注意：多条件要用（）括起每一个条件，逻辑关系用 | 或者 &，不能用 and,or 这样。\n","slug":"numpy条件选择","published":1,"updated":"2021-10-12T16:47:23.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3itto7l00099ov75sfn4jas","content":"<h2 id=\"numpy-的条件筛选\"><a href=\"#numpy-的条件筛选\" class=\"headerlink\" title=\"numpy 的条件筛选\"></a>numpy 的条件筛选</h2><h3 id=\"筛选基础\"><a href=\"#筛选基础\" class=\"headerlink\" title=\"筛选基础\"></a>筛选基础</h3><h4 id=\"数组切片\"><a href=\"#数组切片\" class=\"headerlink\" title=\"数组切片\"></a>数组切片</h4><p>我们一般都知道 python 的 [ ] 操作符可以进行切片操作,举例如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"comment\">#切片操作参数介绍：[起始位置下标（默认最开始）:结束位置下标(默认最后):步长(默认为一)]</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\"># [1,2]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr[<span class=\"number\">0</span>:<span class=\"number\">2</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\"># [1,3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当步长为-1时，能够逆置数组</span></span><br><span class=\"line\">arr[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"comment\"># [3,2,1]</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h4 id=\"下面是-ndarray-二维数组的例子\"><a href=\"#下面是-ndarray-二维数组的例子\" class=\"headerlink\" title=\"下面是 ndarray 二维数组的例子\"></a>下面是 ndarray 二维数组的例子</h4><h5 id=\"单列-行筛选\"><a href=\"#单列-行筛选\" class=\"headerlink\" title=\"单列/行筛选\"></a>单列/行筛选</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],</span><br><span class=\"line\">[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">arr = np.array(arr)</span><br><span class=\"line\"><span class=\"comment\"># 单列筛选</span></span><br><span class=\"line\"><span class=\"comment\"># 列筛选，第一个冒号不能省略</span></span><br><span class=\"line\">arr[:,<span class=\"number\">0</span>] <span class=\"comment\"># 选择下标为0的列</span></span><br><span class=\"line\"><span class=\"comment\"># [1,4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单行筛选</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>] <span class=\"comment\"># 选择下标为0的行，就像普通的二维数组访问第一个一维数组一样</span></span><br><span class=\"line\"><span class=\"comment\"># [1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多行-列筛选\"><a href=\"#多行-列筛选\" class=\"headerlink\" title=\"多行/列筛选\"></a>多行/列筛选</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],</span><br><span class=\"line\">[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">arr = np.array(arr)</span><br><span class=\"line\"><span class=\"comment\"># 多列筛选</span></span><br><span class=\"line\">\t<span class=\"comment\"># 选择某个下标区间的列</span></span><br><span class=\"line\">arr[:,<span class=\"number\">0</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\"># [</span></span><br><span class=\"line\"><span class=\"comment\"># [1,2],</span></span><br><span class=\"line\"><span class=\"comment\"># [4,5]</span></span><br><span class=\"line\"><span class=\"comment\"># ]</span></span><br><span class=\"line\">\t<span class=\"comment\"># 选择某些列</span></span><br><span class=\"line\">arr[:,[<span class=\"number\">0</span>,<span class=\"number\">3</span>]] <span class=\"comment\"># 选择下标为 0，3的列</span></span><br><span class=\"line\"><span class=\"comment\"># [</span></span><br><span class=\"line\"><span class=\"comment\"># [1,4],</span></span><br><span class=\"line\"><span class=\"comment\"># [4,7]</span></span><br><span class=\"line\"><span class=\"comment\"># ]</span></span><br><span class=\"line\">\t<span class=\"comment\"># bool选择</span></span><br><span class=\"line\">\t<span class=\"comment\"># bool数组的  长度  必须要与列的  维数相同</span></span><br><span class=\"line\">arr[:,[<span class=\"literal\">True</span>,<span class=\"literal\">False</span>,<span class=\"literal\">False</span>,<span class=\"literal\">False</span>]]</span><br><span class=\"line\"><span class=\"comment\"># [</span></span><br><span class=\"line\"><span class=\"comment\"># [1],</span></span><br><span class=\"line\"><span class=\"comment\"># [4]</span></span><br><span class=\"line\"><span class=\"comment\"># ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多行筛选</span></span><br><span class=\"line\"><span class=\"comment\"># 与多列筛选类似</span></span><br><span class=\"line\">arr = np.array([</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],</span><br><span class=\"line\">[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>],</span><br><span class=\"line\">[<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>]</span><br><span class=\"line\">])</span><br><span class=\"line\">\t<span class=\"comment\"># 选择某些行</span></span><br><span class=\"line\">arr[[<span class=\"number\">0</span>,<span class=\"number\">1</span>]]</span><br><span class=\"line\"><span class=\"comment\"># [[</span></span><br><span class=\"line\"><span class=\"comment\"># [1,2,3,4],</span></span><br><span class=\"line\"><span class=\"comment\"># [4,5,6,7]</span></span><br><span class=\"line\"><span class=\"comment\"># ]]</span></span><br><span class=\"line\">\t<span class=\"comment\"># 其余就不在赘述，可以字行测试</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件筛选\"><a href=\"#条件筛选\" class=\"headerlink\" title=\"条件筛选\"></a>条件筛选</h3><p>通过上面的一些基本的筛选规则，可以大致了解了 numpy 的筛选原则了，那么下面就看一 numpy 比较强大的条件筛选吧。而条件筛选就是依赖 bool 筛选实现的。</p>\n<h4 id=\"条件筛选行\"><a href=\"#条件筛选行\" class=\"headerlink\" title=\"条件筛选行\"></a>条件筛选行</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = np.array([</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],</span><br><span class=\"line\">[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>],</span><br><span class=\"line\">[<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>]</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 例如：选择第一个元素为偶数的行</span></span><br><span class=\"line\">arr[arr[:,<span class=\"number\">0</span>]%<span class=\"number\">2</span>==<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"comment\"># [[ 4,  5,  6,  7],</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 8,  9, 10, 11]]</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以看一下上面发生了什么。<br>首先: arr[:,0]x 选择除了二维数组的第一列—–[1,4,8]<br>然后: arr[:,0]%2==0 得到了一个 bool 数组—–[False,True,True]<br>最后 arr[[False,True,True]],这个样子是不是有点熟悉了，也就是上面的 bool 筛选。</p>\n<h4 id=\"条件筛选列\"><a href=\"#条件筛选列\" class=\"headerlink\" title=\"条件筛选列\"></a>条件筛选列</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 与行筛选类似</span></span><br><span class=\"line\">arr[:,arr[<span class=\"number\">1</span>]&gt;<span class=\"number\">5</span>] <span class=\"comment\"># 选择第二行中大于5的列</span></span><br><span class=\"line\"><span class=\"comment\"># [[ 3,  4],</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 6,  7],</span></span><br><span class=\"line\"><span class=\"comment\">#  [10, 11]]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"行列一起选择\"><a href=\"#行列一起选择\" class=\"headerlink\" title=\"行列一起选择\"></a>行列一起选择</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr[arr&gt;<span class=\"number\">5</span>] <span class=\"comment\"># 选择arr中，大于5的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 其中arr&gt;5得到一个二维的bool数组</span></span><br><span class=\"line\"><span class=\"comment\"># [[False, False, False, False],</span></span><br><span class=\"line\"><span class=\"comment\">#  [False, False,  True,  True],</span></span><br><span class=\"line\"><span class=\"comment\">#  [ True,  True,  True,  True]]</span></span><br><span class=\"line\"><span class=\"comment\"># 最终结果是一个一维数组</span></span><br><span class=\"line\"><span class=\"comment\"># [ 6,  7,  8,  9, 10, 11]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意：在进行行列一起选择时，可能会有元素类型不一致的情况，如第一列-int，第二列是-str，这样再用-arr-gt-5-就会出现错误。\"><a href=\"#注意：在进行行列一起选择时，可能会有元素类型不一致的情况，如第一列-int，第二列是-str，这样再用-arr-gt-5-就会出现错误。\" class=\"headerlink\" title=\"注意：在进行行列一起选择时，可能会有元素类型不一致的情况，如第一列 int，第二列是 str，这样再用 arr&gt;5 就会出现错误。\"></a>注意：在进行行列一起选择时，可能会有元素类型不一致的情况，如第一列 int，第二列是 str，这样再用 arr&gt;5 就会出现错误。</h5><h4 id=\"多条件选择\"><a href=\"#多条件选择\" class=\"headerlink\" title=\"多条件选择\"></a>多条件选择</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr[(arr&gt;<span class=\"number\">5</span>) &amp; (arr%<span class=\"number\">2</span>==<span class=\"number\">0</span>)] <span class=\"comment\"># 选择大于5且为偶数的元素</span></span><br><span class=\"line\"><span class=\"comment\"># [ 6,  8, 10]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意：多条件要用（）括起每一个条件，逻辑关系用-或者-amp-，不能用-and-or-这样。\"><a href=\"#注意：多条件要用（）括起每一个条件，逻辑关系用-或者-amp-，不能用-and-or-这样。\" class=\"headerlink\" title=\"注意：多条件要用（）括起每一个条件，逻辑关系用 | 或者 &amp;，不能用 and,or 这样。\"></a>注意：多条件要用（）括起每一个条件，逻辑关系用 | 或者 &amp;，不能用 and,or 这样。</h5>","site":{"data":{"linklist":[{"nickname":"ZCW","avatar":"http://sherry.formeky.xyz:8090/upload/2021/09/QQ%E5%9B%BE%E7%89%8720210629151630-d1748408bc4d4d3b995abaf38440b71d.jpg","site":"http://sherry.formeky.xyz:8090/","descp":"后端工程师"},{"nickname":"LJC","site":"https://lengthmin.me/","descp":"这大概就是大佬吧","avatar":"https://lengthmin.me/images/avatar.png"}]}},"length":1509,"excerpt":"<h2 id=\"numpy-的条件筛选\"><a href=\"#numpy-的条件筛选\" class=\"headerlink\" title=\"numpy 的条件筛选\"></a>numpy 的条件筛选</h2><h3 id=\"筛选基础\"><a href=\"#筛选基础\" class=\"headerlink\" title=\"筛选基础\"></a>筛选基础</h3><h4 id=\"数组切片\"><a href=\"#数组切片\" class=\"headerlink\" title=\"数组切片\"></a>数组切片</h4><p>我们一般都知道 python 的 [ ] 操作符可以进行切片操作,举例如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"comment\">#切片操作参数介绍：[起始位置下标（默认最开始）:结束位置下标(默认最后):步长(默认为一)]</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\"># [1,2]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr[<span class=\"number\">0</span>:<span class=\"number\">2</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\"># [1,3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当步长为-1时，能够逆置数组</span></span><br><span class=\"line\">arr[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"comment\"># [3,2,1]</span></span><br></pre></td></tr></table></figure>","more":"<h4 id=\"下面是-ndarray-二维数组的例子\"><a href=\"#下面是-ndarray-二维数组的例子\" class=\"headerlink\" title=\"下面是 ndarray 二维数组的例子\"></a>下面是 ndarray 二维数组的例子</h4><h5 id=\"单列-行筛选\"><a href=\"#单列-行筛选\" class=\"headerlink\" title=\"单列/行筛选\"></a>单列/行筛选</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],</span><br><span class=\"line\">[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">arr = np.array(arr)</span><br><span class=\"line\"><span class=\"comment\"># 单列筛选</span></span><br><span class=\"line\"><span class=\"comment\"># 列筛选，第一个冒号不能省略</span></span><br><span class=\"line\">arr[:,<span class=\"number\">0</span>] <span class=\"comment\"># 选择下标为0的列</span></span><br><span class=\"line\"><span class=\"comment\"># [1,4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单行筛选</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>] <span class=\"comment\"># 选择下标为0的行，就像普通的二维数组访问第一个一维数组一样</span></span><br><span class=\"line\"><span class=\"comment\"># [1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多行-列筛选\"><a href=\"#多行-列筛选\" class=\"headerlink\" title=\"多行/列筛选\"></a>多行/列筛选</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],</span><br><span class=\"line\">[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">arr = np.array(arr)</span><br><span class=\"line\"><span class=\"comment\"># 多列筛选</span></span><br><span class=\"line\">\t<span class=\"comment\"># 选择某个下标区间的列</span></span><br><span class=\"line\">arr[:,<span class=\"number\">0</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\"># [</span></span><br><span class=\"line\"><span class=\"comment\"># [1,2],</span></span><br><span class=\"line\"><span class=\"comment\"># [4,5]</span></span><br><span class=\"line\"><span class=\"comment\"># ]</span></span><br><span class=\"line\">\t<span class=\"comment\"># 选择某些列</span></span><br><span class=\"line\">arr[:,[<span class=\"number\">0</span>,<span class=\"number\">3</span>]] <span class=\"comment\"># 选择下标为 0，3的列</span></span><br><span class=\"line\"><span class=\"comment\"># [</span></span><br><span class=\"line\"><span class=\"comment\"># [1,4],</span></span><br><span class=\"line\"><span class=\"comment\"># [4,7]</span></span><br><span class=\"line\"><span class=\"comment\"># ]</span></span><br><span class=\"line\">\t<span class=\"comment\"># bool选择</span></span><br><span class=\"line\">\t<span class=\"comment\"># bool数组的  长度  必须要与列的  维数相同</span></span><br><span class=\"line\">arr[:,[<span class=\"literal\">True</span>,<span class=\"literal\">False</span>,<span class=\"literal\">False</span>,<span class=\"literal\">False</span>]]</span><br><span class=\"line\"><span class=\"comment\"># [</span></span><br><span class=\"line\"><span class=\"comment\"># [1],</span></span><br><span class=\"line\"><span class=\"comment\"># [4]</span></span><br><span class=\"line\"><span class=\"comment\"># ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多行筛选</span></span><br><span class=\"line\"><span class=\"comment\"># 与多列筛选类似</span></span><br><span class=\"line\">arr = np.array([</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],</span><br><span class=\"line\">[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>],</span><br><span class=\"line\">[<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>]</span><br><span class=\"line\">])</span><br><span class=\"line\">\t<span class=\"comment\"># 选择某些行</span></span><br><span class=\"line\">arr[[<span class=\"number\">0</span>,<span class=\"number\">1</span>]]</span><br><span class=\"line\"><span class=\"comment\"># [[</span></span><br><span class=\"line\"><span class=\"comment\"># [1,2,3,4],</span></span><br><span class=\"line\"><span class=\"comment\"># [4,5,6,7]</span></span><br><span class=\"line\"><span class=\"comment\"># ]]</span></span><br><span class=\"line\">\t<span class=\"comment\"># 其余就不在赘述，可以字行测试</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件筛选\"><a href=\"#条件筛选\" class=\"headerlink\" title=\"条件筛选\"></a>条件筛选</h3><p>通过上面的一些基本的筛选规则，可以大致了解了 numpy 的筛选原则了，那么下面就看一 numpy 比较强大的条件筛选吧。而条件筛选就是依赖 bool 筛选实现的。</p>\n<h4 id=\"条件筛选行\"><a href=\"#条件筛选行\" class=\"headerlink\" title=\"条件筛选行\"></a>条件筛选行</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = np.array([</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],</span><br><span class=\"line\">[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>],</span><br><span class=\"line\">[<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>]</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 例如：选择第一个元素为偶数的行</span></span><br><span class=\"line\">arr[arr[:,<span class=\"number\">0</span>]%<span class=\"number\">2</span>==<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"comment\"># [[ 4,  5,  6,  7],</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 8,  9, 10, 11]]</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以看一下上面发生了什么。<br>首先: arr[:,0]x 选择除了二维数组的第一列—–[1,4,8]<br>然后: arr[:,0]%2==0 得到了一个 bool 数组—–[False,True,True]<br>最后 arr[[False,True,True]],这个样子是不是有点熟悉了，也就是上面的 bool 筛选。</p>\n<h4 id=\"条件筛选列\"><a href=\"#条件筛选列\" class=\"headerlink\" title=\"条件筛选列\"></a>条件筛选列</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 与行筛选类似</span></span><br><span class=\"line\">arr[:,arr[<span class=\"number\">1</span>]&gt;<span class=\"number\">5</span>] <span class=\"comment\"># 选择第二行中大于5的列</span></span><br><span class=\"line\"><span class=\"comment\"># [[ 3,  4],</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 6,  7],</span></span><br><span class=\"line\"><span class=\"comment\">#  [10, 11]]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"行列一起选择\"><a href=\"#行列一起选择\" class=\"headerlink\" title=\"行列一起选择\"></a>行列一起选择</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr[arr&gt;<span class=\"number\">5</span>] <span class=\"comment\"># 选择arr中，大于5的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 其中arr&gt;5得到一个二维的bool数组</span></span><br><span class=\"line\"><span class=\"comment\"># [[False, False, False, False],</span></span><br><span class=\"line\"><span class=\"comment\">#  [False, False,  True,  True],</span></span><br><span class=\"line\"><span class=\"comment\">#  [ True,  True,  True,  True]]</span></span><br><span class=\"line\"><span class=\"comment\"># 最终结果是一个一维数组</span></span><br><span class=\"line\"><span class=\"comment\"># [ 6,  7,  8,  9, 10, 11]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意：在进行行列一起选择时，可能会有元素类型不一致的情况，如第一列-int，第二列是-str，这样再用-arr-gt-5-就会出现错误。\"><a href=\"#注意：在进行行列一起选择时，可能会有元素类型不一致的情况，如第一列-int，第二列是-str，这样再用-arr-gt-5-就会出现错误。\" class=\"headerlink\" title=\"注意：在进行行列一起选择时，可能会有元素类型不一致的情况，如第一列 int，第二列是 str，这样再用 arr&gt;5 就会出现错误。\"></a>注意：在进行行列一起选择时，可能会有元素类型不一致的情况，如第一列 int，第二列是 str，这样再用 arr&gt;5 就会出现错误。</h5><h4 id=\"多条件选择\"><a href=\"#多条件选择\" class=\"headerlink\" title=\"多条件选择\"></a>多条件选择</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr[(arr&gt;<span class=\"number\">5</span>) &amp; (arr%<span class=\"number\">2</span>==<span class=\"number\">0</span>)] <span class=\"comment\"># 选择大于5且为偶数的元素</span></span><br><span class=\"line\"><span class=\"comment\"># [ 6,  8, 10]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意：多条件要用（）括起每一个条件，逻辑关系用-或者-amp-，不能用-and-or-这样。\"><a href=\"#注意：多条件要用（）括起每一个条件，逻辑关系用-或者-amp-，不能用-and-or-这样。\" class=\"headerlink\" title=\"注意：多条件要用（）括起每一个条件，逻辑关系用 | 或者 &amp;，不能用 and,or 这样。\"></a>注意：多条件要用（）括起每一个条件，逻辑关系用 | 或者 &amp;，不能用 and,or 这样。</h5>"},{"title":"Hello World","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-09-24T11:42:41.093Z","updated":"2021-10-01T13:08:05.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3itto7o000a9ov7e7733ny1","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"linklist":[{"nickname":"ZCW","avatar":"http://sherry.formeky.xyz:8090/upload/2021/09/QQ%E5%9B%BE%E7%89%8720210629151630-d1748408bc4d4d3b995abaf38440b71d.jpg","site":"http://sherry.formeky.xyz:8090/","descp":"后端工程师"},{"nickname":"LJC","site":"https://lengthmin.me/","descp":"这大概就是大佬吧","avatar":"https://lengthmin.me/images/avatar.png"}]}},"length":367,"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"一封阿里云的喝茶邮件","date":"2022-02-08T04:37:52.000Z","_content":"\n事情是这样的，就在今天早上，收到了一封来自阿里云的【喝茶（核查）通知】。一看邮件，很明显就是域名没有解析到内地节点的服务器上面呢。回想一下自己的解析，它说的对！。。。\n![why](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081154.png)\n\n<!-- more -->\n\n## 原由\n\n在老早以前了，我用 hexo 部署 blog 在 GitHub Page 上面，然后解析了自己的域名在 gh-page 上，显然，GitHub Page 的服务器不在内地。我为了访问速度能快那么一丁点，就继续使用了 cloudflare 的 cdn 加速，因此也在上面设置了 DNS，但是我在 DNS 上也解析了一个二级域名到了阿里云的服务器上啊。按照网上的说法，设置一个二级域名解析到内地服务器就行了呢，然后点击复查连接后还是检查有问题。\n\n## 解决\n\n通过原由的分析，我这次将问题放在了 cloudflare 上面，看了一下 DNS 设置。\n![dns setting](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081207.png)\n看到上面的代理状态了吗，我就开始怀疑是这个的问题，ok,查查什么意思。看到了下面的一个问题。\n![Q&A proxy](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081210.png)\n按照上面的说法，显然 proxy 就是一个代理，访问域名时，如果设置了代理，那么就会走代理，而不是直接走解析地址。\n那我们来 ping 一下看看。\n![ping res](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081213.png)\n上面的两个域名其实是同一个 ip,但是 ping 出来响应的不一样，因此，确实是有代理的存在。\n我自己的服务器 ip 是 47 开始的，上面的 ping 结果一个是 cloudflare 代理的服务器，一个是 gh-page 的服务器。\n那么关闭代理就可以了吗？\n是的，可以了。\n![pre|left|350*0](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081229.jpg)\n![|right|250*0](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081231.png)\n![result](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081217.png)\n","source":"_posts/一封阿里云的喝茶邮件.md","raw":"---\ntitle: 一封阿里云的喝茶邮件\ndate: 2022-02-08 12:37:52\ntags:\ncategories: 一些趣事的🌟\n---\n\n事情是这样的，就在今天早上，收到了一封来自阿里云的【喝茶（核查）通知】。一看邮件，很明显就是域名没有解析到内地节点的服务器上面呢。回想一下自己的解析，它说的对！。。。\n![why](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081154.png)\n\n<!-- more -->\n\n## 原由\n\n在老早以前了，我用 hexo 部署 blog 在 GitHub Page 上面，然后解析了自己的域名在 gh-page 上，显然，GitHub Page 的服务器不在内地。我为了访问速度能快那么一丁点，就继续使用了 cloudflare 的 cdn 加速，因此也在上面设置了 DNS，但是我在 DNS 上也解析了一个二级域名到了阿里云的服务器上啊。按照网上的说法，设置一个二级域名解析到内地服务器就行了呢，然后点击复查连接后还是检查有问题。\n\n## 解决\n\n通过原由的分析，我这次将问题放在了 cloudflare 上面，看了一下 DNS 设置。\n![dns setting](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081207.png)\n看到上面的代理状态了吗，我就开始怀疑是这个的问题，ok,查查什么意思。看到了下面的一个问题。\n![Q&A proxy](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081210.png)\n按照上面的说法，显然 proxy 就是一个代理，访问域名时，如果设置了代理，那么就会走代理，而不是直接走解析地址。\n那我们来 ping 一下看看。\n![ping res](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081213.png)\n上面的两个域名其实是同一个 ip,但是 ping 出来响应的不一样，因此，确实是有代理的存在。\n我自己的服务器 ip 是 47 开始的，上面的 ping 结果一个是 cloudflare 代理的服务器，一个是 gh-page 的服务器。\n那么关闭代理就可以了吗？\n是的，可以了。\n![pre|left|350*0](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081229.jpg)\n![|right|250*0](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081231.png)\n![result](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081217.png)\n","slug":"一封阿里云的喝茶邮件","published":1,"updated":"2022-04-30T02:34:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3itto7q000c9ov7h2791u4d","content":"<p>事情是这样的，就在今天早上，收到了一封来自阿里云的【喝茶（核查）通知】。一看邮件，很明显就是域名没有解析到内地节点的服务器上面呢。回想一下自己的解析，它说的对！。。。<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081154.png\" alt=\"why\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"原由\"><a href=\"#原由\" class=\"headerlink\" title=\"原由\"></a>原由</h2><p>在老早以前了，我用 hexo 部署 blog 在 GitHub Page 上面，然后解析了自己的域名在 gh-page 上，显然，GitHub Page 的服务器不在内地。我为了访问速度能快那么一丁点，就继续使用了 cloudflare 的 cdn 加速，因此也在上面设置了 DNS，但是我在 DNS 上也解析了一个二级域名到了阿里云的服务器上啊。按照网上的说法，设置一个二级域名解析到内地服务器就行了呢，然后点击复查连接后还是检查有问题。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>通过原由的分析，我这次将问题放在了 cloudflare 上面，看了一下 DNS 设置。<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081207.png\" alt=\"dns setting\"><br>看到上面的代理状态了吗，我就开始怀疑是这个的问题，ok,查查什么意思。看到了下面的一个问题。<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081210.png\" alt=\"Q&amp;A proxy\"><br>按照上面的说法，显然 proxy 就是一个代理，访问域名时，如果设置了代理，那么就会走代理，而不是直接走解析地址。<br>那我们来 ping 一下看看。<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081213.png\" alt=\"ping res\"><br>上面的两个域名其实是同一个 ip,但是 ping 出来响应的不一样，因此，确实是有代理的存在。<br>我自己的服务器 ip 是 47 开始的，上面的 ping 结果一个是 cloudflare 代理的服务器，一个是 gh-page 的服务器。<br>那么关闭代理就可以了吗？<br>是的，可以了。<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081229.jpg\" alt=\"pre|left|350*0\"><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081231.png\" alt=\"|right|250*0\"><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081217.png\" alt=\"result\"></p>\n","site":{"data":{"linklist":[{"nickname":"ZCW","avatar":"http://sherry.formeky.xyz:8090/upload/2021/09/QQ%E5%9B%BE%E7%89%8720210629151630-d1748408bc4d4d3b995abaf38440b71d.jpg","site":"http://sherry.formeky.xyz:8090/","descp":"后端工程师"},{"nickname":"LJC","site":"https://lengthmin.me/","descp":"这大概就是大佬吧","avatar":"https://lengthmin.me/images/avatar.png"}]}},"length":566,"excerpt":"<p>事情是这样的，就在今天早上，收到了一封来自阿里云的【喝茶（核查）通知】。一看邮件，很明显就是域名没有解析到内地节点的服务器上面呢。回想一下自己的解析，它说的对！。。。<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081154.png\" alt=\"why\"></p>","more":"<h2 id=\"原由\"><a href=\"#原由\" class=\"headerlink\" title=\"原由\"></a>原由</h2><p>在老早以前了，我用 hexo 部署 blog 在 GitHub Page 上面，然后解析了自己的域名在 gh-page 上，显然，GitHub Page 的服务器不在内地。我为了访问速度能快那么一丁点，就继续使用了 cloudflare 的 cdn 加速，因此也在上面设置了 DNS，但是我在 DNS 上也解析了一个二级域名到了阿里云的服务器上啊。按照网上的说法，设置一个二级域名解析到内地服务器就行了呢，然后点击复查连接后还是检查有问题。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>通过原由的分析，我这次将问题放在了 cloudflare 上面，看了一下 DNS 设置。<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081207.png\" alt=\"dns setting\"><br>看到上面的代理状态了吗，我就开始怀疑是这个的问题，ok,查查什么意思。看到了下面的一个问题。<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081210.png\" alt=\"Q&amp;A proxy\"><br>按照上面的说法，显然 proxy 就是一个代理，访问域名时，如果设置了代理，那么就会走代理，而不是直接走解析地址。<br>那我们来 ping 一下看看。<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081213.png\" alt=\"ping res\"><br>上面的两个域名其实是同一个 ip,但是 ping 出来响应的不一样，因此，确实是有代理的存在。<br>我自己的服务器 ip 是 47 开始的，上面的 ping 结果一个是 cloudflare 代理的服务器，一个是 gh-page 的服务器。<br>那么关闭代理就可以了吗？<br>是的，可以了。<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081229.jpg\" alt=\"pre|left|350*0\"><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081231.png\" alt=\"|right|250*0\"><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202202081217.png\" alt=\"result\"></p>"},{"title":"对javaScript事件冒泡与事件捕获的再学习","date":"2021-10-20T16:39:16.000Z","_content":"\n# 对 javaScript 事件冒泡与事件捕获的再学习\n\n## DOM 树结构\n\n我们在浏览器上会看见一颗 dom 树，这样的树状结构决定了事件的冒泡与捕获。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n  </head>\n  <body>\n    <h1>hello Github Action</h1>\n    <div class=\"out-A\">\n      <div class=\"out-B\">\n        <div class=\"out-C\">hello, I'am C</div>\n      </div>\n    </div>\n  </body>\n</html>\n```\n\n<!--more-->\n\n## 事件捕获与事件冒泡流程\n\n![事件冒泡与捕获](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/bubbling-capturing.png)\n\n#### 首先，事件冒泡捕获建立在父子节点绑定了相同类型的事件。比如：都绑定了 onclick 点击事件。\n\n##### 1.当我们点击最里面的 div 标签时，\n\n会先沿着 window->document->parentNodes->EventTarget 路线进行事件捕获，在捕获时会进行对每个 html 对象询问是否绑定了该事件的 listener,如果有则执行它。而事件冒泡则与上面路线相反，但询问行为相同。 ######一般我们给 html 元素添加事件时，会使用 HTMLElement.addEventListener(type, listener, useCapture)给其添加事件处理函数，这里的参数详见[EventTarget.addEventListener](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener)。需要特别说明的是第三个参数:\n\n```JavaScript\nuseCapture:boolean\n\nOR\n\n{\n\tcapture:boolean,\n\tonce:boolean,\n\tpassive:boolean\n}\n```\n\n这里的 useCapture 以及 capture 就是设置该事件 listener 是否会在捕获阶段触发，默认为 false。\n\n##### 2.我们以如下例子为例：\n\n###### 这里绘制一个三层嵌套的 div，并给它们添加点击事件。\n\n![div](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/div.png)\n\n```javascript\nvar diva = document.querySelector(\".out-A\");\nvar divb = document.querySelector(\".out-B\");\nvar divc = document.querySelector(\".out-C\");\ndiva.addEventListener(\"click\", function () {\n  console.log(\"A\");\n});\ndivb.addEventListener(\"click\", function () {\n  console.log(\"B\");\n});\ndivc.addEventListener(\"click\", function () {\n  console.log(\"C\");\n});\n```\n\n然后我们点击 C,出现如下结果：\n![output](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/output.png)\n可以看见点击 C 后出现了 C->B->A 的输出顺序，为什么会出现 CBA 的输出顺序呢，因为我们在添加事件时，使用了 capture 的默认值 false,即在事件捕获阶段不会触发事件处理函数。\n\n###### 将 capture 的值设置为 true\n\n```javascript\ndiva.addEventListener(\n  \"click\",\n  function () {\n    console.log(\"A\");\n  },\n  true\n);\ndivb.addEventListener(\n  \"click\",\n  function () {\n    console.log(\"B\");\n  },\n  true\n);\ndivc.addEventListener(\n  \"click\",\n  function () {\n    console.log(\"C\");\n  },\n  true\n);\n```\n\n输出结果为：\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110202333.png)\n这里可以看见输出结果变为了 ABC，这就是从父节点到 EventTarget 节点的捕获。同时我们也可以发现，如果只给节点添加一个事件处理，这样只会进行捕获或者冒泡。所以下面我们给一个节点添加两个 click 事件，并且把其中一个的 capture 设置为 true,另一个为 false.\n\n###### 给一个节点添加两个 click 事件，并且把其中一个的 capture 设置为 true,另一个为 false.\n\n```javascript\ndiva.addEventListener(\n  \"click\",\n  function () {\n    console.log(\"A:capture=true\");\n  },\n  true\n);\ndivb.addEventListener(\n  \"click\",\n  function () {\n    console.log(\"B:capture=true\");\n  },\n  true\n);\ndivc.addEventListener(\n  \"click\",\n  function () {\n    console.log(\"C:capture=true\");\n  },\n  true\n);\n//   默认false\ndiva.addEventListener(\"click\", function () {\n  console.log(\"A:capture=false\");\n});\ndivb.addEventListener(\"click\", function () {\n  console.log(\"B:capture=false\");\n});\ndivc.addEventListener(\"click\", function () {\n  console.log(\"C:capture=false\");\n});\n```\n\n我们再次点击 C,输出结果如下：\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110202341.png)\n看看，这里的结果表示同时出现了事件捕获与事件冒泡。\n<font color=\"green\">到了这里，想必大家对于事件的捕获与冒泡流程有了一定的了解吧。</font>下面我们再来聊聊 Event.stopPropagation()与 Event.preventDefault()\n\n## Event.stopPropagation()与 Event.preventDefault()\n\n#### Event.stopPropagation()\n\n###### 同样是上面的例子。我们给 A:capture=true（捕获阶段）的那个事件处理加上 stopPropagation().看看下面的输出：\n\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110202353.png)\n\n###### 只输出了捕获阶段的 A 处理函数，后面子节点的事件函数都没有触发。那我们在冒泡阶段添加这一行又会发生什么呢？下面将添加 stopPropagation 到 C 的冒泡处理函数里，即在 C:capture=false 里面。下面是输出结果：\n\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110210005.png)\n\n###### 同样的，事件捕获与事件冒泡流程被截断了。\n\n##### 看到这里，想必明白了吧，stopPropagation 就好比一把‘刀’，你把它添加到什么阶段，那么这个阶段后面的就会被截去。\n\n- 而整个流程是：\n\n###### 事件捕获到事件冒泡\n\n###### 父节点到 EventTarget 节点再到父节点\n\n#### Event.preventDefault()\n\n那把上面的改成 preventDefault 又会是怎样的结果呢？那就试试看咯：\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110202356.png)\n没有影响！！！preventDefault 在没有对事件捕获产生影响，那冒泡阶段呢？也没有影响。所以 preventDefault 只是单纯的阻止了 html 元素的默认事件，比如一个 a 标签能够跳转链接，加上 preventDefault 后就不能跳转了。\n\n## 总结\n\n###### 我们可以看到，可以使用 stopPropagation 阻止事件的冒泡。通常我们在给 html 元素添加事件时，一般都会使用 capture 的默认值：false,这样就只会在冒泡阶段触发事件处理函数，这样通常我们只需要在 capture 为 false 的情况下，给 EventTarget 元素添加 stopPropagation 就行了，这样，无论在捕获阶段还是在冒泡阶段都只会触发 EventTarget 的事件处理函数，从而减少不必要的副作用。\n\n参考：[JavaScript eventing deep dive](https://web.dev/eventing-deepdive/)\n","source":"_posts/对javaScript事件冒泡与事件捕获的再学习.md","raw":"---\ntitle: 对javaScript事件冒泡与事件捕获的再学习\ndate: 2021-10-21 00:39:16\ntags: Event\ncategories: javascript\n---\n\n# 对 javaScript 事件冒泡与事件捕获的再学习\n\n## DOM 树结构\n\n我们在浏览器上会看见一颗 dom 树，这样的树状结构决定了事件的冒泡与捕获。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n  </head>\n  <body>\n    <h1>hello Github Action</h1>\n    <div class=\"out-A\">\n      <div class=\"out-B\">\n        <div class=\"out-C\">hello, I'am C</div>\n      </div>\n    </div>\n  </body>\n</html>\n```\n\n<!--more-->\n\n## 事件捕获与事件冒泡流程\n\n![事件冒泡与捕获](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/bubbling-capturing.png)\n\n#### 首先，事件冒泡捕获建立在父子节点绑定了相同类型的事件。比如：都绑定了 onclick 点击事件。\n\n##### 1.当我们点击最里面的 div 标签时，\n\n会先沿着 window->document->parentNodes->EventTarget 路线进行事件捕获，在捕获时会进行对每个 html 对象询问是否绑定了该事件的 listener,如果有则执行它。而事件冒泡则与上面路线相反，但询问行为相同。 ######一般我们给 html 元素添加事件时，会使用 HTMLElement.addEventListener(type, listener, useCapture)给其添加事件处理函数，这里的参数详见[EventTarget.addEventListener](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener)。需要特别说明的是第三个参数:\n\n```JavaScript\nuseCapture:boolean\n\nOR\n\n{\n\tcapture:boolean,\n\tonce:boolean,\n\tpassive:boolean\n}\n```\n\n这里的 useCapture 以及 capture 就是设置该事件 listener 是否会在捕获阶段触发，默认为 false。\n\n##### 2.我们以如下例子为例：\n\n###### 这里绘制一个三层嵌套的 div，并给它们添加点击事件。\n\n![div](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/div.png)\n\n```javascript\nvar diva = document.querySelector(\".out-A\");\nvar divb = document.querySelector(\".out-B\");\nvar divc = document.querySelector(\".out-C\");\ndiva.addEventListener(\"click\", function () {\n  console.log(\"A\");\n});\ndivb.addEventListener(\"click\", function () {\n  console.log(\"B\");\n});\ndivc.addEventListener(\"click\", function () {\n  console.log(\"C\");\n});\n```\n\n然后我们点击 C,出现如下结果：\n![output](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/output.png)\n可以看见点击 C 后出现了 C->B->A 的输出顺序，为什么会出现 CBA 的输出顺序呢，因为我们在添加事件时，使用了 capture 的默认值 false,即在事件捕获阶段不会触发事件处理函数。\n\n###### 将 capture 的值设置为 true\n\n```javascript\ndiva.addEventListener(\n  \"click\",\n  function () {\n    console.log(\"A\");\n  },\n  true\n);\ndivb.addEventListener(\n  \"click\",\n  function () {\n    console.log(\"B\");\n  },\n  true\n);\ndivc.addEventListener(\n  \"click\",\n  function () {\n    console.log(\"C\");\n  },\n  true\n);\n```\n\n输出结果为：\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110202333.png)\n这里可以看见输出结果变为了 ABC，这就是从父节点到 EventTarget 节点的捕获。同时我们也可以发现，如果只给节点添加一个事件处理，这样只会进行捕获或者冒泡。所以下面我们给一个节点添加两个 click 事件，并且把其中一个的 capture 设置为 true,另一个为 false.\n\n###### 给一个节点添加两个 click 事件，并且把其中一个的 capture 设置为 true,另一个为 false.\n\n```javascript\ndiva.addEventListener(\n  \"click\",\n  function () {\n    console.log(\"A:capture=true\");\n  },\n  true\n);\ndivb.addEventListener(\n  \"click\",\n  function () {\n    console.log(\"B:capture=true\");\n  },\n  true\n);\ndivc.addEventListener(\n  \"click\",\n  function () {\n    console.log(\"C:capture=true\");\n  },\n  true\n);\n//   默认false\ndiva.addEventListener(\"click\", function () {\n  console.log(\"A:capture=false\");\n});\ndivb.addEventListener(\"click\", function () {\n  console.log(\"B:capture=false\");\n});\ndivc.addEventListener(\"click\", function () {\n  console.log(\"C:capture=false\");\n});\n```\n\n我们再次点击 C,输出结果如下：\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110202341.png)\n看看，这里的结果表示同时出现了事件捕获与事件冒泡。\n<font color=\"green\">到了这里，想必大家对于事件的捕获与冒泡流程有了一定的了解吧。</font>下面我们再来聊聊 Event.stopPropagation()与 Event.preventDefault()\n\n## Event.stopPropagation()与 Event.preventDefault()\n\n#### Event.stopPropagation()\n\n###### 同样是上面的例子。我们给 A:capture=true（捕获阶段）的那个事件处理加上 stopPropagation().看看下面的输出：\n\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110202353.png)\n\n###### 只输出了捕获阶段的 A 处理函数，后面子节点的事件函数都没有触发。那我们在冒泡阶段添加这一行又会发生什么呢？下面将添加 stopPropagation 到 C 的冒泡处理函数里，即在 C:capture=false 里面。下面是输出结果：\n\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110210005.png)\n\n###### 同样的，事件捕获与事件冒泡流程被截断了。\n\n##### 看到这里，想必明白了吧，stopPropagation 就好比一把‘刀’，你把它添加到什么阶段，那么这个阶段后面的就会被截去。\n\n- 而整个流程是：\n\n###### 事件捕获到事件冒泡\n\n###### 父节点到 EventTarget 节点再到父节点\n\n#### Event.preventDefault()\n\n那把上面的改成 preventDefault 又会是怎样的结果呢？那就试试看咯：\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110202356.png)\n没有影响！！！preventDefault 在没有对事件捕获产生影响，那冒泡阶段呢？也没有影响。所以 preventDefault 只是单纯的阻止了 html 元素的默认事件，比如一个 a 标签能够跳转链接，加上 preventDefault 后就不能跳转了。\n\n## 总结\n\n###### 我们可以看到，可以使用 stopPropagation 阻止事件的冒泡。通常我们在给 html 元素添加事件时，一般都会使用 capture 的默认值：false,这样就只会在冒泡阶段触发事件处理函数，这样通常我们只需要在 capture 为 false 的情况下，给 EventTarget 元素添加 stopPropagation 就行了，这样，无论在捕获阶段还是在冒泡阶段都只会触发 EventTarget 的事件处理函数，从而减少不必要的副作用。\n\n参考：[JavaScript eventing deep dive](https://web.dev/eventing-deepdive/)\n","slug":"对javaScript事件冒泡与事件捕获的再学习","published":1,"updated":"2022-04-30T02:34:44.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3itto7r000f9ov75vmp02ei","content":"<h1 id=\"对-javaScript-事件冒泡与事件捕获的再学习\"><a href=\"#对-javaScript-事件冒泡与事件捕获的再学习\" class=\"headerlink\" title=\"对 javaScript 事件冒泡与事件捕获的再学习\"></a>对 javaScript 事件冒泡与事件捕获的再学习</h1><h2 id=\"DOM-树结构\"><a href=\"#DOM-树结构\" class=\"headerlink\" title=\"DOM 树结构\"></a>DOM 树结构</h2><p>我们在浏览器上会看见一颗 dom 树，这样的树状结构决定了事件的冒泡与捕获。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello Github Action<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;out-A&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;out-B&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;out-C&quot;</span>&gt;</span>hello, I&#x27;am C<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"事件捕获与事件冒泡流程\"><a href=\"#事件捕获与事件冒泡流程\" class=\"headerlink\" title=\"事件捕获与事件冒泡流程\"></a>事件捕获与事件冒泡流程</h2><p><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/bubbling-capturing.png\" alt=\"事件冒泡与捕获\"></p>\n<h4 id=\"首先，事件冒泡捕获建立在父子节点绑定了相同类型的事件。比如：都绑定了-onclick-点击事件。\"><a href=\"#首先，事件冒泡捕获建立在父子节点绑定了相同类型的事件。比如：都绑定了-onclick-点击事件。\" class=\"headerlink\" title=\"首先，事件冒泡捕获建立在父子节点绑定了相同类型的事件。比如：都绑定了 onclick 点击事件。\"></a>首先，事件冒泡捕获建立在父子节点绑定了相同类型的事件。比如：都绑定了 onclick 点击事件。</h4><h5 id=\"1-当我们点击最里面的-div-标签时，\"><a href=\"#1-当我们点击最里面的-div-标签时，\" class=\"headerlink\" title=\"1.当我们点击最里面的 div 标签时，\"></a>1.当我们点击最里面的 div 标签时，</h5><p>会先沿着 window-&gt;document-&gt;parentNodes-&gt;EventTarget 路线进行事件捕获，在捕获时会进行对每个 html 对象询问是否绑定了该事件的 listener,如果有则执行它。而事件冒泡则与上面路线相反，但询问行为相同。 ######一般我们给 html 元素添加事件时，会使用 HTMLElement.addEventListener(type, listener, useCapture)给其添加事件处理函数，这里的参数详见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener\">EventTarget.addEventListener</a>。需要特别说明的是第三个参数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useCapture:boolean</span><br><span class=\"line\"></span><br><span class=\"line\">OR</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">capture</span>:boolean,</span><br><span class=\"line\">\t<span class=\"attr\">once</span>:boolean,</span><br><span class=\"line\">\t<span class=\"attr\">passive</span>:boolean</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的 useCapture 以及 capture 就是设置该事件 listener 是否会在捕获阶段触发，默认为 false。</p>\n<h5 id=\"2-我们以如下例子为例：\"><a href=\"#2-我们以如下例子为例：\" class=\"headerlink\" title=\"2.我们以如下例子为例：\"></a>2.我们以如下例子为例：</h5><h6 id=\"这里绘制一个三层嵌套的-div，并给它们添加点击事件。\"><a href=\"#这里绘制一个三层嵌套的-div，并给它们添加点击事件。\" class=\"headerlink\" title=\"这里绘制一个三层嵌套的 div，并给它们添加点击事件。\"></a>这里绘制一个三层嵌套的 div，并给它们添加点击事件。</h6><p><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/div.png\" alt=\"div\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> diva = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.out-A&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> divb = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.out-B&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> divc = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.out-C&quot;</span>);</span><br><span class=\"line\">diva.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">divb.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">divc.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后我们点击 C,出现如下结果：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/output.png\" alt=\"output\"><br>可以看见点击 C 后出现了 C-&gt;B-&gt;A 的输出顺序，为什么会出现 CBA 的输出顺序呢，因为我们在添加事件时，使用了 capture 的默认值 false,即在事件捕获阶段不会触发事件处理函数。</p>\n<h6 id=\"将-capture-的值设置为-true\"><a href=\"#将-capture-的值设置为-true\" class=\"headerlink\" title=\"将 capture 的值设置为 true\"></a>将 capture 的值设置为 true</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diva.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">&quot;click&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">);</span><br><span class=\"line\">divb.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">&quot;click&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">);</span><br><span class=\"line\">divc.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">&quot;click&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110202333.png\"><br>这里可以看见输出结果变为了 ABC，这就是从父节点到 EventTarget 节点的捕获。同时我们也可以发现，如果只给节点添加一个事件处理，这样只会进行捕获或者冒泡。所以下面我们给一个节点添加两个 click 事件，并且把其中一个的 capture 设置为 true,另一个为 false.</p>\n<h6 id=\"给一个节点添加两个-click-事件，并且把其中一个的-capture-设置为-true-另一个为-false\"><a href=\"#给一个节点添加两个-click-事件，并且把其中一个的-capture-设置为-true-另一个为-false\" class=\"headerlink\" title=\"给一个节点添加两个 click 事件，并且把其中一个的 capture 设置为 true,另一个为 false.\"></a>给一个节点添加两个 click 事件，并且把其中一个的 capture 设置为 true,另一个为 false.</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diva.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">&quot;click&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;A:capture=true&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">);</span><br><span class=\"line\">divb.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">&quot;click&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;B:capture=true&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">);</span><br><span class=\"line\">divc.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">&quot;click&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;C:capture=true&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">//   默认false</span></span><br><span class=\"line\">diva.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;A:capture=false&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">divb.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;B:capture=false&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">divc.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;C:capture=false&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>我们再次点击 C,输出结果如下：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110202341.png\"><br>看看，这里的结果表示同时出现了事件捕获与事件冒泡。<br><font color=\"green\">到了这里，想必大家对于事件的捕获与冒泡流程有了一定的了解吧。</font>下面我们再来聊聊 Event.stopPropagation()与 Event.preventDefault()</p>\n<h2 id=\"Event-stopPropagation-与-Event-preventDefault\"><a href=\"#Event-stopPropagation-与-Event-preventDefault\" class=\"headerlink\" title=\"Event.stopPropagation()与 Event.preventDefault()\"></a>Event.stopPropagation()与 Event.preventDefault()</h2><h4 id=\"Event-stopPropagation\"><a href=\"#Event-stopPropagation\" class=\"headerlink\" title=\"Event.stopPropagation()\"></a>Event.stopPropagation()</h4><h6 id=\"同样是上面的例子。我们给-A-capture-true（捕获阶段）的那个事件处理加上-stopPropagation-看看下面的输出：\"><a href=\"#同样是上面的例子。我们给-A-capture-true（捕获阶段）的那个事件处理加上-stopPropagation-看看下面的输出：\" class=\"headerlink\" title=\"同样是上面的例子。我们给 A:capture=true（捕获阶段）的那个事件处理加上 stopPropagation().看看下面的输出：\"></a>同样是上面的例子。我们给 A:capture=true（捕获阶段）的那个事件处理加上 stopPropagation().看看下面的输出：</h6><p><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110202353.png\"></p>\n<h6 id=\"只输出了捕获阶段的-A-处理函数，后面子节点的事件函数都没有触发。那我们在冒泡阶段添加这一行又会发生什么呢？下面将添加-stopPropagation-到-C-的冒泡处理函数里，即在-C-capture-false-里面。下面是输出结果：\"><a href=\"#只输出了捕获阶段的-A-处理函数，后面子节点的事件函数都没有触发。那我们在冒泡阶段添加这一行又会发生什么呢？下面将添加-stopPropagation-到-C-的冒泡处理函数里，即在-C-capture-false-里面。下面是输出结果：\" class=\"headerlink\" title=\"只输出了捕获阶段的 A 处理函数，后面子节点的事件函数都没有触发。那我们在冒泡阶段添加这一行又会发生什么呢？下面将添加 stopPropagation 到 C 的冒泡处理函数里，即在 C:capture=false 里面。下面是输出结果：\"></a>只输出了捕获阶段的 A 处理函数，后面子节点的事件函数都没有触发。那我们在冒泡阶段添加这一行又会发生什么呢？下面将添加 stopPropagation 到 C 的冒泡处理函数里，即在 C:capture=false 里面。下面是输出结果：</h6><p><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110210005.png\"></p>\n<h6 id=\"同样的，事件捕获与事件冒泡流程被截断了。\"><a href=\"#同样的，事件捕获与事件冒泡流程被截断了。\" class=\"headerlink\" title=\"同样的，事件捕获与事件冒泡流程被截断了。\"></a>同样的，事件捕获与事件冒泡流程被截断了。</h6><h5 id=\"看到这里，想必明白了吧，stopPropagation-就好比一把‘刀’，你把它添加到什么阶段，那么这个阶段后面的就会被截去。\"><a href=\"#看到这里，想必明白了吧，stopPropagation-就好比一把‘刀’，你把它添加到什么阶段，那么这个阶段后面的就会被截去。\" class=\"headerlink\" title=\"看到这里，想必明白了吧，stopPropagation 就好比一把‘刀’，你把它添加到什么阶段，那么这个阶段后面的就会被截去。\"></a>看到这里，想必明白了吧，stopPropagation 就好比一把‘刀’，你把它添加到什么阶段，那么这个阶段后面的就会被截去。</h5><ul>\n<li>而整个流程是：</li>\n</ul>\n<h6 id=\"事件捕获到事件冒泡\"><a href=\"#事件捕获到事件冒泡\" class=\"headerlink\" title=\"事件捕获到事件冒泡\"></a>事件捕获到事件冒泡</h6><h6 id=\"父节点到-EventTarget-节点再到父节点\"><a href=\"#父节点到-EventTarget-节点再到父节点\" class=\"headerlink\" title=\"父节点到 EventTarget 节点再到父节点\"></a>父节点到 EventTarget 节点再到父节点</h6><h4 id=\"Event-preventDefault\"><a href=\"#Event-preventDefault\" class=\"headerlink\" title=\"Event.preventDefault()\"></a>Event.preventDefault()</h4><p>那把上面的改成 preventDefault 又会是怎样的结果呢？那就试试看咯：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110202356.png\"><br>没有影响！！！preventDefault 在没有对事件捕获产生影响，那冒泡阶段呢？也没有影响。所以 preventDefault 只是单纯的阻止了 html 元素的默认事件，比如一个 a 标签能够跳转链接，加上 preventDefault 后就不能跳转了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h6 id=\"我们可以看到，可以使用-stopPropagation-阻止事件的冒泡。通常我们在给-html-元素添加事件时，一般都会使用-capture-的默认值：false-这样就只会在冒泡阶段触发事件处理函数，这样通常我们只需要在-capture-为-false-的情况下，给-EventTarget-元素添加-stopPropagation-就行了，这样，无论在捕获阶段还是在冒泡阶段都只会触发-EventTarget-的事件处理函数，从而减少不必要的副作用。\"><a href=\"#我们可以看到，可以使用-stopPropagation-阻止事件的冒泡。通常我们在给-html-元素添加事件时，一般都会使用-capture-的默认值：false-这样就只会在冒泡阶段触发事件处理函数，这样通常我们只需要在-capture-为-false-的情况下，给-EventTarget-元素添加-stopPropagation-就行了，这样，无论在捕获阶段还是在冒泡阶段都只会触发-EventTarget-的事件处理函数，从而减少不必要的副作用。\" class=\"headerlink\" title=\"我们可以看到，可以使用 stopPropagation 阻止事件的冒泡。通常我们在给 html 元素添加事件时，一般都会使用 capture 的默认值：false,这样就只会在冒泡阶段触发事件处理函数，这样通常我们只需要在 capture 为 false 的情况下，给 EventTarget 元素添加 stopPropagation 就行了，这样，无论在捕获阶段还是在冒泡阶段都只会触发 EventTarget 的事件处理函数，从而减少不必要的副作用。\"></a>我们可以看到，可以使用 stopPropagation 阻止事件的冒泡。通常我们在给 html 元素添加事件时，一般都会使用 capture 的默认值：false,这样就只会在冒泡阶段触发事件处理函数，这样通常我们只需要在 capture 为 false 的情况下，给 EventTarget 元素添加 stopPropagation 就行了，这样，无论在捕获阶段还是在冒泡阶段都只会触发 EventTarget 的事件处理函数，从而减少不必要的副作用。</h6><p>参考：<a href=\"https://web.dev/eventing-deepdive/\">JavaScript eventing deep dive</a></p>\n","site":{"data":{"linklist":[{"nickname":"ZCW","avatar":"http://sherry.formeky.xyz:8090/upload/2021/09/QQ%E5%9B%BE%E7%89%8720210629151630-d1748408bc4d4d3b995abaf38440b71d.jpg","site":"http://sherry.formeky.xyz:8090/","descp":"后端工程师"},{"nickname":"LJC","site":"https://lengthmin.me/","descp":"这大概就是大佬吧","avatar":"https://lengthmin.me/images/avatar.png"}]}},"length":3868,"excerpt":"<h1 id=\"对-javaScript-事件冒泡与事件捕获的再学习\"><a href=\"#对-javaScript-事件冒泡与事件捕获的再学习\" class=\"headerlink\" title=\"对 javaScript 事件冒泡与事件捕获的再学习\"></a>对 javaScript 事件冒泡与事件捕获的再学习</h1><h2 id=\"DOM-树结构\"><a href=\"#DOM-树结构\" class=\"headerlink\" title=\"DOM 树结构\"></a>DOM 树结构</h2><p>我们在浏览器上会看见一颗 dom 树，这样的树状结构决定了事件的冒泡与捕获。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello Github Action<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;out-A&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;out-B&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;out-C&quot;</span>&gt;</span>hello, I&#x27;am C<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","more":"<h2 id=\"事件捕获与事件冒泡流程\"><a href=\"#事件捕获与事件冒泡流程\" class=\"headerlink\" title=\"事件捕获与事件冒泡流程\"></a>事件捕获与事件冒泡流程</h2><p><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/bubbling-capturing.png\" alt=\"事件冒泡与捕获\"></p>\n<h4 id=\"首先，事件冒泡捕获建立在父子节点绑定了相同类型的事件。比如：都绑定了-onclick-点击事件。\"><a href=\"#首先，事件冒泡捕获建立在父子节点绑定了相同类型的事件。比如：都绑定了-onclick-点击事件。\" class=\"headerlink\" title=\"首先，事件冒泡捕获建立在父子节点绑定了相同类型的事件。比如：都绑定了 onclick 点击事件。\"></a>首先，事件冒泡捕获建立在父子节点绑定了相同类型的事件。比如：都绑定了 onclick 点击事件。</h4><h5 id=\"1-当我们点击最里面的-div-标签时，\"><a href=\"#1-当我们点击最里面的-div-标签时，\" class=\"headerlink\" title=\"1.当我们点击最里面的 div 标签时，\"></a>1.当我们点击最里面的 div 标签时，</h5><p>会先沿着 window-&gt;document-&gt;parentNodes-&gt;EventTarget 路线进行事件捕获，在捕获时会进行对每个 html 对象询问是否绑定了该事件的 listener,如果有则执行它。而事件冒泡则与上面路线相反，但询问行为相同。 ######一般我们给 html 元素添加事件时，会使用 HTMLElement.addEventListener(type, listener, useCapture)给其添加事件处理函数，这里的参数详见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener\">EventTarget.addEventListener</a>。需要特别说明的是第三个参数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useCapture:boolean</span><br><span class=\"line\"></span><br><span class=\"line\">OR</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">capture</span>:boolean,</span><br><span class=\"line\">\t<span class=\"attr\">once</span>:boolean,</span><br><span class=\"line\">\t<span class=\"attr\">passive</span>:boolean</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的 useCapture 以及 capture 就是设置该事件 listener 是否会在捕获阶段触发，默认为 false。</p>\n<h5 id=\"2-我们以如下例子为例：\"><a href=\"#2-我们以如下例子为例：\" class=\"headerlink\" title=\"2.我们以如下例子为例：\"></a>2.我们以如下例子为例：</h5><h6 id=\"这里绘制一个三层嵌套的-div，并给它们添加点击事件。\"><a href=\"#这里绘制一个三层嵌套的-div，并给它们添加点击事件。\" class=\"headerlink\" title=\"这里绘制一个三层嵌套的 div，并给它们添加点击事件。\"></a>这里绘制一个三层嵌套的 div，并给它们添加点击事件。</h6><p><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/div.png\" alt=\"div\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> diva = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.out-A&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> divb = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.out-B&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> divc = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.out-C&quot;</span>);</span><br><span class=\"line\">diva.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">divb.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">divc.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后我们点击 C,出现如下结果：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/output.png\" alt=\"output\"><br>可以看见点击 C 后出现了 C-&gt;B-&gt;A 的输出顺序，为什么会出现 CBA 的输出顺序呢，因为我们在添加事件时，使用了 capture 的默认值 false,即在事件捕获阶段不会触发事件处理函数。</p>\n<h6 id=\"将-capture-的值设置为-true\"><a href=\"#将-capture-的值设置为-true\" class=\"headerlink\" title=\"将 capture 的值设置为 true\"></a>将 capture 的值设置为 true</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diva.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">&quot;click&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">);</span><br><span class=\"line\">divb.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">&quot;click&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">);</span><br><span class=\"line\">divc.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">&quot;click&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110202333.png\"><br>这里可以看见输出结果变为了 ABC，这就是从父节点到 EventTarget 节点的捕获。同时我们也可以发现，如果只给节点添加一个事件处理，这样只会进行捕获或者冒泡。所以下面我们给一个节点添加两个 click 事件，并且把其中一个的 capture 设置为 true,另一个为 false.</p>\n<h6 id=\"给一个节点添加两个-click-事件，并且把其中一个的-capture-设置为-true-另一个为-false\"><a href=\"#给一个节点添加两个-click-事件，并且把其中一个的-capture-设置为-true-另一个为-false\" class=\"headerlink\" title=\"给一个节点添加两个 click 事件，并且把其中一个的 capture 设置为 true,另一个为 false.\"></a>给一个节点添加两个 click 事件，并且把其中一个的 capture 设置为 true,另一个为 false.</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diva.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">&quot;click&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;A:capture=true&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">);</span><br><span class=\"line\">divb.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">&quot;click&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;B:capture=true&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">);</span><br><span class=\"line\">divc.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">&quot;click&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;C:capture=true&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">//   默认false</span></span><br><span class=\"line\">diva.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;A:capture=false&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">divb.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;B:capture=false&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">divc.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;C:capture=false&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>我们再次点击 C,输出结果如下：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110202341.png\"><br>看看，这里的结果表示同时出现了事件捕获与事件冒泡。<br><font color=\"green\">到了这里，想必大家对于事件的捕获与冒泡流程有了一定的了解吧。</font>下面我们再来聊聊 Event.stopPropagation()与 Event.preventDefault()</p>\n<h2 id=\"Event-stopPropagation-与-Event-preventDefault\"><a href=\"#Event-stopPropagation-与-Event-preventDefault\" class=\"headerlink\" title=\"Event.stopPropagation()与 Event.preventDefault()\"></a>Event.stopPropagation()与 Event.preventDefault()</h2><h4 id=\"Event-stopPropagation\"><a href=\"#Event-stopPropagation\" class=\"headerlink\" title=\"Event.stopPropagation()\"></a>Event.stopPropagation()</h4><h6 id=\"同样是上面的例子。我们给-A-capture-true（捕获阶段）的那个事件处理加上-stopPropagation-看看下面的输出：\"><a href=\"#同样是上面的例子。我们给-A-capture-true（捕获阶段）的那个事件处理加上-stopPropagation-看看下面的输出：\" class=\"headerlink\" title=\"同样是上面的例子。我们给 A:capture=true（捕获阶段）的那个事件处理加上 stopPropagation().看看下面的输出：\"></a>同样是上面的例子。我们给 A:capture=true（捕获阶段）的那个事件处理加上 stopPropagation().看看下面的输出：</h6><p><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110202353.png\"></p>\n<h6 id=\"只输出了捕获阶段的-A-处理函数，后面子节点的事件函数都没有触发。那我们在冒泡阶段添加这一行又会发生什么呢？下面将添加-stopPropagation-到-C-的冒泡处理函数里，即在-C-capture-false-里面。下面是输出结果：\"><a href=\"#只输出了捕获阶段的-A-处理函数，后面子节点的事件函数都没有触发。那我们在冒泡阶段添加这一行又会发生什么呢？下面将添加-stopPropagation-到-C-的冒泡处理函数里，即在-C-capture-false-里面。下面是输出结果：\" class=\"headerlink\" title=\"只输出了捕获阶段的 A 处理函数，后面子节点的事件函数都没有触发。那我们在冒泡阶段添加这一行又会发生什么呢？下面将添加 stopPropagation 到 C 的冒泡处理函数里，即在 C:capture=false 里面。下面是输出结果：\"></a>只输出了捕获阶段的 A 处理函数，后面子节点的事件函数都没有触发。那我们在冒泡阶段添加这一行又会发生什么呢？下面将添加 stopPropagation 到 C 的冒泡处理函数里，即在 C:capture=false 里面。下面是输出结果：</h6><p><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110210005.png\"></p>\n<h6 id=\"同样的，事件捕获与事件冒泡流程被截断了。\"><a href=\"#同样的，事件捕获与事件冒泡流程被截断了。\" class=\"headerlink\" title=\"同样的，事件捕获与事件冒泡流程被截断了。\"></a>同样的，事件捕获与事件冒泡流程被截断了。</h6><h5 id=\"看到这里，想必明白了吧，stopPropagation-就好比一把‘刀’，你把它添加到什么阶段，那么这个阶段后面的就会被截去。\"><a href=\"#看到这里，想必明白了吧，stopPropagation-就好比一把‘刀’，你把它添加到什么阶段，那么这个阶段后面的就会被截去。\" class=\"headerlink\" title=\"看到这里，想必明白了吧，stopPropagation 就好比一把‘刀’，你把它添加到什么阶段，那么这个阶段后面的就会被截去。\"></a>看到这里，想必明白了吧，stopPropagation 就好比一把‘刀’，你把它添加到什么阶段，那么这个阶段后面的就会被截去。</h5><ul>\n<li>而整个流程是：</li>\n</ul>\n<h6 id=\"事件捕获到事件冒泡\"><a href=\"#事件捕获到事件冒泡\" class=\"headerlink\" title=\"事件捕获到事件冒泡\"></a>事件捕获到事件冒泡</h6><h6 id=\"父节点到-EventTarget-节点再到父节点\"><a href=\"#父节点到-EventTarget-节点再到父节点\" class=\"headerlink\" title=\"父节点到 EventTarget 节点再到父节点\"></a>父节点到 EventTarget 节点再到父节点</h6><h4 id=\"Event-preventDefault\"><a href=\"#Event-preventDefault\" class=\"headerlink\" title=\"Event.preventDefault()\"></a>Event.preventDefault()</h4><p>那把上面的改成 preventDefault 又会是怎样的结果呢？那就试试看咯：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202110202356.png\"><br>没有影响！！！preventDefault 在没有对事件捕获产生影响，那冒泡阶段呢？也没有影响。所以 preventDefault 只是单纯的阻止了 html 元素的默认事件，比如一个 a 标签能够跳转链接，加上 preventDefault 后就不能跳转了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h6 id=\"我们可以看到，可以使用-stopPropagation-阻止事件的冒泡。通常我们在给-html-元素添加事件时，一般都会使用-capture-的默认值：false-这样就只会在冒泡阶段触发事件处理函数，这样通常我们只需要在-capture-为-false-的情况下，给-EventTarget-元素添加-stopPropagation-就行了，这样，无论在捕获阶段还是在冒泡阶段都只会触发-EventTarget-的事件处理函数，从而减少不必要的副作用。\"><a href=\"#我们可以看到，可以使用-stopPropagation-阻止事件的冒泡。通常我们在给-html-元素添加事件时，一般都会使用-capture-的默认值：false-这样就只会在冒泡阶段触发事件处理函数，这样通常我们只需要在-capture-为-false-的情况下，给-EventTarget-元素添加-stopPropagation-就行了，这样，无论在捕获阶段还是在冒泡阶段都只会触发-EventTarget-的事件处理函数，从而减少不必要的副作用。\" class=\"headerlink\" title=\"我们可以看到，可以使用 stopPropagation 阻止事件的冒泡。通常我们在给 html 元素添加事件时，一般都会使用 capture 的默认值：false,这样就只会在冒泡阶段触发事件处理函数，这样通常我们只需要在 capture 为 false 的情况下，给 EventTarget 元素添加 stopPropagation 就行了，这样，无论在捕获阶段还是在冒泡阶段都只会触发 EventTarget 的事件处理函数，从而减少不必要的副作用。\"></a>我们可以看到，可以使用 stopPropagation 阻止事件的冒泡。通常我们在给 html 元素添加事件时，一般都会使用 capture 的默认值：false,这样就只会在冒泡阶段触发事件处理函数，这样通常我们只需要在 capture 为 false 的情况下，给 EventTarget 元素添加 stopPropagation 就行了，这样，无论在捕获阶段还是在冒泡阶段都只会触发 EventTarget 的事件处理函数，从而减少不必要的副作用。</h6><p>参考：<a href=\"https://web.dev/eventing-deepdive/\">JavaScript eventing deep dive</a></p>"},{"title":"谈谈cookie、session与token(jwt)","date":"2021-12-07T14:04:05.000Z","_content":"\n**首先呢，网上关于它们的文章已经很多了，在这里我就只是来记录以下我的理解，其实也是看其他网上内容的一个总结吧。**\n\n> **前言：由于 HTTP 协议无状态的缺陷。WEB 的设计者们提出了 Cookie 和 Session 两种解决机制。而 token,通常是 jwt(json web token)作为一种用户身份令牌，也常常用于记录 http 的状态存储，通常是在用户登录后，伴随每一次请求发送给给后端。下面就来聊聊它们。**\n\n <!--more-->\n\n### cookie\n\n#### 概念\n\nCookie 是一段不超过 4KB 的小型文本数据，由一个名称（Name）、一个值（Value）和其它几个用于控制 Cookie 有效期、安全性、使用范围的可选属性组成。\n包括：\n\n1. Name/Value：设置 Cookie 的名称及相对应的值，对于认证 Cookie，Value 值包括 Web 服务器所提供的访问令牌。\n2. Expires 属性：设置 Cookie 的生存期。有两种存储类型的 Cookie：会话性与持久性。Expires 属性缺省时，为会话性 Cookie，仅保存在客户端内存中，并在用户关闭浏览器时失效；持久性 Cookie 会保存在用户的硬盘中，直至生存期到或用户直接在网页中单击“注销”等按钮结束会话时才会失效。\n3. Domain 属性：指定了可以访问该 Cookie 的 Web 站点或域。Cookie 机制并未遵循严格的同源策略，允许一个子域（域名前缀不同）可以设置或获取其父域的 Cookie。\n4. Secure 属性：指定是否使用 HTTPS 安全协议发送 Cookie。\n5. Path 属性：定义了 Web 站点上可以访问该 Cookie 的目录。\n6. HTTPOnly 属性 ：用于防止客户端脚本通过 document.cookie 属性访问 Cookie，有助于保护 Cookie 不被跨站脚本攻击窃取或篡改。但是，HTTPOnly 的应用仍存在局限性，一些浏览器可以阻止客户端脚本对 Cookie 的读操作，但允许写操作；此外大多数浏览器仍允许通过 XMLHTTP 对象读取 HTTP 响应中的 Set-Cookie 头。\n   **好了，以上内容是来自百度百科。简单地做个总结：cookie 是一种存储在客户端的小型文本数据，里面的类容有键值对、生存周期、访问域、是否使用 http,web 站点可访问 cookie 的目录以及是否允许客户端读取 cookie。**\n\n#### 安全性\n\n**XSRF/CSRF（跨站请求伪造）**：利用的是 web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器,却不能保证请求本身是用户自愿发出的。这里有一些如 Firefox、Opera 等浏览器使用单进程机制，**多个窗口或标签使用同一个进程，共享 Cookie 等会话数据**。IE 则混合使用单进程与多进程模式，一个窗口中的多个标签，以及使用“CTRL+N” 或单击网页中的链接打开的新窗口使用同一进程，共享会话数据；只有直接运行 IE 可执行程序打开窗口时，才会创建新的进程。**Chrome 虽然使用多进程机制，然而经测试发现，其不同的窗口或标签之间仍会共享会话数据，除非使用隐身访问方式。**因而，用户同时打开多个浏览器窗口或标签访问互联网资源时，就为 CSRF 攻击篡夺用户的会话 Cookie 创造了条件。却不能保证请求本身是用户自愿发出的。其最典型的例子**就是当 cookie 还没过期时，用户浏览的网站有与其没过期的网站的一些 api 请求，那么当用户浏览这个恶意网站时就可能会受到危害**。\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202112161949.png)\n**会话定置(Session Fixation)攻击**是指，攻击者向受害者主机注入自己控制的认证 Cookie 等信息，使得受害者以攻击者的身份登录网站，从而窃取受害者的会话信息。注入 Cookie 的方法包括：使用跨站脚本或木马等恶意程序；或伪造与合法网站同域的站点，并利用各种方法欺骗用户访问该仿冒网站，从而通过 HTTP 响应中的 Set-Cookie 头将攻击者拥有的该域 Cookie 发送给用户等。因为 sessionID 一般都会放在 cookie 中存储，所以会容易受到会话定制攻击。\n\n### Session\n\n#### 概念\n\n与 cookie 相比，session 就是存放在服务端了，它表示在客户端登录时，服务端会发放一个 sessionid 到客户端，它一般存在 cookie 中，所以客户端以后的请求就会在请求头的 cookies 字段中携带这个信息。这样服务端就可以通过这个数据判断客户端的登录状态。这就好比我们去点菜，点好了后商家给我们一个号码牌，等菜好了，就送往相应号码牌的位置。\n\n#### 安全性\n\n因为 session 是放在服务器上的，所以一般的安全性就考虑 sessionid 的伪造与截获。如果 sessionid 是放在 cookie 中的，那么 cookie 的时效就决定了 sessionid 即登录状态的时效。\n需要注意的就是会话固定（session fixation)：意思是攻击者先自己获取一个 sessionid,然后假冒一个网站并将连接发给被攻击的人，当受害者登录后，攻击者就可以劫持受害人的会话。因为在攻击者登录获取 sessionid 后，网络服务器看到会话已经建立，无需创建新的会话。所以攻击者就成功地冒充了受害者，从而获取了受害者的信息。\n\n### Token（JWT）\n\n#### 概念：\n\nJSON Web Token (JWT) 是一种开放标准 (RFC 7519)，它定义了一种紧凑且自包含的方式，用于在各方之间作为 JSON 对象安全地传输信息。由于此信息经过数字签名，因此可以验证和信任。 JWT 可以使用秘密（使用 HMAC 算法）或使用 RSA 或 ECDSA 的公钥/私钥对进行签名。尽管 JWTs 可以被加密，以便在各方之间提供保密性，但我们将专注于签名的令牌。签名的令牌可以验证其中包含的索赔的完整性，而加密的令牌则对其他各方隐藏这些索赔。当令牌使用公钥/私钥对签名时，签名也证明了只有持有私钥的一方才是签名者。 - - - - https://jwt.io/introduction\n\n#### 组成：\n\n> 形如：xxxxx.yyyyy.zzzzz\n\n1. header：标头通常由两部分组成：令牌的类型，即 JWT，以及正在使用的签名算法，例如 HMAC SHA256 或 RSA。**然后，这个 JSON 被 Base64Url 编码以形成 JWT 的第一部分。**\n\n```javascript\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\n2. payload：包含一些声明， 声明是关于实体（通常是用户）和附加数据的声明。共有三种类型的 claims：注册负载、公共负载和私人负载。\n\n- Registered claims（注册）: 通常有四个部分，iss(issuer)，exp (expiration time), sub (subject), aud (audience)。还有一些其他的，比如：nbf (Not Before)、iat (Issued At)、jti (JWT ID)。\n  **iss（issuer）**：声明标识发行该证书的委托人。\n  **exp (expiration time)**：声明标识了过期时间或之后不得接受 JWT 进行处理\n  **sub (subject)**：JWT 的主题。 JWT 中的声明通常是声明，关于主题。主题值必须要么被限定为在发行人的上下文中是本地唯一的，或者是全球唯一的。\n  **aud (audience)**：声明标识了 JWT 的接收者。\n- Public claims（公共）：这些可以由使用 JWT 的人随意定义。但是为了避免冲突，它们应该在 [IANA JSON Web Token Registry](https://www.iana.org/assignments/jwt/jwt.xhtml) 中定义，或者定义为包含抗冲突命名空间的 URI。\n- Private claims（私有）：这些是为了在同意使用它们的各方之间共享信息而创建的自定义声明，这些声明既不是注册声明也不是公开声明。此声明的处理通常是**特定于应用程序**的。\n\n**然后，这个 JSON 被 Base64Url 编码以形成 JWT 的第二部分。**\n**这里，header 与 payload 都是可以直接通过 base64url 解码获得其 json 数据的。** 3. signature：签名，这是 jwt 最核心的部分，就是包含 base64 编码的 header,payload,以及 secret，最后再将整个使用加密算法进行加密。其中的 secret 就是服务端发放的私钥。\n\n> 形如：\n> HMACSHA256(\n> base64UrlEncode(header) + \".\" +\n> base64UrlEncode(payload),\n> secret\n> )\n\n#### 使用\n\n每当用户想要访问受保护的路由或资源时，用户代理应发送 JWT，通常在使用 Bearer 模式的 Authorization 标头中。标题的内容应如下所示：\n\n```javascript\nAuthorization: Bearer <token>\n```\n\n如果令牌在 Authorization 标头中发送，则跨源资源共享 (CORS) 不会成为问题，因为它不使用 cookie（cookie 是不能跨域的）。这一点就非常适合单点登录。\n\n#### 安全性\n\n因为在 jwt 签发的时候，密钥是服务端生成的，所以来说是比较安全的，当 payload 的数据修改后，发送给服务端，服务端会采用相同的加密算法生成一个 token 副本与之前签发的进行对比，显然，修改后的数据再次加密后与之前的 token 对比肯定不同。\n在 payload 中，因为是 base64url 编码的，所以很容易解码获取信息，因此不宜在里面放一些比较重要的信息。\n","source":"_posts/谈谈cookie、session与token-jwt.md","raw":"---\ntitle: 谈谈cookie、session与token(jwt)\ndate: 2021-12-07 22:04:05\ncategories: web\n---\n\n**首先呢，网上关于它们的文章已经很多了，在这里我就只是来记录以下我的理解，其实也是看其他网上内容的一个总结吧。**\n\n> **前言：由于 HTTP 协议无状态的缺陷。WEB 的设计者们提出了 Cookie 和 Session 两种解决机制。而 token,通常是 jwt(json web token)作为一种用户身份令牌，也常常用于记录 http 的状态存储，通常是在用户登录后，伴随每一次请求发送给给后端。下面就来聊聊它们。**\n\n <!--more-->\n\n### cookie\n\n#### 概念\n\nCookie 是一段不超过 4KB 的小型文本数据，由一个名称（Name）、一个值（Value）和其它几个用于控制 Cookie 有效期、安全性、使用范围的可选属性组成。\n包括：\n\n1. Name/Value：设置 Cookie 的名称及相对应的值，对于认证 Cookie，Value 值包括 Web 服务器所提供的访问令牌。\n2. Expires 属性：设置 Cookie 的生存期。有两种存储类型的 Cookie：会话性与持久性。Expires 属性缺省时，为会话性 Cookie，仅保存在客户端内存中，并在用户关闭浏览器时失效；持久性 Cookie 会保存在用户的硬盘中，直至生存期到或用户直接在网页中单击“注销”等按钮结束会话时才会失效。\n3. Domain 属性：指定了可以访问该 Cookie 的 Web 站点或域。Cookie 机制并未遵循严格的同源策略，允许一个子域（域名前缀不同）可以设置或获取其父域的 Cookie。\n4. Secure 属性：指定是否使用 HTTPS 安全协议发送 Cookie。\n5. Path 属性：定义了 Web 站点上可以访问该 Cookie 的目录。\n6. HTTPOnly 属性 ：用于防止客户端脚本通过 document.cookie 属性访问 Cookie，有助于保护 Cookie 不被跨站脚本攻击窃取或篡改。但是，HTTPOnly 的应用仍存在局限性，一些浏览器可以阻止客户端脚本对 Cookie 的读操作，但允许写操作；此外大多数浏览器仍允许通过 XMLHTTP 对象读取 HTTP 响应中的 Set-Cookie 头。\n   **好了，以上内容是来自百度百科。简单地做个总结：cookie 是一种存储在客户端的小型文本数据，里面的类容有键值对、生存周期、访问域、是否使用 http,web 站点可访问 cookie 的目录以及是否允许客户端读取 cookie。**\n\n#### 安全性\n\n**XSRF/CSRF（跨站请求伪造）**：利用的是 web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器,却不能保证请求本身是用户自愿发出的。这里有一些如 Firefox、Opera 等浏览器使用单进程机制，**多个窗口或标签使用同一个进程，共享 Cookie 等会话数据**。IE 则混合使用单进程与多进程模式，一个窗口中的多个标签，以及使用“CTRL+N” 或单击网页中的链接打开的新窗口使用同一进程，共享会话数据；只有直接运行 IE 可执行程序打开窗口时，才会创建新的进程。**Chrome 虽然使用多进程机制，然而经测试发现，其不同的窗口或标签之间仍会共享会话数据，除非使用隐身访问方式。**因而，用户同时打开多个浏览器窗口或标签访问互联网资源时，就为 CSRF 攻击篡夺用户的会话 Cookie 创造了条件。却不能保证请求本身是用户自愿发出的。其最典型的例子**就是当 cookie 还没过期时，用户浏览的网站有与其没过期的网站的一些 api 请求，那么当用户浏览这个恶意网站时就可能会受到危害**。\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202112161949.png)\n**会话定置(Session Fixation)攻击**是指，攻击者向受害者主机注入自己控制的认证 Cookie 等信息，使得受害者以攻击者的身份登录网站，从而窃取受害者的会话信息。注入 Cookie 的方法包括：使用跨站脚本或木马等恶意程序；或伪造与合法网站同域的站点，并利用各种方法欺骗用户访问该仿冒网站，从而通过 HTTP 响应中的 Set-Cookie 头将攻击者拥有的该域 Cookie 发送给用户等。因为 sessionID 一般都会放在 cookie 中存储，所以会容易受到会话定制攻击。\n\n### Session\n\n#### 概念\n\n与 cookie 相比，session 就是存放在服务端了，它表示在客户端登录时，服务端会发放一个 sessionid 到客户端，它一般存在 cookie 中，所以客户端以后的请求就会在请求头的 cookies 字段中携带这个信息。这样服务端就可以通过这个数据判断客户端的登录状态。这就好比我们去点菜，点好了后商家给我们一个号码牌，等菜好了，就送往相应号码牌的位置。\n\n#### 安全性\n\n因为 session 是放在服务器上的，所以一般的安全性就考虑 sessionid 的伪造与截获。如果 sessionid 是放在 cookie 中的，那么 cookie 的时效就决定了 sessionid 即登录状态的时效。\n需要注意的就是会话固定（session fixation)：意思是攻击者先自己获取一个 sessionid,然后假冒一个网站并将连接发给被攻击的人，当受害者登录后，攻击者就可以劫持受害人的会话。因为在攻击者登录获取 sessionid 后，网络服务器看到会话已经建立，无需创建新的会话。所以攻击者就成功地冒充了受害者，从而获取了受害者的信息。\n\n### Token（JWT）\n\n#### 概念：\n\nJSON Web Token (JWT) 是一种开放标准 (RFC 7519)，它定义了一种紧凑且自包含的方式，用于在各方之间作为 JSON 对象安全地传输信息。由于此信息经过数字签名，因此可以验证和信任。 JWT 可以使用秘密（使用 HMAC 算法）或使用 RSA 或 ECDSA 的公钥/私钥对进行签名。尽管 JWTs 可以被加密，以便在各方之间提供保密性，但我们将专注于签名的令牌。签名的令牌可以验证其中包含的索赔的完整性，而加密的令牌则对其他各方隐藏这些索赔。当令牌使用公钥/私钥对签名时，签名也证明了只有持有私钥的一方才是签名者。 - - - - https://jwt.io/introduction\n\n#### 组成：\n\n> 形如：xxxxx.yyyyy.zzzzz\n\n1. header：标头通常由两部分组成：令牌的类型，即 JWT，以及正在使用的签名算法，例如 HMAC SHA256 或 RSA。**然后，这个 JSON 被 Base64Url 编码以形成 JWT 的第一部分。**\n\n```javascript\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\n2. payload：包含一些声明， 声明是关于实体（通常是用户）和附加数据的声明。共有三种类型的 claims：注册负载、公共负载和私人负载。\n\n- Registered claims（注册）: 通常有四个部分，iss(issuer)，exp (expiration time), sub (subject), aud (audience)。还有一些其他的，比如：nbf (Not Before)、iat (Issued At)、jti (JWT ID)。\n  **iss（issuer）**：声明标识发行该证书的委托人。\n  **exp (expiration time)**：声明标识了过期时间或之后不得接受 JWT 进行处理\n  **sub (subject)**：JWT 的主题。 JWT 中的声明通常是声明，关于主题。主题值必须要么被限定为在发行人的上下文中是本地唯一的，或者是全球唯一的。\n  **aud (audience)**：声明标识了 JWT 的接收者。\n- Public claims（公共）：这些可以由使用 JWT 的人随意定义。但是为了避免冲突，它们应该在 [IANA JSON Web Token Registry](https://www.iana.org/assignments/jwt/jwt.xhtml) 中定义，或者定义为包含抗冲突命名空间的 URI。\n- Private claims（私有）：这些是为了在同意使用它们的各方之间共享信息而创建的自定义声明，这些声明既不是注册声明也不是公开声明。此声明的处理通常是**特定于应用程序**的。\n\n**然后，这个 JSON 被 Base64Url 编码以形成 JWT 的第二部分。**\n**这里，header 与 payload 都是可以直接通过 base64url 解码获得其 json 数据的。** 3. signature：签名，这是 jwt 最核心的部分，就是包含 base64 编码的 header,payload,以及 secret，最后再将整个使用加密算法进行加密。其中的 secret 就是服务端发放的私钥。\n\n> 形如：\n> HMACSHA256(\n> base64UrlEncode(header) + \".\" +\n> base64UrlEncode(payload),\n> secret\n> )\n\n#### 使用\n\n每当用户想要访问受保护的路由或资源时，用户代理应发送 JWT，通常在使用 Bearer 模式的 Authorization 标头中。标题的内容应如下所示：\n\n```javascript\nAuthorization: Bearer <token>\n```\n\n如果令牌在 Authorization 标头中发送，则跨源资源共享 (CORS) 不会成为问题，因为它不使用 cookie（cookie 是不能跨域的）。这一点就非常适合单点登录。\n\n#### 安全性\n\n因为在 jwt 签发的时候，密钥是服务端生成的，所以来说是比较安全的，当 payload 的数据修改后，发送给服务端，服务端会采用相同的加密算法生成一个 token 副本与之前签发的进行对比，显然，修改后的数据再次加密后与之前的 token 对比肯定不同。\n在 payload 中，因为是 base64url 编码的，所以很容易解码获取信息，因此不宜在里面放一些比较重要的信息。\n","slug":"谈谈cookie、session与token-jwt","published":1,"updated":"2022-04-30T02:34:44.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3itto7s000i9ov722w43h40","content":"<p><strong>首先呢，网上关于它们的文章已经很多了，在这里我就只是来记录以下我的理解，其实也是看其他网上内容的一个总结吧。</strong></p>\n<blockquote>\n<p><strong>前言：由于 HTTP 协议无状态的缺陷。WEB 的设计者们提出了 Cookie 和 Session 两种解决机制。而 token,通常是 jwt(json web token)作为一种用户身份令牌，也常常用于记录 http 的状态存储，通常是在用户登录后，伴随每一次请求发送给给后端。下面就来聊聊它们。</strong></p>\n</blockquote>\n <span id=\"more\"></span>\n\n<h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>Cookie 是一段不超过 4KB 的小型文本数据，由一个名称（Name）、一个值（Value）和其它几个用于控制 Cookie 有效期、安全性、使用范围的可选属性组成。<br>包括：</p>\n<ol>\n<li>Name/Value：设置 Cookie 的名称及相对应的值，对于认证 Cookie，Value 值包括 Web 服务器所提供的访问令牌。</li>\n<li>Expires 属性：设置 Cookie 的生存期。有两种存储类型的 Cookie：会话性与持久性。Expires 属性缺省时，为会话性 Cookie，仅保存在客户端内存中，并在用户关闭浏览器时失效；持久性 Cookie 会保存在用户的硬盘中，直至生存期到或用户直接在网页中单击“注销”等按钮结束会话时才会失效。</li>\n<li>Domain 属性：指定了可以访问该 Cookie 的 Web 站点或域。Cookie 机制并未遵循严格的同源策略，允许一个子域（域名前缀不同）可以设置或获取其父域的 Cookie。</li>\n<li>Secure 属性：指定是否使用 HTTPS 安全协议发送 Cookie。</li>\n<li>Path 属性：定义了 Web 站点上可以访问该 Cookie 的目录。</li>\n<li>HTTPOnly 属性 ：用于防止客户端脚本通过 document.cookie 属性访问 Cookie，有助于保护 Cookie 不被跨站脚本攻击窃取或篡改。但是，HTTPOnly 的应用仍存在局限性，一些浏览器可以阻止客户端脚本对 Cookie 的读操作，但允许写操作；此外大多数浏览器仍允许通过 XMLHTTP 对象读取 HTTP 响应中的 Set-Cookie 头。<br><strong>好了，以上内容是来自百度百科。简单地做个总结：cookie 是一种存储在客户端的小型文本数据，里面的类容有键值对、生存周期、访问域、是否使用 http,web 站点可访问 cookie 的目录以及是否允许客户端读取 cookie。</strong></li>\n</ol>\n<h4 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h4><p><strong>XSRF/CSRF（跨站请求伪造）</strong>：利用的是 web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器,却不能保证请求本身是用户自愿发出的。这里有一些如 Firefox、Opera 等浏览器使用单进程机制，<strong>多个窗口或标签使用同一个进程，共享 Cookie 等会话数据</strong>。IE 则混合使用单进程与多进程模式，一个窗口中的多个标签，以及使用“CTRL+N” 或单击网页中的链接打开的新窗口使用同一进程，共享会话数据；只有直接运行 IE 可执行程序打开窗口时，才会创建新的进程。<strong>Chrome 虽然使用多进程机制，然而经测试发现，其不同的窗口或标签之间仍会共享会话数据，除非使用隐身访问方式。</strong>因而，用户同时打开多个浏览器窗口或标签访问互联网资源时，就为 CSRF 攻击篡夺用户的会话 Cookie 创造了条件。却不能保证请求本身是用户自愿发出的。其最典型的例子<strong>就是当 cookie 还没过期时，用户浏览的网站有与其没过期的网站的一些 api 请求，那么当用户浏览这个恶意网站时就可能会受到危害</strong>。<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202112161949.png\"><br><strong>会话定置(Session Fixation)攻击</strong>是指，攻击者向受害者主机注入自己控制的认证 Cookie 等信息，使得受害者以攻击者的身份登录网站，从而窃取受害者的会话信息。注入 Cookie 的方法包括：使用跨站脚本或木马等恶意程序；或伪造与合法网站同域的站点，并利用各种方法欺骗用户访问该仿冒网站，从而通过 HTTP 响应中的 Set-Cookie 头将攻击者拥有的该域 Cookie 发送给用户等。因为 sessionID 一般都会放在 cookie 中存储，所以会容易受到会话定制攻击。</p>\n<h3 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h3><h4 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>与 cookie 相比，session 就是存放在服务端了，它表示在客户端登录时，服务端会发放一个 sessionid 到客户端，它一般存在 cookie 中，所以客户端以后的请求就会在请求头的 cookies 字段中携带这个信息。这样服务端就可以通过这个数据判断客户端的登录状态。这就好比我们去点菜，点好了后商家给我们一个号码牌，等菜好了，就送往相应号码牌的位置。</p>\n<h4 id=\"安全性-1\"><a href=\"#安全性-1\" class=\"headerlink\" title=\"安全性\"></a>安全性</h4><p>因为 session 是放在服务器上的，所以一般的安全性就考虑 sessionid 的伪造与截获。如果 sessionid 是放在 cookie 中的，那么 cookie 的时效就决定了 sessionid 即登录状态的时效。<br>需要注意的就是会话固定（session fixation)：意思是攻击者先自己获取一个 sessionid,然后假冒一个网站并将连接发给被攻击的人，当受害者登录后，攻击者就可以劫持受害人的会话。因为在攻击者登录获取 sessionid 后，网络服务器看到会话已经建立，无需创建新的会话。所以攻击者就成功地冒充了受害者，从而获取了受害者的信息。</p>\n<h3 id=\"Token（JWT）\"><a href=\"#Token（JWT）\" class=\"headerlink\" title=\"Token（JWT）\"></a>Token（JWT）</h3><h4 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h4><p>JSON Web Token (JWT) 是一种开放标准 (RFC 7519)，它定义了一种紧凑且自包含的方式，用于在各方之间作为 JSON 对象安全地传输信息。由于此信息经过数字签名，因此可以验证和信任。 JWT 可以使用秘密（使用 HMAC 算法）或使用 RSA 或 ECDSA 的公钥/私钥对进行签名。尽管 JWTs 可以被加密，以便在各方之间提供保密性，但我们将专注于签名的令牌。签名的令牌可以验证其中包含的索赔的完整性，而加密的令牌则对其他各方隐藏这些索赔。当令牌使用公钥/私钥对签名时，签名也证明了只有持有私钥的一方才是签名者。 - - - - <a href=\"https://jwt.io/introduction\">https://jwt.io/introduction</a></p>\n<h4 id=\"组成：\"><a href=\"#组成：\" class=\"headerlink\" title=\"组成：\"></a>组成：</h4><blockquote>\n<p>形如：xxxxx.yyyyy.zzzzz</p>\n</blockquote>\n<ol>\n<li>header：标头通常由两部分组成：令牌的类型，即 JWT，以及正在使用的签名算法，例如 HMAC SHA256 或 RSA。<strong>然后，这个 JSON 被 Base64Url 编码以形成 JWT 的第一部分。</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;alg&quot;</span>: <span class=\"string\">&quot;HS256&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;typ&quot;</span>: <span class=\"string\">&quot;JWT&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>payload：包含一些声明， 声明是关于实体（通常是用户）和附加数据的声明。共有三种类型的 claims：注册负载、公共负载和私人负载。</li>\n</ol>\n<ul>\n<li>Registered claims（注册）: 通常有四个部分，iss(issuer)，exp (expiration time), sub (subject), aud (audience)。还有一些其他的，比如：nbf (Not Before)、iat (Issued At)、jti (JWT ID)。<br><strong>iss（issuer）</strong>：声明标识发行该证书的委托人。<br>**exp (expiration time)**：声明标识了过期时间或之后不得接受 JWT 进行处理<br>**sub (subject)**：JWT 的主题。 JWT 中的声明通常是声明，关于主题。主题值必须要么被限定为在发行人的上下文中是本地唯一的，或者是全球唯一的。<br>**aud (audience)**：声明标识了 JWT 的接收者。</li>\n<li>Public claims（公共）：这些可以由使用 JWT 的人随意定义。但是为了避免冲突，它们应该在 <a href=\"https://www.iana.org/assignments/jwt/jwt.xhtml\">IANA JSON Web Token Registry</a> 中定义，或者定义为包含抗冲突命名空间的 URI。</li>\n<li>Private claims（私有）：这些是为了在同意使用它们的各方之间共享信息而创建的自定义声明，这些声明既不是注册声明也不是公开声明。此声明的处理通常是<strong>特定于应用程序</strong>的。</li>\n</ul>\n<p><strong>然后，这个 JSON 被 Base64Url 编码以形成 JWT 的第二部分。</strong><br><strong>这里，header 与 payload 都是可以直接通过 base64url 解码获得其 json 数据的。</strong> 3. signature：签名，这是 jwt 最核心的部分，就是包含 base64 编码的 header,payload,以及 secret，最后再将整个使用加密算法进行加密。其中的 secret 就是服务端发放的私钥。</p>\n<blockquote>\n<p>形如：<br>HMACSHA256(<br>base64UrlEncode(header) + “.” +<br>base64UrlEncode(payload),<br>secret<br>)</p>\n</blockquote>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>每当用户想要访问受保护的路由或资源时，用户代理应发送 JWT，通常在使用 Bearer 模式的 Authorization 标头中。标题的内容应如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果令牌在 Authorization 标头中发送，则跨源资源共享 (CORS) 不会成为问题，因为它不使用 cookie（cookie 是不能跨域的）。这一点就非常适合单点登录。</p>\n<h4 id=\"安全性-2\"><a href=\"#安全性-2\" class=\"headerlink\" title=\"安全性\"></a>安全性</h4><p>因为在 jwt 签发的时候，密钥是服务端生成的，所以来说是比较安全的，当 payload 的数据修改后，发送给服务端，服务端会采用相同的加密算法生成一个 token 副本与之前签发的进行对比，显然，修改后的数据再次加密后与之前的 token 对比肯定不同。<br>在 payload 中，因为是 base64url 编码的，所以很容易解码获取信息，因此不宜在里面放一些比较重要的信息。</p>\n","site":{"data":{"linklist":[{"nickname":"ZCW","avatar":"http://sherry.formeky.xyz:8090/upload/2021/09/QQ%E5%9B%BE%E7%89%8720210629151630-d1748408bc4d4d3b995abaf38440b71d.jpg","site":"http://sherry.formeky.xyz:8090/","descp":"后端工程师"},{"nickname":"LJC","site":"https://lengthmin.me/","descp":"这大概就是大佬吧","avatar":"https://lengthmin.me/images/avatar.png"}]}},"length":3732,"excerpt":"<p><strong>首先呢，网上关于它们的文章已经很多了，在这里我就只是来记录以下我的理解，其实也是看其他网上内容的一个总结吧。</strong></p>\n<blockquote>\n<p><strong>前言：由于 HTTP 协议无状态的缺陷。WEB 的设计者们提出了 Cookie 和 Session 两种解决机制。而 token,通常是 jwt(json web token)作为一种用户身份令牌，也常常用于记录 http 的状态存储，通常是在用户登录后，伴随每一次请求发送给给后端。下面就来聊聊它们。</strong></p>\n</blockquote>","more":"<h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>Cookie 是一段不超过 4KB 的小型文本数据，由一个名称（Name）、一个值（Value）和其它几个用于控制 Cookie 有效期、安全性、使用范围的可选属性组成。<br>包括：</p>\n<ol>\n<li>Name/Value：设置 Cookie 的名称及相对应的值，对于认证 Cookie，Value 值包括 Web 服务器所提供的访问令牌。</li>\n<li>Expires 属性：设置 Cookie 的生存期。有两种存储类型的 Cookie：会话性与持久性。Expires 属性缺省时，为会话性 Cookie，仅保存在客户端内存中，并在用户关闭浏览器时失效；持久性 Cookie 会保存在用户的硬盘中，直至生存期到或用户直接在网页中单击“注销”等按钮结束会话时才会失效。</li>\n<li>Domain 属性：指定了可以访问该 Cookie 的 Web 站点或域。Cookie 机制并未遵循严格的同源策略，允许一个子域（域名前缀不同）可以设置或获取其父域的 Cookie。</li>\n<li>Secure 属性：指定是否使用 HTTPS 安全协议发送 Cookie。</li>\n<li>Path 属性：定义了 Web 站点上可以访问该 Cookie 的目录。</li>\n<li>HTTPOnly 属性 ：用于防止客户端脚本通过 document.cookie 属性访问 Cookie，有助于保护 Cookie 不被跨站脚本攻击窃取或篡改。但是，HTTPOnly 的应用仍存在局限性，一些浏览器可以阻止客户端脚本对 Cookie 的读操作，但允许写操作；此外大多数浏览器仍允许通过 XMLHTTP 对象读取 HTTP 响应中的 Set-Cookie 头。<br><strong>好了，以上内容是来自百度百科。简单地做个总结：cookie 是一种存储在客户端的小型文本数据，里面的类容有键值对、生存周期、访问域、是否使用 http,web 站点可访问 cookie 的目录以及是否允许客户端读取 cookie。</strong></li>\n</ol>\n<h4 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h4><p><strong>XSRF/CSRF（跨站请求伪造）</strong>：利用的是 web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器,却不能保证请求本身是用户自愿发出的。这里有一些如 Firefox、Opera 等浏览器使用单进程机制，<strong>多个窗口或标签使用同一个进程，共享 Cookie 等会话数据</strong>。IE 则混合使用单进程与多进程模式，一个窗口中的多个标签，以及使用“CTRL+N” 或单击网页中的链接打开的新窗口使用同一进程，共享会话数据；只有直接运行 IE 可执行程序打开窗口时，才会创建新的进程。<strong>Chrome 虽然使用多进程机制，然而经测试发现，其不同的窗口或标签之间仍会共享会话数据，除非使用隐身访问方式。</strong>因而，用户同时打开多个浏览器窗口或标签访问互联网资源时，就为 CSRF 攻击篡夺用户的会话 Cookie 创造了条件。却不能保证请求本身是用户自愿发出的。其最典型的例子<strong>就是当 cookie 还没过期时，用户浏览的网站有与其没过期的网站的一些 api 请求，那么当用户浏览这个恶意网站时就可能会受到危害</strong>。<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202112161949.png\"><br><strong>会话定置(Session Fixation)攻击</strong>是指，攻击者向受害者主机注入自己控制的认证 Cookie 等信息，使得受害者以攻击者的身份登录网站，从而窃取受害者的会话信息。注入 Cookie 的方法包括：使用跨站脚本或木马等恶意程序；或伪造与合法网站同域的站点，并利用各种方法欺骗用户访问该仿冒网站，从而通过 HTTP 响应中的 Set-Cookie 头将攻击者拥有的该域 Cookie 发送给用户等。因为 sessionID 一般都会放在 cookie 中存储，所以会容易受到会话定制攻击。</p>\n<h3 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h3><h4 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>与 cookie 相比，session 就是存放在服务端了，它表示在客户端登录时，服务端会发放一个 sessionid 到客户端，它一般存在 cookie 中，所以客户端以后的请求就会在请求头的 cookies 字段中携带这个信息。这样服务端就可以通过这个数据判断客户端的登录状态。这就好比我们去点菜，点好了后商家给我们一个号码牌，等菜好了，就送往相应号码牌的位置。</p>\n<h4 id=\"安全性-1\"><a href=\"#安全性-1\" class=\"headerlink\" title=\"安全性\"></a>安全性</h4><p>因为 session 是放在服务器上的，所以一般的安全性就考虑 sessionid 的伪造与截获。如果 sessionid 是放在 cookie 中的，那么 cookie 的时效就决定了 sessionid 即登录状态的时效。<br>需要注意的就是会话固定（session fixation)：意思是攻击者先自己获取一个 sessionid,然后假冒一个网站并将连接发给被攻击的人，当受害者登录后，攻击者就可以劫持受害人的会话。因为在攻击者登录获取 sessionid 后，网络服务器看到会话已经建立，无需创建新的会话。所以攻击者就成功地冒充了受害者，从而获取了受害者的信息。</p>\n<h3 id=\"Token（JWT）\"><a href=\"#Token（JWT）\" class=\"headerlink\" title=\"Token（JWT）\"></a>Token（JWT）</h3><h4 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h4><p>JSON Web Token (JWT) 是一种开放标准 (RFC 7519)，它定义了一种紧凑且自包含的方式，用于在各方之间作为 JSON 对象安全地传输信息。由于此信息经过数字签名，因此可以验证和信任。 JWT 可以使用秘密（使用 HMAC 算法）或使用 RSA 或 ECDSA 的公钥/私钥对进行签名。尽管 JWTs 可以被加密，以便在各方之间提供保密性，但我们将专注于签名的令牌。签名的令牌可以验证其中包含的索赔的完整性，而加密的令牌则对其他各方隐藏这些索赔。当令牌使用公钥/私钥对签名时，签名也证明了只有持有私钥的一方才是签名者。 - - - - <a href=\"https://jwt.io/introduction\">https://jwt.io/introduction</a></p>\n<h4 id=\"组成：\"><a href=\"#组成：\" class=\"headerlink\" title=\"组成：\"></a>组成：</h4><blockquote>\n<p>形如：xxxxx.yyyyy.zzzzz</p>\n</blockquote>\n<ol>\n<li>header：标头通常由两部分组成：令牌的类型，即 JWT，以及正在使用的签名算法，例如 HMAC SHA256 或 RSA。<strong>然后，这个 JSON 被 Base64Url 编码以形成 JWT 的第一部分。</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;alg&quot;</span>: <span class=\"string\">&quot;HS256&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;typ&quot;</span>: <span class=\"string\">&quot;JWT&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>payload：包含一些声明， 声明是关于实体（通常是用户）和附加数据的声明。共有三种类型的 claims：注册负载、公共负载和私人负载。</li>\n</ol>\n<ul>\n<li>Registered claims（注册）: 通常有四个部分，iss(issuer)，exp (expiration time), sub (subject), aud (audience)。还有一些其他的，比如：nbf (Not Before)、iat (Issued At)、jti (JWT ID)。<br><strong>iss（issuer）</strong>：声明标识发行该证书的委托人。<br>**exp (expiration time)**：声明标识了过期时间或之后不得接受 JWT 进行处理<br>**sub (subject)**：JWT 的主题。 JWT 中的声明通常是声明，关于主题。主题值必须要么被限定为在发行人的上下文中是本地唯一的，或者是全球唯一的。<br>**aud (audience)**：声明标识了 JWT 的接收者。</li>\n<li>Public claims（公共）：这些可以由使用 JWT 的人随意定义。但是为了避免冲突，它们应该在 <a href=\"https://www.iana.org/assignments/jwt/jwt.xhtml\">IANA JSON Web Token Registry</a> 中定义，或者定义为包含抗冲突命名空间的 URI。</li>\n<li>Private claims（私有）：这些是为了在同意使用它们的各方之间共享信息而创建的自定义声明，这些声明既不是注册声明也不是公开声明。此声明的处理通常是<strong>特定于应用程序</strong>的。</li>\n</ul>\n<p><strong>然后，这个 JSON 被 Base64Url 编码以形成 JWT 的第二部分。</strong><br><strong>这里，header 与 payload 都是可以直接通过 base64url 解码获得其 json 数据的。</strong> 3. signature：签名，这是 jwt 最核心的部分，就是包含 base64 编码的 header,payload,以及 secret，最后再将整个使用加密算法进行加密。其中的 secret 就是服务端发放的私钥。</p>\n<blockquote>\n<p>形如：<br>HMACSHA256(<br>base64UrlEncode(header) + “.” +<br>base64UrlEncode(payload),<br>secret<br>)</p>\n</blockquote>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>每当用户想要访问受保护的路由或资源时，用户代理应发送 JWT，通常在使用 Bearer 模式的 Authorization 标头中。标题的内容应如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果令牌在 Authorization 标头中发送，则跨源资源共享 (CORS) 不会成为问题，因为它不使用 cookie（cookie 是不能跨域的）。这一点就非常适合单点登录。</p>\n<h4 id=\"安全性-2\"><a href=\"#安全性-2\" class=\"headerlink\" title=\"安全性\"></a>安全性</h4><p>因为在 jwt 签发的时候，密钥是服务端生成的，所以来说是比较安全的，当 payload 的数据修改后，发送给服务端，服务端会采用相同的加密算法生成一个 token 副本与之前签发的进行对比，显然，修改后的数据再次加密后与之前的 token 对比肯定不同。<br>在 payload 中，因为是 base64url 编码的，所以很容易解码获取信息，因此不宜在里面放一些比较重要的信息。</p>"},{"title":"一次base64指令的powershell","date":"2021-11-18T14:33:12.000Z","_content":"\n**事情发生是在一个月黑风高的晚上。。。。不好意思搞错了 😬。**\n**事情是这样的，今天在使用 webpack-dev-middleware 构建开发环境的时候，想要使用 node 启动浏览器并自动打开相关的本地网址。于是就发生了下面的一幕。**\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/u=1178727920,923148390&fm=26&fmt=auto.webp)\n\n<!--more-->\n\n# 关于 open 这个 node_module\n\n**这是一个 node 的依赖包，使用其提供的相关 api 可以用浏览器打开具体的网址。具体用法如下**\n\n```javascript\nconst open = require(\"open\");\n\n// Opens the image in the default image viewer and waits for the opened app to quit.\nawait open(\"unicorn.png\", { wait: true });\nconsole.log(\"The image viewer app quit\");\n\n// Opens the URL in the default browser.\nawait open(\"https://sindresorhus.com\");\n\n// Opens the URL in a specified browser.\nawait open(\"https://sindresorhus.com\", { app: { name: \"firefox\" } });\n\n// Specify app arguments.\nawait open(\"https://sindresorhus.com\", {\n  app: { name: \"google chrome\", arguments: [\"--incognito\"] },\n});\n\n// Open an app\nawait open.openApp(\"xcode\");\n\n// Open an app with arguments\nawait open.openApp(open.apps.chrome, { arguments: [\"--incognito\"] });\n```\n\n**为了一探究竟，它是怎样打开浏览器的，所以我就开始了查看源代码之旅。然后就出现了 powershell 执行 base64 编码的命令这个有趣的事情了。**\n\n# 在 powershell 中使用 base64 编码的指令\n\n**在 open 的源码中，有个 encodeArguments 的数组，大概是这个样子['start', 'http://....' ]，其打开浏览的的主要命令就是**\n\n```powershell\n start (application) <网址>\n```\n\n**而它在传递 powershell 命令时有这样一行代码代码,通过注释我们可以明白这是一个使用 base64 编码的 powershell 命令。于是乎我就开始了我的实验性探究了了**🥳。\n\n```javascript\n// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\ntarget = Buffer.from(encodedArguments.join(\" \"), \"utf16le\").to;\n```\n\n**果不其然，在微软的文档里确实查到了 😃,不过需要注意的是需要 utf-16le 的编码。**\n**_铛铛铛铛！！_**\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/encodedCommand.png)\n\n# 实际测试\n\n**下面我就以 node 打开浏览器为例子，进行 base64 编码命令的测试。**\n**node 打开浏览器的代码如下：**\n\n```javascript\nconst cp = require('child_process');\n\n// 获取base64编码的指令\nlet command = Buffer.from(<目标指令> 'utf16le').toString('base64');\n\nlet subprocess = cp.spawn(`${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`, [\n    \"-EncodedCommand\",\n    'cwB0AGEAcgB0ACAAaAB0AHQAcAA6AC8ALwBiAGEAaQBkAHUALgBjAG8AbQA='\n    // 'start http://baidu.com' 上面是这一行命令的编码\n], {\n    windowsVerbatimArguments: true\n})\n```\n\n**下面是效果图**\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/20211191146.gif)\n**奇怪的知识又增加了 🌟**\n","source":"_posts/一次base64指令的powershell.md","raw":"---\ntitle: 一次base64指令的powershell\ndate: 2021-11-18 22:33:12\ntags:\ncategories: 一些趣事的🌟\n---\n\n**事情发生是在一个月黑风高的晚上。。。。不好意思搞错了 😬。**\n**事情是这样的，今天在使用 webpack-dev-middleware 构建开发环境的时候，想要使用 node 启动浏览器并自动打开相关的本地网址。于是就发生了下面的一幕。**\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/u=1178727920,923148390&fm=26&fmt=auto.webp)\n\n<!--more-->\n\n# 关于 open 这个 node_module\n\n**这是一个 node 的依赖包，使用其提供的相关 api 可以用浏览器打开具体的网址。具体用法如下**\n\n```javascript\nconst open = require(\"open\");\n\n// Opens the image in the default image viewer and waits for the opened app to quit.\nawait open(\"unicorn.png\", { wait: true });\nconsole.log(\"The image viewer app quit\");\n\n// Opens the URL in the default browser.\nawait open(\"https://sindresorhus.com\");\n\n// Opens the URL in a specified browser.\nawait open(\"https://sindresorhus.com\", { app: { name: \"firefox\" } });\n\n// Specify app arguments.\nawait open(\"https://sindresorhus.com\", {\n  app: { name: \"google chrome\", arguments: [\"--incognito\"] },\n});\n\n// Open an app\nawait open.openApp(\"xcode\");\n\n// Open an app with arguments\nawait open.openApp(open.apps.chrome, { arguments: [\"--incognito\"] });\n```\n\n**为了一探究竟，它是怎样打开浏览器的，所以我就开始了查看源代码之旅。然后就出现了 powershell 执行 base64 编码的命令这个有趣的事情了。**\n\n# 在 powershell 中使用 base64 编码的指令\n\n**在 open 的源码中，有个 encodeArguments 的数组，大概是这个样子['start', 'http://....' ]，其打开浏览的的主要命令就是**\n\n```powershell\n start (application) <网址>\n```\n\n**而它在传递 powershell 命令时有这样一行代码代码,通过注释我们可以明白这是一个使用 base64 编码的 powershell 命令。于是乎我就开始了我的实验性探究了了**🥳。\n\n```javascript\n// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\ntarget = Buffer.from(encodedArguments.join(\" \"), \"utf16le\").to;\n```\n\n**果不其然，在微软的文档里确实查到了 😃,不过需要注意的是需要 utf-16le 的编码。**\n**_铛铛铛铛！！_**\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/encodedCommand.png)\n\n# 实际测试\n\n**下面我就以 node 打开浏览器为例子，进行 base64 编码命令的测试。**\n**node 打开浏览器的代码如下：**\n\n```javascript\nconst cp = require('child_process');\n\n// 获取base64编码的指令\nlet command = Buffer.from(<目标指令> 'utf16le').toString('base64');\n\nlet subprocess = cp.spawn(`${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`, [\n    \"-EncodedCommand\",\n    'cwB0AGEAcgB0ACAAaAB0AHQAcAA6AC8ALwBiAGEAaQBkAHUALgBjAG8AbQA='\n    // 'start http://baidu.com' 上面是这一行命令的编码\n], {\n    windowsVerbatimArguments: true\n})\n```\n\n**下面是效果图**\n![](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/20211191146.gif)\n**奇怪的知识又增加了 🌟**\n","slug":"一次base64指令的powershell","published":1,"updated":"2022-04-30T02:34:43.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3itto7u000k9ov77gi3ay34","content":"<p><strong>事情发生是在一个月黑风高的晚上。。。。不好意思搞错了 😬。</strong><br><strong>事情是这样的，今天在使用 webpack-dev-middleware 构建开发环境的时候，想要使用 node 启动浏览器并自动打开相关的本地网址。于是就发生了下面的一幕。</strong><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/u=1178727920,923148390&fm=26&fmt=auto.webp\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"关于-open-这个-node-module\"><a href=\"#关于-open-这个-node-module\" class=\"headerlink\" title=\"关于 open 这个 node_module\"></a>关于 open 这个 node_module</h1><p><strong>这是一个 node 的依赖包，使用其提供的相关 api 可以用浏览器打开具体的网址。具体用法如下</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> open = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Opens the image in the default image viewer and waits for the opened app to quit.</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> open(<span class=\"string\">&quot;unicorn.png&quot;</span>, &#123; <span class=\"attr\">wait</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;The image viewer app quit&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Opens the URL in the default browser.</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> open(<span class=\"string\">&quot;https://sindresorhus.com&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Opens the URL in a specified browser.</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> open(<span class=\"string\">&quot;https://sindresorhus.com&quot;</span>, &#123; <span class=\"attr\">app</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;firefox&quot;</span> &#125; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Specify app arguments.</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> open(<span class=\"string\">&quot;https://sindresorhus.com&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">app</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;google chrome&quot;</span>, <span class=\"attr\">arguments</span>: [<span class=\"string\">&quot;--incognito&quot;</span>] &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Open an app</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> open.openApp(<span class=\"string\">&quot;xcode&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Open an app with arguments</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> open.openApp(open.apps.chrome, &#123; <span class=\"attr\">arguments</span>: [<span class=\"string\">&quot;--incognito&quot;</span>] &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>为了一探究竟，它是怎样打开浏览器的，所以我就开始了查看源代码之旅。然后就出现了 powershell 执行 base64 编码的命令这个有趣的事情了。</strong></p>\n<h1 id=\"在-powershell-中使用-base64-编码的指令\"><a href=\"#在-powershell-中使用-base64-编码的指令\" class=\"headerlink\" title=\"在 powershell 中使用 base64 编码的指令\"></a>在 powershell 中使用 base64 编码的指令</h1><p><strong>在 open 的源码中，有个 encodeArguments 的数组，大概是这个样子[‘start’, ‘http://….’ ]，其打开浏览的的主要命令就是</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">start</span> (application) &lt;网址&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>而它在传递 powershell 命令时有这样一行代码代码,通过注释我们可以明白这是一个使用 base64 编码的 powershell 命令。于是乎我就开始了我的实验性探究了了</strong>🥳。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Using Base64-encoded command, accepted by PowerShell, to allow special characters.</span></span><br><span class=\"line\">target = Buffer.from(encodedArguments.join(<span class=\"string\">&quot; &quot;</span>), <span class=\"string\">&quot;utf16le&quot;</span>).to;</span><br></pre></td></tr></table></figure>\n\n<p><strong>果不其然，在微软的文档里确实查到了 😃,不过需要注意的是需要 utf-16le 的编码。</strong><br><strong><em>铛铛铛铛！！</em></strong><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/encodedCommand.png\"></p>\n<h1 id=\"实际测试\"><a href=\"#实际测试\" class=\"headerlink\" title=\"实际测试\"></a>实际测试</h1><p><strong>下面我就以 node 打开浏览器为例子，进行 base64 编码命令的测试。</strong><br><strong>node 打开浏览器的代码如下：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取base64编码的指令</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> command = Buffer.from(&lt;目标指令&gt; <span class=\"string\">&#x27;utf16le&#x27;</span>).toString(<span class=\"string\">&#x27;base64&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subprocess = cp.spawn(<span class=\"string\">`<span class=\"subst\">$&#123;process.env.SYSTEMROOT&#125;</span>\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`</span>, [</span><br><span class=\"line\">    <span class=\"string\">&quot;-EncodedCommand&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;cwB0AGEAcgB0ACAAaAB0AHQAcAA6AC8ALwBiAGEAaQBkAHUALgBjAG8AbQA=&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#x27;start http://baidu.com&#x27; 上面是这一行命令的编码</span></span><br><span class=\"line\">], &#123;</span><br><span class=\"line\">    <span class=\"attr\">windowsVerbatimArguments</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>下面是效果图</strong><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/20211191146.gif\"><br><strong>奇怪的知识又增加了 🌟</strong></p>\n","site":{"data":{"linklist":[{"nickname":"ZCW","avatar":"http://sherry.formeky.xyz:8090/upload/2021/09/QQ%E5%9B%BE%E7%89%8720210629151630-d1748408bc4d4d3b995abaf38440b71d.jpg","site":"http://sherry.formeky.xyz:8090/","descp":"后端工程师"},{"nickname":"LJC","site":"https://lengthmin.me/","descp":"这大概就是大佬吧","avatar":"https://lengthmin.me/images/avatar.png"}]}},"length":1968,"excerpt":"<p><strong>事情发生是在一个月黑风高的晚上。。。。不好意思搞错了 😬。</strong><br><strong>事情是这样的，今天在使用 webpack-dev-middleware 构建开发环境的时候，想要使用 node 启动浏览器并自动打开相关的本地网址。于是就发生了下面的一幕。</strong><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/u=1178727920,923148390&fm=26&fmt=auto.webp\"></p>","more":"<h1 id=\"关于-open-这个-node-module\"><a href=\"#关于-open-这个-node-module\" class=\"headerlink\" title=\"关于 open 这个 node_module\"></a>关于 open 这个 node_module</h1><p><strong>这是一个 node 的依赖包，使用其提供的相关 api 可以用浏览器打开具体的网址。具体用法如下</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> open = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Opens the image in the default image viewer and waits for the opened app to quit.</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> open(<span class=\"string\">&quot;unicorn.png&quot;</span>, &#123; <span class=\"attr\">wait</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;The image viewer app quit&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Opens the URL in the default browser.</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> open(<span class=\"string\">&quot;https://sindresorhus.com&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Opens the URL in a specified browser.</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> open(<span class=\"string\">&quot;https://sindresorhus.com&quot;</span>, &#123; <span class=\"attr\">app</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;firefox&quot;</span> &#125; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Specify app arguments.</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> open(<span class=\"string\">&quot;https://sindresorhus.com&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">app</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;google chrome&quot;</span>, <span class=\"attr\">arguments</span>: [<span class=\"string\">&quot;--incognito&quot;</span>] &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Open an app</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> open.openApp(<span class=\"string\">&quot;xcode&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Open an app with arguments</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> open.openApp(open.apps.chrome, &#123; <span class=\"attr\">arguments</span>: [<span class=\"string\">&quot;--incognito&quot;</span>] &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>为了一探究竟，它是怎样打开浏览器的，所以我就开始了查看源代码之旅。然后就出现了 powershell 执行 base64 编码的命令这个有趣的事情了。</strong></p>\n<h1 id=\"在-powershell-中使用-base64-编码的指令\"><a href=\"#在-powershell-中使用-base64-编码的指令\" class=\"headerlink\" title=\"在 powershell 中使用 base64 编码的指令\"></a>在 powershell 中使用 base64 编码的指令</h1><p><strong>在 open 的源码中，有个 encodeArguments 的数组，大概是这个样子[‘start’, ‘http://….’ ]，其打开浏览的的主要命令就是</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">start</span> (application) &lt;网址&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>而它在传递 powershell 命令时有这样一行代码代码,通过注释我们可以明白这是一个使用 base64 编码的 powershell 命令。于是乎我就开始了我的实验性探究了了</strong>🥳。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Using Base64-encoded command, accepted by PowerShell, to allow special characters.</span></span><br><span class=\"line\">target = Buffer.from(encodedArguments.join(<span class=\"string\">&quot; &quot;</span>), <span class=\"string\">&quot;utf16le&quot;</span>).to;</span><br></pre></td></tr></table></figure>\n\n<p><strong>果不其然，在微软的文档里确实查到了 😃,不过需要注意的是需要 utf-16le 的编码。</strong><br><strong><em>铛铛铛铛！！</em></strong><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/encodedCommand.png\"></p>\n<h1 id=\"实际测试\"><a href=\"#实际测试\" class=\"headerlink\" title=\"实际测试\"></a>实际测试</h1><p><strong>下面我就以 node 打开浏览器为例子，进行 base64 编码命令的测试。</strong><br><strong>node 打开浏览器的代码如下：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取base64编码的指令</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> command = Buffer.from(&lt;目标指令&gt; <span class=\"string\">&#x27;utf16le&#x27;</span>).toString(<span class=\"string\">&#x27;base64&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subprocess = cp.spawn(<span class=\"string\">`<span class=\"subst\">$&#123;process.env.SYSTEMROOT&#125;</span>\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`</span>, [</span><br><span class=\"line\">    <span class=\"string\">&quot;-EncodedCommand&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;cwB0AGEAcgB0ACAAaAB0AHQAcAA6AC8ALwBiAGEAaQBkAHUALgBjAG8AbQA=&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#x27;start http://baidu.com&#x27; 上面是这一行命令的编码</span></span><br><span class=\"line\">], &#123;</span><br><span class=\"line\">    <span class=\"attr\">windowsVerbatimArguments</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>下面是效果图</strong><br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/20211191146.gif\"><br><strong>奇怪的知识又增加了 🌟</strong></p>"},{"title":"聊聊JavaScript事件循环","date":"2022-01-12T15:37:00.000Z","_content":"\n**事情还得从这么一道题开始：**\n\n```javascript\nlet p = new Promise((resolve, reject) => {\n  console.log(\"p\");\n});\nsetTimeout(() => {\n  console.log(\"setTime\");\n}, 0);\nconsole.log(\"end\");\n```\n\n各位想想下面的输出顺序是什么吧？\n我先说一下我的答案吧：\n\n> end\n> p\n> setTime\n\n上面的输出是错误的 😥，我是怎么也不开心啊，于是我就开始翻遍各种资料，其中包括任务、微任务、JavaScript 事件循环、Promise 等等资料。下面就让我来细说吧。\n\n<!-- more-->\n\n**首先介绍几个重要的概念。**\n\n## 相关概念\n\n### 任务（宏任务）\n\n任务有以下三类：\n\n- 一段新程序或子程序被直接执行时（比如从一个控制台，或在一个 &lt;script&gt; 元素中运行代码）。\n- 触发了一个事件，将其**回调函数**添加到任务队列时。\n- 执行到一个由 setTimeout() 或 setInterval() 创建的 timeout 或 interval，以致相应的**回调函数**被添加到任务队列时。\n- setImmediate()回调（nodejs）\n- I/O\n- UI\n- postMessage\n- requestAnimationFrame\n\n### 微任务\n\n- promise.then(callback)中的**callback**。\n- MutationObserver\n- process.nextTick(Node.js)\n\n### 执行栈\n\n函数的互相调用会让函数树形成一个调用栈，而函数的执行会按照这个栈来执行，即后进先执行。执行栈会占用 JavaScript 的 run time。\n\n### 执行上下文\n\nJavaScript 在运行时，是运行在执行上下文中的，每一个上下文拥有自己的变量、对象，执行上下文有如下几类：\n\n- 全局上下文：在 JavaScript 开始执行时便创建，是最基础的上下文。\n- 函数上下文（局部上下文）：在函数调用时会创建，一个函数的执行，伴随一个函数上下文的产生。\n- eval 上下文：使用 eval 函数所创建的上下文。\n\n### JavaScript RunTime\n\n执行 js 代码时，运行时引擎拥有一系列的代理，每一个代理由一系列的执行上下文、执行栈、主线程、附加线程（worker）、任务队列、微任务队列。常见的 JavaScript run time 有 iframe、web worker、JavaScript 主线程。\n\n### 事件循环\n\n事件循环负责收集用事件（包括用户事件以及其他非用户事件等）、对任务进行排队以便在合适的时候执行回调。然后它执行所有处于等待中的 JavaScript 任务（宏任务），然后是微任务，然后在开始下一次循环之前执行一些必要的渲染和绘制操作。每一个 JavaScript run time 都会拥有自己的事件循环，RunTime 里面的代理由事件循环所驱动。\n**事件循环分为三类：**\n\n#### window event loop\n\n驱动同源的窗口（Frame,Tab）的事件循环，来自相同 origin 的 window 可能共享同一个事件循环\n\n#### worker event loop\n\n驱动 worker 执行（web workers、 shared workers、service workers）worker 拥有一个或多个与主程序不同的代理。\n\n#### worklet event loop\n\n驱动 worklet 代理的运行。worklet 的类型包括（Worklet、AudioWorklet、PaintWorklet）。\n\n### Promise\n\n一种异步 JavaScript 的解决方案，是对异步方法的返回值的一种描述，用于在将来某个时刻将异步结果返回给使用者，最重要的一点是通过 then 链式调用。\n\n## 事件循环机制\n\n在每一轮事件循环开始时，RunTime 会从任务队列里面取出任务来执行，如果任务里面又添加了新任务到队列里面，新任务不会再本轮事件循环里去执行。当一个任务执行完弹出任务队列时，并且执行栈位空时，这时会开始执行微任务队列，微任务不会像任务那样每次只执行一个，而是将微任务队列里的微任务执行完，即使是在执行微任务时有新的微任务加入到微任务队列，在下一个任务开始以及事件循环迭代结束之前依然会执行微任务。\nOK，说到这儿，我们就可以来分析以下刚才的题了。\n\n## 题目分析\n\n```javascript\nlet p = new Promise((resolve, reject) => {\n  console.log(\"p\");\n});\nsetTimeout(() => {\n  console.log(\"setTime\");\n}, 0);\nconsole.log(\"end\");\n```\n\n**最开始：**将整体代码（一段新程序）加入任务队列。此时的 JavaScript RunTime 的情况如下图：\n![1](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122218.png)\n\n此时任务队列里面仅有整体程序，而微任务队列里面什么也没有。整体程序将进入执行栈中执行。\n**创建 promise 对象：**在创建 promise 对象时，传入了可选参数即：\n\n> (resolve,reject)=>{\n> console.log('p');\n> }\n\n而 Promise 构造器将会在返回新对象之前执行传入的函数参数。所以在执行栈中会执行 console.log('p')，打印出 'p'。\n**执行定时器：**执行定时器，会在传入的延迟时间之后将回调函数加入队列，加入什么队列呢，这里加入的是任务队列，因为 settimeoout 的回调属于宏任务。之后，当前执行栈不为空，会继续执行。\n**打印 end:**在执行 console.log('end')后，现在执行栈为空了，整体程序弹出任务队列。此时任务队列是**不为空的**（包含定时器的回调()=>{console.log('setTime')}）\n\n此时的 JavaScript RunTime 的情况如下图：\n![2](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122230.png)\n这时的任务队列包括定时器的回调，而微任务队列依然为空（这道题就没涉及到微任务。。。）。随后定时器回调将进入执行栈，打印出 setTime。所以最终的打印结果为：\n\n> p\n> end\n> setTime\n\n**这里就注意 promise 的构建就行了，是立即执行，我错的是应为它会进入微任务队列。而 Promise 进入微任务的是 then 的回调函数。**\n\n## 扩展题目\n\n上面的题没有涉及微任务，那我们改改原题目看看：\n\n```javascript\nconst p_2 = new Promise((res, rej) => {\n  console.log(\"p_2\");\n  // 定时器1\n  setTimeout(() => {\n    res(\"定时器1\");\n  }, 0);\n}).then((v) => console.log(v));\n// 定时器2\nsetTimeout(() => {\n  console.log(\"定时器2\");\n}, 0);\nconsole.log(\"end\");\n```\n\n上面新增的是在创建 Promise 对象时增加了一个定时器，以及增加了对 then 的回调。\n依旧从整体程序开始，进入任务队列，当整体程序执行完时，这时的 RunTime 情况如下：\n![3](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122252.png)\n此时输出为：\n\n> p_2\n> end\n\n按照队列先进先出，定时器 1 先进入队列，所以其先于定时器 2 执行。此时定时器 1 的回调进入执行栈执行，执行 res('定时器 1')改变 promise 的状态为 resolve,将 then 的回调加入微任务队列，此时 RunTime 的情况如下：\n![4](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122258.png)\n\n定时器 1 执行完毕弹出任务队列，一个任务执行完后，检索微任务队列，这时微任务队列存在一个 then 回调，所以将其加入执行栈。\n\n现在的输出是：\n\n> p_2\n> end\n> 定时器 1\n\n最终，只剩下了任务队列的定时器 2 回调，重复时间循环，将定时器 2 的回调加入执行栈并执行。最终的输出结果为：\n\n> p_2\n> end\n> 定时器 1\n> 定时器 2\n\n上面这题就说明了一个任务弹出任务队列后会执行微任务队列的任务，可是在上面的概念一章中还提到了一个任务出队列后是要执行所有的微任务，而上面的那一题只有一个微任务看不出什么蹊跷，那么我们再改一下吧。\n\n```javascript\nconst p_2 = new Promise((res, rej) => {\n  console.log(\"p_2\");\n  // 定时器1\n  setTimeout(() => {\n    res(\"定时器1\");\n  }, 0);\n}).then((v) => {\n  console.log(\"微任务开始\");\n  for (let i = 0; i < 5; i++) {\n    window.queueMicrotask(() => {\n      // 函数的内容\n      console.log(i);\n    });\n  }\n});\n// 定时器2\nsetTimeout(() => {\n  console.log(\"定时器2\");\n}, 0);\nconsole.log(\"end\");\n```\n\n这次我们更改了 then 的回调，使用了 window.queueMicrotask()来添加回调到微任务队列。这次是添加五个输出到微任务队列里面。顺着上一题的思路，我们只需将上一题的输出**‘定时器 1’**更改一下就行了。按照一次执行掉所有微任务的结论，我们可以作出如下更改。\n\n> p_2\n> end\n> 微任务开始\n> 0\n> 1\n> 2\n> 3\n> 4\n> 定时器 2\n\n在 chrome 里面试一下吧：）\n![5](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122327.png)\n\n可以看见，结论正确。\n\n**参考：**\n[https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide](https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide)\n[https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth](https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth)\n","source":"_posts/聊聊JavaScript事件循环.md","raw":"---\ntitle: 聊聊JavaScript事件循环\ndate: 2022-01-12 23:37:00\ntags:\ncategories: javascript\n---\n\n**事情还得从这么一道题开始：**\n\n```javascript\nlet p = new Promise((resolve, reject) => {\n  console.log(\"p\");\n});\nsetTimeout(() => {\n  console.log(\"setTime\");\n}, 0);\nconsole.log(\"end\");\n```\n\n各位想想下面的输出顺序是什么吧？\n我先说一下我的答案吧：\n\n> end\n> p\n> setTime\n\n上面的输出是错误的 😥，我是怎么也不开心啊，于是我就开始翻遍各种资料，其中包括任务、微任务、JavaScript 事件循环、Promise 等等资料。下面就让我来细说吧。\n\n<!-- more-->\n\n**首先介绍几个重要的概念。**\n\n## 相关概念\n\n### 任务（宏任务）\n\n任务有以下三类：\n\n- 一段新程序或子程序被直接执行时（比如从一个控制台，或在一个 &lt;script&gt; 元素中运行代码）。\n- 触发了一个事件，将其**回调函数**添加到任务队列时。\n- 执行到一个由 setTimeout() 或 setInterval() 创建的 timeout 或 interval，以致相应的**回调函数**被添加到任务队列时。\n- setImmediate()回调（nodejs）\n- I/O\n- UI\n- postMessage\n- requestAnimationFrame\n\n### 微任务\n\n- promise.then(callback)中的**callback**。\n- MutationObserver\n- process.nextTick(Node.js)\n\n### 执行栈\n\n函数的互相调用会让函数树形成一个调用栈，而函数的执行会按照这个栈来执行，即后进先执行。执行栈会占用 JavaScript 的 run time。\n\n### 执行上下文\n\nJavaScript 在运行时，是运行在执行上下文中的，每一个上下文拥有自己的变量、对象，执行上下文有如下几类：\n\n- 全局上下文：在 JavaScript 开始执行时便创建，是最基础的上下文。\n- 函数上下文（局部上下文）：在函数调用时会创建，一个函数的执行，伴随一个函数上下文的产生。\n- eval 上下文：使用 eval 函数所创建的上下文。\n\n### JavaScript RunTime\n\n执行 js 代码时，运行时引擎拥有一系列的代理，每一个代理由一系列的执行上下文、执行栈、主线程、附加线程（worker）、任务队列、微任务队列。常见的 JavaScript run time 有 iframe、web worker、JavaScript 主线程。\n\n### 事件循环\n\n事件循环负责收集用事件（包括用户事件以及其他非用户事件等）、对任务进行排队以便在合适的时候执行回调。然后它执行所有处于等待中的 JavaScript 任务（宏任务），然后是微任务，然后在开始下一次循环之前执行一些必要的渲染和绘制操作。每一个 JavaScript run time 都会拥有自己的事件循环，RunTime 里面的代理由事件循环所驱动。\n**事件循环分为三类：**\n\n#### window event loop\n\n驱动同源的窗口（Frame,Tab）的事件循环，来自相同 origin 的 window 可能共享同一个事件循环\n\n#### worker event loop\n\n驱动 worker 执行（web workers、 shared workers、service workers）worker 拥有一个或多个与主程序不同的代理。\n\n#### worklet event loop\n\n驱动 worklet 代理的运行。worklet 的类型包括（Worklet、AudioWorklet、PaintWorklet）。\n\n### Promise\n\n一种异步 JavaScript 的解决方案，是对异步方法的返回值的一种描述，用于在将来某个时刻将异步结果返回给使用者，最重要的一点是通过 then 链式调用。\n\n## 事件循环机制\n\n在每一轮事件循环开始时，RunTime 会从任务队列里面取出任务来执行，如果任务里面又添加了新任务到队列里面，新任务不会再本轮事件循环里去执行。当一个任务执行完弹出任务队列时，并且执行栈位空时，这时会开始执行微任务队列，微任务不会像任务那样每次只执行一个，而是将微任务队列里的微任务执行完，即使是在执行微任务时有新的微任务加入到微任务队列，在下一个任务开始以及事件循环迭代结束之前依然会执行微任务。\nOK，说到这儿，我们就可以来分析以下刚才的题了。\n\n## 题目分析\n\n```javascript\nlet p = new Promise((resolve, reject) => {\n  console.log(\"p\");\n});\nsetTimeout(() => {\n  console.log(\"setTime\");\n}, 0);\nconsole.log(\"end\");\n```\n\n**最开始：**将整体代码（一段新程序）加入任务队列。此时的 JavaScript RunTime 的情况如下图：\n![1](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122218.png)\n\n此时任务队列里面仅有整体程序，而微任务队列里面什么也没有。整体程序将进入执行栈中执行。\n**创建 promise 对象：**在创建 promise 对象时，传入了可选参数即：\n\n> (resolve,reject)=>{\n> console.log('p');\n> }\n\n而 Promise 构造器将会在返回新对象之前执行传入的函数参数。所以在执行栈中会执行 console.log('p')，打印出 'p'。\n**执行定时器：**执行定时器，会在传入的延迟时间之后将回调函数加入队列，加入什么队列呢，这里加入的是任务队列，因为 settimeoout 的回调属于宏任务。之后，当前执行栈不为空，会继续执行。\n**打印 end:**在执行 console.log('end')后，现在执行栈为空了，整体程序弹出任务队列。此时任务队列是**不为空的**（包含定时器的回调()=>{console.log('setTime')}）\n\n此时的 JavaScript RunTime 的情况如下图：\n![2](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122230.png)\n这时的任务队列包括定时器的回调，而微任务队列依然为空（这道题就没涉及到微任务。。。）。随后定时器回调将进入执行栈，打印出 setTime。所以最终的打印结果为：\n\n> p\n> end\n> setTime\n\n**这里就注意 promise 的构建就行了，是立即执行，我错的是应为它会进入微任务队列。而 Promise 进入微任务的是 then 的回调函数。**\n\n## 扩展题目\n\n上面的题没有涉及微任务，那我们改改原题目看看：\n\n```javascript\nconst p_2 = new Promise((res, rej) => {\n  console.log(\"p_2\");\n  // 定时器1\n  setTimeout(() => {\n    res(\"定时器1\");\n  }, 0);\n}).then((v) => console.log(v));\n// 定时器2\nsetTimeout(() => {\n  console.log(\"定时器2\");\n}, 0);\nconsole.log(\"end\");\n```\n\n上面新增的是在创建 Promise 对象时增加了一个定时器，以及增加了对 then 的回调。\n依旧从整体程序开始，进入任务队列，当整体程序执行完时，这时的 RunTime 情况如下：\n![3](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122252.png)\n此时输出为：\n\n> p_2\n> end\n\n按照队列先进先出，定时器 1 先进入队列，所以其先于定时器 2 执行。此时定时器 1 的回调进入执行栈执行，执行 res('定时器 1')改变 promise 的状态为 resolve,将 then 的回调加入微任务队列，此时 RunTime 的情况如下：\n![4](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122258.png)\n\n定时器 1 执行完毕弹出任务队列，一个任务执行完后，检索微任务队列，这时微任务队列存在一个 then 回调，所以将其加入执行栈。\n\n现在的输出是：\n\n> p_2\n> end\n> 定时器 1\n\n最终，只剩下了任务队列的定时器 2 回调，重复时间循环，将定时器 2 的回调加入执行栈并执行。最终的输出结果为：\n\n> p_2\n> end\n> 定时器 1\n> 定时器 2\n\n上面这题就说明了一个任务弹出任务队列后会执行微任务队列的任务，可是在上面的概念一章中还提到了一个任务出队列后是要执行所有的微任务，而上面的那一题只有一个微任务看不出什么蹊跷，那么我们再改一下吧。\n\n```javascript\nconst p_2 = new Promise((res, rej) => {\n  console.log(\"p_2\");\n  // 定时器1\n  setTimeout(() => {\n    res(\"定时器1\");\n  }, 0);\n}).then((v) => {\n  console.log(\"微任务开始\");\n  for (let i = 0; i < 5; i++) {\n    window.queueMicrotask(() => {\n      // 函数的内容\n      console.log(i);\n    });\n  }\n});\n// 定时器2\nsetTimeout(() => {\n  console.log(\"定时器2\");\n}, 0);\nconsole.log(\"end\");\n```\n\n这次我们更改了 then 的回调，使用了 window.queueMicrotask()来添加回调到微任务队列。这次是添加五个输出到微任务队列里面。顺着上一题的思路，我们只需将上一题的输出**‘定时器 1’**更改一下就行了。按照一次执行掉所有微任务的结论，我们可以作出如下更改。\n\n> p_2\n> end\n> 微任务开始\n> 0\n> 1\n> 2\n> 3\n> 4\n> 定时器 2\n\n在 chrome 里面试一下吧：）\n![5](https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122327.png)\n\n可以看见，结论正确。\n\n**参考：**\n[https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide](https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide)\n[https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth](https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth)\n","slug":"聊聊JavaScript事件循环","published":1,"updated":"2022-04-30T02:34:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3itto7x000o9ov7a8n750fh","content":"<p><strong>事情还得从这么一道题开始：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;p&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;setTime&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;end&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>各位想想下面的输出顺序是什么吧？<br>我先说一下我的答案吧：</p>\n<blockquote>\n<p>end<br>p<br>setTime</p>\n</blockquote>\n<p>上面的输出是错误的 😥，我是怎么也不开心啊，于是我就开始翻遍各种资料，其中包括任务、微任务、JavaScript 事件循环、Promise 等等资料。下面就让我来细说吧。</p>\n<span id=\"more\"></span>\n\n<p><strong>首先介绍几个重要的概念。</strong></p>\n<h2 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h2><h3 id=\"任务（宏任务）\"><a href=\"#任务（宏任务）\" class=\"headerlink\" title=\"任务（宏任务）\"></a>任务（宏任务）</h3><p>任务有以下三类：</p>\n<ul>\n<li>一段新程序或子程序被直接执行时（比如从一个控制台，或在一个 &lt;script&gt; 元素中运行代码）。</li>\n<li>触发了一个事件，将其<strong>回调函数</strong>添加到任务队列时。</li>\n<li>执行到一个由 setTimeout() 或 setInterval() 创建的 timeout 或 interval，以致相应的<strong>回调函数</strong>被添加到任务队列时。</li>\n<li>setImmediate()回调（nodejs）</li>\n<li>I/O</li>\n<li>UI</li>\n<li>postMessage</li>\n<li>requestAnimationFrame</li>\n</ul>\n<h3 id=\"微任务\"><a href=\"#微任务\" class=\"headerlink\" title=\"微任务\"></a>微任务</h3><ul>\n<li>promise.then(callback)中的<strong>callback</strong>。</li>\n<li>MutationObserver</li>\n<li>process.nextTick(Node.js)</li>\n</ul>\n<h3 id=\"执行栈\"><a href=\"#执行栈\" class=\"headerlink\" title=\"执行栈\"></a>执行栈</h3><p>函数的互相调用会让函数树形成一个调用栈，而函数的执行会按照这个栈来执行，即后进先执行。执行栈会占用 JavaScript 的 run time。</p>\n<h3 id=\"执行上下文\"><a href=\"#执行上下文\" class=\"headerlink\" title=\"执行上下文\"></a>执行上下文</h3><p>JavaScript 在运行时，是运行在执行上下文中的，每一个上下文拥有自己的变量、对象，执行上下文有如下几类：</p>\n<ul>\n<li>全局上下文：在 JavaScript 开始执行时便创建，是最基础的上下文。</li>\n<li>函数上下文（局部上下文）：在函数调用时会创建，一个函数的执行，伴随一个函数上下文的产生。</li>\n<li>eval 上下文：使用 eval 函数所创建的上下文。</li>\n</ul>\n<h3 id=\"JavaScript-RunTime\"><a href=\"#JavaScript-RunTime\" class=\"headerlink\" title=\"JavaScript RunTime\"></a>JavaScript RunTime</h3><p>执行 js 代码时，运行时引擎拥有一系列的代理，每一个代理由一系列的执行上下文、执行栈、主线程、附加线程（worker）、任务队列、微任务队列。常见的 JavaScript run time 有 iframe、web worker、JavaScript 主线程。</p>\n<h3 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h3><p>事件循环负责收集用事件（包括用户事件以及其他非用户事件等）、对任务进行排队以便在合适的时候执行回调。然后它执行所有处于等待中的 JavaScript 任务（宏任务），然后是微任务，然后在开始下一次循环之前执行一些必要的渲染和绘制操作。每一个 JavaScript run time 都会拥有自己的事件循环，RunTime 里面的代理由事件循环所驱动。<br><strong>事件循环分为三类：</strong></p>\n<h4 id=\"window-event-loop\"><a href=\"#window-event-loop\" class=\"headerlink\" title=\"window event loop\"></a>window event loop</h4><p>驱动同源的窗口（Frame,Tab）的事件循环，来自相同 origin 的 window 可能共享同一个事件循环</p>\n<h4 id=\"worker-event-loop\"><a href=\"#worker-event-loop\" class=\"headerlink\" title=\"worker event loop\"></a>worker event loop</h4><p>驱动 worker 执行（web workers、 shared workers、service workers）worker 拥有一个或多个与主程序不同的代理。</p>\n<h4 id=\"worklet-event-loop\"><a href=\"#worklet-event-loop\" class=\"headerlink\" title=\"worklet event loop\"></a>worklet event loop</h4><p>驱动 worklet 代理的运行。worklet 的类型包括（Worklet、AudioWorklet、PaintWorklet）。</p>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>一种异步 JavaScript 的解决方案，是对异步方法的返回值的一种描述，用于在将来某个时刻将异步结果返回给使用者，最重要的一点是通过 then 链式调用。</p>\n<h2 id=\"事件循环机制\"><a href=\"#事件循环机制\" class=\"headerlink\" title=\"事件循环机制\"></a>事件循环机制</h2><p>在每一轮事件循环开始时，RunTime 会从任务队列里面取出任务来执行，如果任务里面又添加了新任务到队列里面，新任务不会再本轮事件循环里去执行。当一个任务执行完弹出任务队列时，并且执行栈位空时，这时会开始执行微任务队列，微任务不会像任务那样每次只执行一个，而是将微任务队列里的微任务执行完，即使是在执行微任务时有新的微任务加入到微任务队列，在下一个任务开始以及事件循环迭代结束之前依然会执行微任务。<br>OK，说到这儿，我们就可以来分析以下刚才的题了。</p>\n<h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;p&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;setTime&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;end&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>最开始：</strong>将整体代码（一段新程序）加入任务队列。此时的 JavaScript RunTime 的情况如下图：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122218.png\" alt=\"1\"></p>\n<p>此时任务队列里面仅有整体程序，而微任务队列里面什么也没有。整体程序将进入执行栈中执行。<br><strong>创建 promise 对象：</strong>在创建 promise 对象时，传入了可选参数即：</p>\n<blockquote>\n<p>(resolve,reject)=&gt;{<br>console.log(‘p’);<br>}</p>\n</blockquote>\n<p>而 Promise 构造器将会在返回新对象之前执行传入的函数参数。所以在执行栈中会执行 console.log(‘p’)，打印出 ‘p’。<br><strong>执行定时器：</strong>执行定时器，会在传入的延迟时间之后将回调函数加入队列，加入什么队列呢，这里加入的是任务队列，因为 settimeoout 的回调属于宏任务。之后，当前执行栈不为空，会继续执行。<br><strong>打印 end:<strong>在执行 console.log(‘end’)后，现在执行栈为空了，整体程序弹出任务队列。此时任务队列是</strong>不为空的</strong>（包含定时器的回调()=&gt;{console.log(‘setTime’)}）</p>\n<p>此时的 JavaScript RunTime 的情况如下图：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122230.png\" alt=\"2\"><br>这时的任务队列包括定时器的回调，而微任务队列依然为空（这道题就没涉及到微任务。。。）。随后定时器回调将进入执行栈，打印出 setTime。所以最终的打印结果为：</p>\n<blockquote>\n<p>p<br>end<br>setTime</p>\n</blockquote>\n<p><strong>这里就注意 promise 的构建就行了，是立即执行，我错的是应为它会进入微任务队列。而 Promise 进入微任务的是 then 的回调函数。</strong></p>\n<h2 id=\"扩展题目\"><a href=\"#扩展题目\" class=\"headerlink\" title=\"扩展题目\"></a>扩展题目</h2><p>上面的题没有涉及微任务，那我们改改原题目看看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p_2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;p_2&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 定时器1</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    res(<span class=\"string\">&quot;定时器1&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(v));</span><br><span class=\"line\"><span class=\"comment\">// 定时器2</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;定时器2&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;end&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上面新增的是在创建 Promise 对象时增加了一个定时器，以及增加了对 then 的回调。<br>依旧从整体程序开始，进入任务队列，当整体程序执行完时，这时的 RunTime 情况如下：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122252.png\" alt=\"3\"><br>此时输出为：</p>\n<blockquote>\n<p>p_2<br>end</p>\n</blockquote>\n<p>按照队列先进先出，定时器 1 先进入队列，所以其先于定时器 2 执行。此时定时器 1 的回调进入执行栈执行，执行 res(‘定时器 1’)改变 promise 的状态为 resolve,将 then 的回调加入微任务队列，此时 RunTime 的情况如下：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122258.png\" alt=\"4\"></p>\n<p>定时器 1 执行完毕弹出任务队列，一个任务执行完后，检索微任务队列，这时微任务队列存在一个 then 回调，所以将其加入执行栈。</p>\n<p>现在的输出是：</p>\n<blockquote>\n<p>p_2<br>end<br>定时器 1</p>\n</blockquote>\n<p>最终，只剩下了任务队列的定时器 2 回调，重复时间循环，将定时器 2 的回调加入执行栈并执行。最终的输出结果为：</p>\n<blockquote>\n<p>p_2<br>end<br>定时器 1<br>定时器 2</p>\n</blockquote>\n<p>上面这题就说明了一个任务弹出任务队列后会执行微任务队列的任务，可是在上面的概念一章中还提到了一个任务出队列后是要执行所有的微任务，而上面的那一题只有一个微任务看不出什么蹊跷，那么我们再改一下吧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p_2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;p_2&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 定时器1</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    res(<span class=\"string\">&quot;定时器1&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;微任务开始&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.queueMicrotask(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 函数的内容</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 定时器2</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;定时器2&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;end&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这次我们更改了 then 的回调，使用了 window.queueMicrotask()来添加回调到微任务队列。这次是添加五个输出到微任务队列里面。顺着上一题的思路，我们只需将上一题的输出<strong>‘定时器 1’</strong>更改一下就行了。按照一次执行掉所有微任务的结论，我们可以作出如下更改。</p>\n<blockquote>\n<p>p_2<br>end<br>微任务开始<br>0<br>1<br>2<br>3<br>4<br>定时器 2</p>\n</blockquote>\n<p>在 chrome 里面试一下吧：）<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122327.png\" alt=\"5\"></p>\n<p>可以看见，结论正确。</p>\n<p><strong>参考：</strong><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide\">https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth\">https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth</a></p>\n","site":{"data":{"linklist":[{"nickname":"ZCW","avatar":"http://sherry.formeky.xyz:8090/upload/2021/09/QQ%E5%9B%BE%E7%89%8720210629151630-d1748408bc4d4d3b995abaf38440b71d.jpg","site":"http://sherry.formeky.xyz:8090/","descp":"后端工程师"},{"nickname":"LJC","site":"https://lengthmin.me/","descp":"这大概就是大佬吧","avatar":"https://lengthmin.me/images/avatar.png"}]}},"length":4050,"excerpt":"<p><strong>事情还得从这么一道题开始：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;p&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;setTime&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;end&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>各位想想下面的输出顺序是什么吧？<br>我先说一下我的答案吧：</p>\n<blockquote>\n<p>end<br>p<br>setTime</p>\n</blockquote>\n<p>上面的输出是错误的 😥，我是怎么也不开心啊，于是我就开始翻遍各种资料，其中包括任务、微任务、JavaScript 事件循环、Promise 等等资料。下面就让我来细说吧。</p>","more":"<p><strong>首先介绍几个重要的概念。</strong></p>\n<h2 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h2><h3 id=\"任务（宏任务）\"><a href=\"#任务（宏任务）\" class=\"headerlink\" title=\"任务（宏任务）\"></a>任务（宏任务）</h3><p>任务有以下三类：</p>\n<ul>\n<li>一段新程序或子程序被直接执行时（比如从一个控制台，或在一个 &lt;script&gt; 元素中运行代码）。</li>\n<li>触发了一个事件，将其<strong>回调函数</strong>添加到任务队列时。</li>\n<li>执行到一个由 setTimeout() 或 setInterval() 创建的 timeout 或 interval，以致相应的<strong>回调函数</strong>被添加到任务队列时。</li>\n<li>setImmediate()回调（nodejs）</li>\n<li>I/O</li>\n<li>UI</li>\n<li>postMessage</li>\n<li>requestAnimationFrame</li>\n</ul>\n<h3 id=\"微任务\"><a href=\"#微任务\" class=\"headerlink\" title=\"微任务\"></a>微任务</h3><ul>\n<li>promise.then(callback)中的<strong>callback</strong>。</li>\n<li>MutationObserver</li>\n<li>process.nextTick(Node.js)</li>\n</ul>\n<h3 id=\"执行栈\"><a href=\"#执行栈\" class=\"headerlink\" title=\"执行栈\"></a>执行栈</h3><p>函数的互相调用会让函数树形成一个调用栈，而函数的执行会按照这个栈来执行，即后进先执行。执行栈会占用 JavaScript 的 run time。</p>\n<h3 id=\"执行上下文\"><a href=\"#执行上下文\" class=\"headerlink\" title=\"执行上下文\"></a>执行上下文</h3><p>JavaScript 在运行时，是运行在执行上下文中的，每一个上下文拥有自己的变量、对象，执行上下文有如下几类：</p>\n<ul>\n<li>全局上下文：在 JavaScript 开始执行时便创建，是最基础的上下文。</li>\n<li>函数上下文（局部上下文）：在函数调用时会创建，一个函数的执行，伴随一个函数上下文的产生。</li>\n<li>eval 上下文：使用 eval 函数所创建的上下文。</li>\n</ul>\n<h3 id=\"JavaScript-RunTime\"><a href=\"#JavaScript-RunTime\" class=\"headerlink\" title=\"JavaScript RunTime\"></a>JavaScript RunTime</h3><p>执行 js 代码时，运行时引擎拥有一系列的代理，每一个代理由一系列的执行上下文、执行栈、主线程、附加线程（worker）、任务队列、微任务队列。常见的 JavaScript run time 有 iframe、web worker、JavaScript 主线程。</p>\n<h3 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h3><p>事件循环负责收集用事件（包括用户事件以及其他非用户事件等）、对任务进行排队以便在合适的时候执行回调。然后它执行所有处于等待中的 JavaScript 任务（宏任务），然后是微任务，然后在开始下一次循环之前执行一些必要的渲染和绘制操作。每一个 JavaScript run time 都会拥有自己的事件循环，RunTime 里面的代理由事件循环所驱动。<br><strong>事件循环分为三类：</strong></p>\n<h4 id=\"window-event-loop\"><a href=\"#window-event-loop\" class=\"headerlink\" title=\"window event loop\"></a>window event loop</h4><p>驱动同源的窗口（Frame,Tab）的事件循环，来自相同 origin 的 window 可能共享同一个事件循环</p>\n<h4 id=\"worker-event-loop\"><a href=\"#worker-event-loop\" class=\"headerlink\" title=\"worker event loop\"></a>worker event loop</h4><p>驱动 worker 执行（web workers、 shared workers、service workers）worker 拥有一个或多个与主程序不同的代理。</p>\n<h4 id=\"worklet-event-loop\"><a href=\"#worklet-event-loop\" class=\"headerlink\" title=\"worklet event loop\"></a>worklet event loop</h4><p>驱动 worklet 代理的运行。worklet 的类型包括（Worklet、AudioWorklet、PaintWorklet）。</p>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>一种异步 JavaScript 的解决方案，是对异步方法的返回值的一种描述，用于在将来某个时刻将异步结果返回给使用者，最重要的一点是通过 then 链式调用。</p>\n<h2 id=\"事件循环机制\"><a href=\"#事件循环机制\" class=\"headerlink\" title=\"事件循环机制\"></a>事件循环机制</h2><p>在每一轮事件循环开始时，RunTime 会从任务队列里面取出任务来执行，如果任务里面又添加了新任务到队列里面，新任务不会再本轮事件循环里去执行。当一个任务执行完弹出任务队列时，并且执行栈位空时，这时会开始执行微任务队列，微任务不会像任务那样每次只执行一个，而是将微任务队列里的微任务执行完，即使是在执行微任务时有新的微任务加入到微任务队列，在下一个任务开始以及事件循环迭代结束之前依然会执行微任务。<br>OK，说到这儿，我们就可以来分析以下刚才的题了。</p>\n<h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;p&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;setTime&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;end&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>最开始：</strong>将整体代码（一段新程序）加入任务队列。此时的 JavaScript RunTime 的情况如下图：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122218.png\" alt=\"1\"></p>\n<p>此时任务队列里面仅有整体程序，而微任务队列里面什么也没有。整体程序将进入执行栈中执行。<br><strong>创建 promise 对象：</strong>在创建 promise 对象时，传入了可选参数即：</p>\n<blockquote>\n<p>(resolve,reject)=&gt;{<br>console.log(‘p’);<br>}</p>\n</blockquote>\n<p>而 Promise 构造器将会在返回新对象之前执行传入的函数参数。所以在执行栈中会执行 console.log(‘p’)，打印出 ‘p’。<br><strong>执行定时器：</strong>执行定时器，会在传入的延迟时间之后将回调函数加入队列，加入什么队列呢，这里加入的是任务队列，因为 settimeoout 的回调属于宏任务。之后，当前执行栈不为空，会继续执行。<br><strong>打印 end:<strong>在执行 console.log(‘end’)后，现在执行栈为空了，整体程序弹出任务队列。此时任务队列是</strong>不为空的</strong>（包含定时器的回调()=&gt;{console.log(‘setTime’)}）</p>\n<p>此时的 JavaScript RunTime 的情况如下图：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122230.png\" alt=\"2\"><br>这时的任务队列包括定时器的回调，而微任务队列依然为空（这道题就没涉及到微任务。。。）。随后定时器回调将进入执行栈，打印出 setTime。所以最终的打印结果为：</p>\n<blockquote>\n<p>p<br>end<br>setTime</p>\n</blockquote>\n<p><strong>这里就注意 promise 的构建就行了，是立即执行，我错的是应为它会进入微任务队列。而 Promise 进入微任务的是 then 的回调函数。</strong></p>\n<h2 id=\"扩展题目\"><a href=\"#扩展题目\" class=\"headerlink\" title=\"扩展题目\"></a>扩展题目</h2><p>上面的题没有涉及微任务，那我们改改原题目看看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p_2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;p_2&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 定时器1</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    res(<span class=\"string\">&quot;定时器1&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(v));</span><br><span class=\"line\"><span class=\"comment\">// 定时器2</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;定时器2&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;end&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上面新增的是在创建 Promise 对象时增加了一个定时器，以及增加了对 then 的回调。<br>依旧从整体程序开始，进入任务队列，当整体程序执行完时，这时的 RunTime 情况如下：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122252.png\" alt=\"3\"><br>此时输出为：</p>\n<blockquote>\n<p>p_2<br>end</p>\n</blockquote>\n<p>按照队列先进先出，定时器 1 先进入队列，所以其先于定时器 2 执行。此时定时器 1 的回调进入执行栈执行，执行 res(‘定时器 1’)改变 promise 的状态为 resolve,将 then 的回调加入微任务队列，此时 RunTime 的情况如下：<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122258.png\" alt=\"4\"></p>\n<p>定时器 1 执行完毕弹出任务队列，一个任务执行完后，检索微任务队列，这时微任务队列存在一个 then 回调，所以将其加入执行栈。</p>\n<p>现在的输出是：</p>\n<blockquote>\n<p>p_2<br>end<br>定时器 1</p>\n</blockquote>\n<p>最终，只剩下了任务队列的定时器 2 回调，重复时间循环，将定时器 2 的回调加入执行栈并执行。最终的输出结果为：</p>\n<blockquote>\n<p>p_2<br>end<br>定时器 1<br>定时器 2</p>\n</blockquote>\n<p>上面这题就说明了一个任务弹出任务队列后会执行微任务队列的任务，可是在上面的概念一章中还提到了一个任务出队列后是要执行所有的微任务，而上面的那一题只有一个微任务看不出什么蹊跷，那么我们再改一下吧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p_2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;p_2&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 定时器1</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    res(<span class=\"string\">&quot;定时器1&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;微任务开始&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.queueMicrotask(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 函数的内容</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 定时器2</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;定时器2&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;end&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这次我们更改了 then 的回调，使用了 window.queueMicrotask()来添加回调到微任务队列。这次是添加五个输出到微任务队列里面。顺着上一题的思路，我们只需将上一题的输出<strong>‘定时器 1’</strong>更改一下就行了。按照一次执行掉所有微任务的结论，我们可以作出如下更改。</p>\n<blockquote>\n<p>p_2<br>end<br>微任务开始<br>0<br>1<br>2<br>3<br>4<br>定时器 2</p>\n</blockquote>\n<p>在 chrome 里面试一下吧：）<br><img src=\"https://cdn.jsdelivr.net/gh/PancakeDogLLL/imageBed/img/202201122327.png\" alt=\"5\"></p>\n<p>可以看见，结论正确。</p>\n<p><strong>参考：</strong><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide\">https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth\">https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth</a></p>"},{"title":"svg基础","date":"2022-07-21T07:52:53.000Z","_content":"\n## 一 、定义\n\nsvg（Scalable Vector Graphics）可缩放的矢量图形，是 W3C XML 的分支语言之一，用于标记可缩放的矢量图形。\n\n<!-- more -->\n\n## 二、命名空间\n\n定义的命名空间可以把通配、元素、属性选择器限制在指定命名空间里的元素。\n\n### 声明命名空间\n\n使用xmlns属性进行命名空间的声明，下面的声明意味着svg以及它的子节点都属于“http://www.w3.org/2000/svg”这个svg命名空间。\n\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\">\n\n</svg>\n```\n\n## 三、SVG 元素\n\nSee more：[mdn-svg元素参考](https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element#svg_%E5%85%83%E7%B4%A0%EF%BC%88%E6%8C%89%E7%B1%BB%E5%88%AB%E5%88%86%E7%B1%BB%EF%BC%89)\n\n![image.png](https://p-bytetech.bytedance.net/tos-cn-i-vz0z6vmpra/7dfd2742543f46309944295368f166e2~tplv-vz0z6vmpra-image.image)\n> 上面列出了一些常见以及常用的svg元素，下面我们可以来看看它们是什么样子的以及怎么改变它们的属性。\n\n## 四、图形元素\n\n### 基础图形元素\n\n{% oembed https://codepen.io/l-jour/pen/RwMVwNE %}\n\n### 线段属性\n\n对于stroke填充的线段来说，stroke-dasharray与stroke-dashoffset是两个比较有用的属性。\n\n-   stroke-dasharray：控制用控制线段实线与虚线的单元长度。\n\n<!---->\n\n-   stroke-dasharray：控制虚线的偏移\n\n> stroke-dasharray结合animate的例子\n\n{% oembed https://codepen.io/l-jour/pen/ZExoMmN %}\n\n> 使用stroke-dashoffset与animateTransform、animate绘制加载动画\n\n用animate控制stroke-dashoffset虚线部分的偏移，同时animateTransform控制整个圆环的自转。\n\n{% oembed https://codepen.io/l-jour/pen/ExELqMa %}\n\n> 心电图\n\n这里主要思路就是使用polyline绘制折线图，使用stroke-dasharray绘制虚线，stroke-dashoffset控制虚线空白处的偏移，然后用animate控制stroke-dashoffset的值，就能看见这种线段移动的效果了🫥\n\n{% oembed https://codepen.io/l-jour/pen/qBoYyxL %}\n\n### 强大的path元素\n\n上面的基本图形都是可以用path来创建的，而path的功能远远不止上面这些图形😏。path元素的形状通过属性d来定义，属性d的值是一个“命令+参数”的序列。下面就列出了一些常用的命令。\n\n#### 直线命令\n\n1.  Moveto\n\n    1.  `M x,y` 在这里x和y是绝对坐标，分别代表水平坐标和垂直坐标。\n    1.  `m dx,dy` 在这里dx和dy是相对于当前点的距离，分别是向右和向下的距离。\n\n<!---->\n\n2.  Lineto\n\n-   `Lineto`指令将绘制一条直线段。这个直线段从当前位置移到指定位置\n-   -   `Lx,y` x与y是绝对坐标，分别代表水平坐标和垂直坐标\n    -   `ldx,dy` dx和dy是相对于当前点的距离，分别是向右和向下的距离\n    -   `Hx` 绝对坐标，水平移动\n    -   `Vy` 绝对坐标，垂直移动\n    -   `hdx` 水平移动相对距离\n    -   `vdy` 垂直移动相对距离\n\n3.  Z or z：闭合路径\n\n{% oembed https://codepen.io/l-jour/pen/NWYjyxL %}\n\n#### 曲线命令\n\n小写的指令意义同上，都是跟相对的距离\n\n1.  Curveto\n\n    1.    C命令创建一个三次贝塞尔曲线，其中 (x1,y1) (x2,y2)为控制点，x,y为曲线终点\n    1.  ` C x1 y1, x2 y2, x y  `or `c dx1 dy1, dx2 dy2, dx dy`\n\n<!---->\n\n2.  Smooth Curveto\n\n    1.    S命令可以用来创建于与前面一样的贝塞尔曲线，如果S命令跟在一个C或S命令后面，则它的第一个控制点会被假设成前一个命令曲线的第二个控制点的中心对称点。如果S命令单独使用，前面没有C或者S命令，那当前点将作为第一个控制点。最大的作用就是光滑地连接两条曲线\n    1.  `S x2 y2,x y` or `s dx2 dy2, dx dy`\n\n> C、S命令例子\n\n{% oembed https://codepen.io/l-jour/pen/rNdmJma %}\n\n3.  Quadratic Bézier curveto\n\n-   Q命令用来创建一条二次贝塞尔曲线，只需要一个控制点\n-   -   `Q x1 y1,x y` or `q dx1 dx2,dx dy`\n\n4.  Smooth quadratic Bézier curveto\n\n-   T命令类似S命令，用于平滑链接二次贝塞尔曲线\n-   -   ` T x1 y1  `or `t dx dy`\n\n> Q、T命令例子\n\n{% oembed https://codepen.io/l-jour/pen/PoRJaqN %}\n\n5.  Arc\n\n-   A命令也可以用于绘制曲线\n-   -   `A rx ry x-axis-rotation large-arc-flag sweep-flag x y` `a rx ry x-axis-rotation large-arc-flag sweep-flag dx dy`\n    -     参数说明：\n    -     rx ry: x、y轴半径\n    -     X-axis-rotation: 绕x轴旋转角度\n    -     large-arc-flag：0-弧小于180度、1-弧大于180度\n    -     sweep-flag：0-逆时针画弧、1-顺时针画弧\n    -     x y：终点坐标\n\n## 五、动画\n\n> 放入形状元素内部，在指定的时间段里，设置相关属性的开始与结束值，变化曲线等。\n\n-   #### 动画元素\n-   -   animate：用来定义一个元素的某个属性在相应时间的变化\n    -   animateTransform：改变目标元素上的一个变形属性，控制旋转、缩放、平移、斜切变换\n    -   animateMotion：定义目标元素如何沿一个路径运动\n    -   discard：指定在何时丢弃特定元素，从而减少 SVG 用户代理所需的资源。\n    -   mpath：配合animateMotion，可代替animateMotion的path属性，用于引用一个外部的path\n    -   set：可以用来设定一个属性值，并为该值赋予一个持续时间。它支持所有的属性类型， 包括那些原理上不能插值的， 例如值为字符串和布尔类型的属性。 set 元素是非叠加的。无法在其上使用 additive 属性或 accumulate 属性，即使声明了这些属性也会自动被忽略。\n\n{% oembed https://codepen.io/l-jour/pen/wvmrYLy %}\n\n#### 动画属性\n\n这里大致可以分为三类：\n\n1.  取值属性：控制要动画的属性（如x坐标，width等属性）的值\n\n    1.  **calcMode：** 设置动画的变化曲线（discrete | linear | paced | spline），除了animateMotion默认是paced外，其他是默认linear，当一些不支持线性变化的属性值（string类型的）就会变为discrete。\n\n    1.  **values：** 定义动画过程中的值序列（一个或多个值的分号分隔列表）的值。 如果指定了此属性，则将忽略在元素上设置的任何 `from`, `to`, 和 `by` 属性值。\n\n    1.  **keyTimes：** 以分号分隔的时间值列表，用于控制动画的执行步骤。列表中的每个值与`values`中的值一一对应，定义了`values`中的值在动画中何时执行，keyTimes 列表中的每一个值都是指定在 [0-1] 之间的浮点数，表示动画的完成时间。每一个连续的时间值必须大于等于前一个时间值。\n\n        -   对于 linear 和 spline动画，列表中的第一个时间值必须为 0，列表的最后一个时间值必须为 1。与每个 value 关联的时间值定义了何时设置该 value，该 value 在 keyTimes 的时间 值的中间插值。\n        -   对于 discrete动画，列表中的第一个值必须为 0。与每个 value 关联的时间值定义了何时设置该 value，动画函数使用该 value，直到 keyTimes 中定义的下一个时间值。\n        -   如果插值模式是 paced动画，keyTimes 属性被忽略。\n\n    1.  **keySplines：** 定义了一组与 keyTimes 列表关联的 Bézier 曲线控制点，定义了一个控制间隔（keyTimes的值列表长度减1即为间隔数）的三次 Bézier 函数。只有spline动画才会有效。\n\n    1.  **from：** 指定属性的开始值\n\n    1.  **by：** 指定将在动画期间修改的属性的相对偏移值\n\n    1.  **to：** 表示将在动画期间修改的属性的最终值\n\n> 取值属性例子\n\n{% oembed https://codepen.io/l-jour/pen/WNzdXNZ %}\n\n2.  时间属性：控制动画如何开始，何时开始、重复次数等\n\n    1.  **begin：** 动画开始时间\n\n    1.  **end：** 动画结束时间\n\n    1.  **dur：** 动画持续时间\n\n    1.  **min/max：** 限制动画的最小/大持续时间\n\n    1.  **restart：** 控制动画是否可以重新开始\n\n        -   `always` ：任何时候都可重新开始\n        -   `whenNotActive` ：非动画时可重新开始\n        -   `never` ：任何时候都不能重新开始\n\n    1.  **repeatCount：** 指定动画重复的次数、值必须大于 0。\n\n    1.  **repeatDur：** 指定动画的重复时间\n\n    1.  **fill：** 控制动画结束时的状态。有两个值可选\n\n        -   remove：在动画的激活持续时间结束后，动画效果会移除（不再应用）。在动画的激活结束后，动画不再对目标元素有影响（除非动画重新开始）。\n        -   freeze：在动画激活持续时间结束后，文档持续时间的剩余时间里（或者直到动画重新开始）动画效果会“冻结”着。（保持动画终态）\n\n<!---->\n\n3.  目标属性：控制要动画的属性\n\n    1.  a**ttributeType：** 当attributeType=\"XML\"时，attributeName被认为是XML的属性；当attributeType=\"CSS\"时，attributeName被认为是css的属性；不指定attributeType时，默认为\"auto\"，会先将attributeName作为css的属性，如果无效，再将attributeName作为XML的属性。\n    1.  **attributeName：** 要动画的属性名\n\n<!---->\n\n4.  其他属性：additive、accumulate\n\n    1.  **additive：** 控制动画属性是否是附加的。\n    1.  **accumulate：** 在原来的结果的基础上重复动画的时候每一次循环都累加。这个属性告诉动画是否是每次循环，前一个动画属性值要加上去。需要设置from与to属性。\n\n> additive、accumulate例子\n\n{% oembed https://codepen.io/l-jour/pen/PoREOjj %}\n\n## 六、结构元素\n\n> 结构元素关注的是复用\n\n-   **defs：** 定义一个复用的图形。在`defs`元素中定义的图形元素不会直接呈现。 你可以在你的视口的任意地方利用 `use`元素呈现这些元素。\n\n<!---->\n\n-   **g：** 组合子元素的容器，g元素的属性会被其所有的子元素继承 。与`defs`相比，g定义的除了复用外，在定义时会进行渲染。\n\n<!---->\n\n-   **symbol：** 定义一个图形模版对象，使用`use`元素实例化。`symbol`元素对图形的作用是在同一文档中多次使用，添加结构和语义。symbol通过`use`调用时，` <use  ``/``>`可以设置height、width控制实际绘制的大小。\n\n<!---->\n\n-   **svg** **：** 如果 `svg` 不是根元素，`svg` 元素可以用于在当前文档（比如说，一个 HTML 文档）内嵌套一个独立的 svg 片段 。 这个独立片段拥有独立的视口和坐标系统。\n\n<!---->\n\n-   **marker：** 定义了在特定的path元素、line元素、polyline元素或者polygon元素上绘制箭头或者多边形标记图形。\n\n    -   refx：定义元素参考点的x坐标 (默认是0)\n    -   refy：定义元素参考点的y坐标 (默认是0)\n    -   markerWidth：表示根据 viewBox 和 preserveAspectRatio 属性渲染 `<marker>` 时要适合的视口宽度\n    -   markerHeight：表示根据 viewBox 和 preserveAspectRatio 属性渲染 ` <marker>  `时要适合的视口高度\n    -   markerUnits：指示标记放置在形状上的位置时如何旋转\n\n<!---->\n\n-   mask\n\n{% oembed https://codepen.io/l-jour/pen/GRxmgEN %}\n\n## 七、滤镜元素\n\n### 相关标签\n\n> 滤镜通过`<filter>`在`<defs>`中进行定义，在filter标签中提供一系列图元，使用滤镜只需为svg元素设置filter属性即可。\n\n### 常见属性\n\n-   in：标识输入的原语\n\n    -   SourceGraphic：该关键词表示图形元素自身将作为`<filter>`原语的原始输入\n    -   SourceAlpha：该关键词表示图形元素自身将作为`<filter>`原语的原始输入. SourceAlpha 与 SourceGraphic 具有相同的规则除了 SourceAlpha 只使用元素的透明度。\n    -   BackgroundImage：该关键词表示 filter 元素当前底下的区域的图形快照将被调用。\n    -   BackgroundAlpha：BackgroundImage 相同除了只使用透明度。\n    -   FillPaint：此关键字表示过滤效果的目标元素上的`fill`属性值。在许多情况下，FillPaint 在任何地方都是不透明的，但如果形状是使用渐变或图案绘制的，它本身包括透明或半透明部分，则情况可能并非如此。\n    -   StrokePaint：此关键字表示滤镜效果的目标元素上的笔画属性的值。在许多情况下，StrokePaint 在任何地方都是不透明的，但如果形状是使用渐变或图案绘制的，它本身包括透明或半透明部分，则情况可能并非如此。\n\n<!---->\n\n-   in2：in2 属性标识给定filter原语的第二个输入。它的工作原理与 in 属性完全相同。\n\n\n> colorMatrix颜色矩阵变换\n\n```typescript\n/* R G B A 1 颜色矩阵计算 */\n 1 0 0 0 0 // R = 1*R + 0*G + 0*B + 0*A + 0 \n 0 1 0 0 0 // G = 0*R + 1*G + 0*B + 0*A + 0 \n 0 0 1 0 0 // B = 0*R + 0*G + 1*B + 0*A + 0 \n 0 0 0 1 0 // A = 0*R + 0*G + 0*B + 1*A + 0\n```\n\n{% oembed https://codepen.io/l-jour/pen/xxWzjde %}\n\n\n> 使用feGaussianBlur、feColorMatrix、feBlend实现粘稠效果\n\n{% oembed https://codepen.io/l-jour/pen/JjLZbQO %}\n\n\n> 使用feComposite并设置operator为in，控制显示图像的一部分。\n\n关于feComposite，更多可以看这里：[feComposite](https://apike.ca/prog_svg_filter_feComposite.html)\n\n{% oembed https://codepen.io/l-jour/pen/wvmXOwZ %}\n\n\n\n> feDisplacementMap、feTurbulence\n\nfeDisplacementMap推荐看这篇：[深入理解SVG feDisplacementMap滤镜及实际应用](https://www.zhangxinxu.com/wordpress/2017/12/understand-svg-fedisplacementmap-filter/)\n\nfeTurbulence推荐看这篇：[说说SVG的feTurbulence滤镜](https://zhuanlan.zhihu.com/p/366438535)\n\n位置转换公式：\n\n`P'(x,y) ← P(x + scale * (XC(x,y) - 0.5), y + scale * (YC(x,y) - 0.5))`\n\n{% oembed https://codepen.io/l-jour/pen/OJvwJqV %}\n\n## 八、渐变元素\n-   -   ###   linearGradient：线性渐变-   gradientUnits: 控制渐变坐标的单位-   gradientTransform: 对渐变坐标系进行变换（translate、skew、rotate。。。）-   x1：线性渐变起点x坐标-   y1：线性渐变起点y坐标-   x2：线性渐变终点x坐标-   y2：线性渐变终点y坐标-   spreadMethod：定义如何在渐变之外填充\n\n            -   pad：用渐变终点颜色去填充额外区域\n            -   repeat：按照开始的渐变顺序重复\n            -   reflect：按照开始的渐变相反顺序重复\n{% oembed https://codepen.io/l-jour/pen/JjLMMjR %}\n    -   ###   radialGradient：径向渐变-   gradientUnits：控制渐变坐标的单位-   gradientTransform：对渐变坐标系进行变换（translate、skew、rotate。。。）-   cx: 用来定义径向渐变终止圆的 x 轴坐标(默认50%)。-   cy：用来定义径向渐变终止圆的 y 轴坐标。-   r：用来定义径向渐变终止圆的半径。-   fx：用来定义径向渐变的焦点的 x 轴坐标-   fy：用来定义径向渐变的焦点的 y 轴坐标-   spreadMethod：确定如何在渐变的定义边缘之外填充形状。\n\n            -   pad：用渐变终点颜色去填充额外区域\n            -   repeat：按照开始的渐变顺序重复\n            -   reflect：按照开始的渐变相反顺序重复\n    -   stop：渐变的颜色坡度\n{% oembed https://codepen.io/l-jour/pen/OJvwJqV %}\n\n## 九、关于svg与canvas\n\n可以看看msdn的文章[如何为您的网站在Canvas和SVG之间做出选择](https://docs.microsoft.com/zh-cn/previous-versions/msdn10/Hh377884(v=MSDN.10))\n\n## 总结\n\nsvg的世界非常丰富，并且很多属性可以作用不同的元素、拥有不同的效果。元素直接有可以搭配使用，如多个动画，多个滤镜等等，滤镜元素还涉及更多领域知识。总之，元素种类、元素属性非常多，还是需要得慢慢地学习、阅读相关的案例并操作一下才能有所掌握。\n\n-   ## Reference\n-   -   [feComposite](https://apike.ca/prog_svg_filter_feComposite.html)\n    -   [贝塞尔曲线-wiki](https://zh.wikipedia.org/zh-cn/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A)\n\n","source":"_posts/svg基础.md","raw":"---\ntitle: svg基础\ndate: 2022-07-21 15:52:53\ntags:\n---\n\n## 一 、定义\n\nsvg（Scalable Vector Graphics）可缩放的矢量图形，是 W3C XML 的分支语言之一，用于标记可缩放的矢量图形。\n\n<!-- more -->\n\n## 二、命名空间\n\n定义的命名空间可以把通配、元素、属性选择器限制在指定命名空间里的元素。\n\n### 声明命名空间\n\n使用xmlns属性进行命名空间的声明，下面的声明意味着svg以及它的子节点都属于“http://www.w3.org/2000/svg”这个svg命名空间。\n\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\">\n\n</svg>\n```\n\n## 三、SVG 元素\n\nSee more：[mdn-svg元素参考](https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element#svg_%E5%85%83%E7%B4%A0%EF%BC%88%E6%8C%89%E7%B1%BB%E5%88%AB%E5%88%86%E7%B1%BB%EF%BC%89)\n\n![image.png](https://p-bytetech.bytedance.net/tos-cn-i-vz0z6vmpra/7dfd2742543f46309944295368f166e2~tplv-vz0z6vmpra-image.image)\n> 上面列出了一些常见以及常用的svg元素，下面我们可以来看看它们是什么样子的以及怎么改变它们的属性。\n\n## 四、图形元素\n\n### 基础图形元素\n\n{% oembed https://codepen.io/l-jour/pen/RwMVwNE %}\n\n### 线段属性\n\n对于stroke填充的线段来说，stroke-dasharray与stroke-dashoffset是两个比较有用的属性。\n\n-   stroke-dasharray：控制用控制线段实线与虚线的单元长度。\n\n<!---->\n\n-   stroke-dasharray：控制虚线的偏移\n\n> stroke-dasharray结合animate的例子\n\n{% oembed https://codepen.io/l-jour/pen/ZExoMmN %}\n\n> 使用stroke-dashoffset与animateTransform、animate绘制加载动画\n\n用animate控制stroke-dashoffset虚线部分的偏移，同时animateTransform控制整个圆环的自转。\n\n{% oembed https://codepen.io/l-jour/pen/ExELqMa %}\n\n> 心电图\n\n这里主要思路就是使用polyline绘制折线图，使用stroke-dasharray绘制虚线，stroke-dashoffset控制虚线空白处的偏移，然后用animate控制stroke-dashoffset的值，就能看见这种线段移动的效果了🫥\n\n{% oembed https://codepen.io/l-jour/pen/qBoYyxL %}\n\n### 强大的path元素\n\n上面的基本图形都是可以用path来创建的，而path的功能远远不止上面这些图形😏。path元素的形状通过属性d来定义，属性d的值是一个“命令+参数”的序列。下面就列出了一些常用的命令。\n\n#### 直线命令\n\n1.  Moveto\n\n    1.  `M x,y` 在这里x和y是绝对坐标，分别代表水平坐标和垂直坐标。\n    1.  `m dx,dy` 在这里dx和dy是相对于当前点的距离，分别是向右和向下的距离。\n\n<!---->\n\n2.  Lineto\n\n-   `Lineto`指令将绘制一条直线段。这个直线段从当前位置移到指定位置\n-   -   `Lx,y` x与y是绝对坐标，分别代表水平坐标和垂直坐标\n    -   `ldx,dy` dx和dy是相对于当前点的距离，分别是向右和向下的距离\n    -   `Hx` 绝对坐标，水平移动\n    -   `Vy` 绝对坐标，垂直移动\n    -   `hdx` 水平移动相对距离\n    -   `vdy` 垂直移动相对距离\n\n3.  Z or z：闭合路径\n\n{% oembed https://codepen.io/l-jour/pen/NWYjyxL %}\n\n#### 曲线命令\n\n小写的指令意义同上，都是跟相对的距离\n\n1.  Curveto\n\n    1.    C命令创建一个三次贝塞尔曲线，其中 (x1,y1) (x2,y2)为控制点，x,y为曲线终点\n    1.  ` C x1 y1, x2 y2, x y  `or `c dx1 dy1, dx2 dy2, dx dy`\n\n<!---->\n\n2.  Smooth Curveto\n\n    1.    S命令可以用来创建于与前面一样的贝塞尔曲线，如果S命令跟在一个C或S命令后面，则它的第一个控制点会被假设成前一个命令曲线的第二个控制点的中心对称点。如果S命令单独使用，前面没有C或者S命令，那当前点将作为第一个控制点。最大的作用就是光滑地连接两条曲线\n    1.  `S x2 y2,x y` or `s dx2 dy2, dx dy`\n\n> C、S命令例子\n\n{% oembed https://codepen.io/l-jour/pen/rNdmJma %}\n\n3.  Quadratic Bézier curveto\n\n-   Q命令用来创建一条二次贝塞尔曲线，只需要一个控制点\n-   -   `Q x1 y1,x y` or `q dx1 dx2,dx dy`\n\n4.  Smooth quadratic Bézier curveto\n\n-   T命令类似S命令，用于平滑链接二次贝塞尔曲线\n-   -   ` T x1 y1  `or `t dx dy`\n\n> Q、T命令例子\n\n{% oembed https://codepen.io/l-jour/pen/PoRJaqN %}\n\n5.  Arc\n\n-   A命令也可以用于绘制曲线\n-   -   `A rx ry x-axis-rotation large-arc-flag sweep-flag x y` `a rx ry x-axis-rotation large-arc-flag sweep-flag dx dy`\n    -     参数说明：\n    -     rx ry: x、y轴半径\n    -     X-axis-rotation: 绕x轴旋转角度\n    -     large-arc-flag：0-弧小于180度、1-弧大于180度\n    -     sweep-flag：0-逆时针画弧、1-顺时针画弧\n    -     x y：终点坐标\n\n## 五、动画\n\n> 放入形状元素内部，在指定的时间段里，设置相关属性的开始与结束值，变化曲线等。\n\n-   #### 动画元素\n-   -   animate：用来定义一个元素的某个属性在相应时间的变化\n    -   animateTransform：改变目标元素上的一个变形属性，控制旋转、缩放、平移、斜切变换\n    -   animateMotion：定义目标元素如何沿一个路径运动\n    -   discard：指定在何时丢弃特定元素，从而减少 SVG 用户代理所需的资源。\n    -   mpath：配合animateMotion，可代替animateMotion的path属性，用于引用一个外部的path\n    -   set：可以用来设定一个属性值，并为该值赋予一个持续时间。它支持所有的属性类型， 包括那些原理上不能插值的， 例如值为字符串和布尔类型的属性。 set 元素是非叠加的。无法在其上使用 additive 属性或 accumulate 属性，即使声明了这些属性也会自动被忽略。\n\n{% oembed https://codepen.io/l-jour/pen/wvmrYLy %}\n\n#### 动画属性\n\n这里大致可以分为三类：\n\n1.  取值属性：控制要动画的属性（如x坐标，width等属性）的值\n\n    1.  **calcMode：** 设置动画的变化曲线（discrete | linear | paced | spline），除了animateMotion默认是paced外，其他是默认linear，当一些不支持线性变化的属性值（string类型的）就会变为discrete。\n\n    1.  **values：** 定义动画过程中的值序列（一个或多个值的分号分隔列表）的值。 如果指定了此属性，则将忽略在元素上设置的任何 `from`, `to`, 和 `by` 属性值。\n\n    1.  **keyTimes：** 以分号分隔的时间值列表，用于控制动画的执行步骤。列表中的每个值与`values`中的值一一对应，定义了`values`中的值在动画中何时执行，keyTimes 列表中的每一个值都是指定在 [0-1] 之间的浮点数，表示动画的完成时间。每一个连续的时间值必须大于等于前一个时间值。\n\n        -   对于 linear 和 spline动画，列表中的第一个时间值必须为 0，列表的最后一个时间值必须为 1。与每个 value 关联的时间值定义了何时设置该 value，该 value 在 keyTimes 的时间 值的中间插值。\n        -   对于 discrete动画，列表中的第一个值必须为 0。与每个 value 关联的时间值定义了何时设置该 value，动画函数使用该 value，直到 keyTimes 中定义的下一个时间值。\n        -   如果插值模式是 paced动画，keyTimes 属性被忽略。\n\n    1.  **keySplines：** 定义了一组与 keyTimes 列表关联的 Bézier 曲线控制点，定义了一个控制间隔（keyTimes的值列表长度减1即为间隔数）的三次 Bézier 函数。只有spline动画才会有效。\n\n    1.  **from：** 指定属性的开始值\n\n    1.  **by：** 指定将在动画期间修改的属性的相对偏移值\n\n    1.  **to：** 表示将在动画期间修改的属性的最终值\n\n> 取值属性例子\n\n{% oembed https://codepen.io/l-jour/pen/WNzdXNZ %}\n\n2.  时间属性：控制动画如何开始，何时开始、重复次数等\n\n    1.  **begin：** 动画开始时间\n\n    1.  **end：** 动画结束时间\n\n    1.  **dur：** 动画持续时间\n\n    1.  **min/max：** 限制动画的最小/大持续时间\n\n    1.  **restart：** 控制动画是否可以重新开始\n\n        -   `always` ：任何时候都可重新开始\n        -   `whenNotActive` ：非动画时可重新开始\n        -   `never` ：任何时候都不能重新开始\n\n    1.  **repeatCount：** 指定动画重复的次数、值必须大于 0。\n\n    1.  **repeatDur：** 指定动画的重复时间\n\n    1.  **fill：** 控制动画结束时的状态。有两个值可选\n\n        -   remove：在动画的激活持续时间结束后，动画效果会移除（不再应用）。在动画的激活结束后，动画不再对目标元素有影响（除非动画重新开始）。\n        -   freeze：在动画激活持续时间结束后，文档持续时间的剩余时间里（或者直到动画重新开始）动画效果会“冻结”着。（保持动画终态）\n\n<!---->\n\n3.  目标属性：控制要动画的属性\n\n    1.  a**ttributeType：** 当attributeType=\"XML\"时，attributeName被认为是XML的属性；当attributeType=\"CSS\"时，attributeName被认为是css的属性；不指定attributeType时，默认为\"auto\"，会先将attributeName作为css的属性，如果无效，再将attributeName作为XML的属性。\n    1.  **attributeName：** 要动画的属性名\n\n<!---->\n\n4.  其他属性：additive、accumulate\n\n    1.  **additive：** 控制动画属性是否是附加的。\n    1.  **accumulate：** 在原来的结果的基础上重复动画的时候每一次循环都累加。这个属性告诉动画是否是每次循环，前一个动画属性值要加上去。需要设置from与to属性。\n\n> additive、accumulate例子\n\n{% oembed https://codepen.io/l-jour/pen/PoREOjj %}\n\n## 六、结构元素\n\n> 结构元素关注的是复用\n\n-   **defs：** 定义一个复用的图形。在`defs`元素中定义的图形元素不会直接呈现。 你可以在你的视口的任意地方利用 `use`元素呈现这些元素。\n\n<!---->\n\n-   **g：** 组合子元素的容器，g元素的属性会被其所有的子元素继承 。与`defs`相比，g定义的除了复用外，在定义时会进行渲染。\n\n<!---->\n\n-   **symbol：** 定义一个图形模版对象，使用`use`元素实例化。`symbol`元素对图形的作用是在同一文档中多次使用，添加结构和语义。symbol通过`use`调用时，` <use  ``/``>`可以设置height、width控制实际绘制的大小。\n\n<!---->\n\n-   **svg** **：** 如果 `svg` 不是根元素，`svg` 元素可以用于在当前文档（比如说，一个 HTML 文档）内嵌套一个独立的 svg 片段 。 这个独立片段拥有独立的视口和坐标系统。\n\n<!---->\n\n-   **marker：** 定义了在特定的path元素、line元素、polyline元素或者polygon元素上绘制箭头或者多边形标记图形。\n\n    -   refx：定义元素参考点的x坐标 (默认是0)\n    -   refy：定义元素参考点的y坐标 (默认是0)\n    -   markerWidth：表示根据 viewBox 和 preserveAspectRatio 属性渲染 `<marker>` 时要适合的视口宽度\n    -   markerHeight：表示根据 viewBox 和 preserveAspectRatio 属性渲染 ` <marker>  `时要适合的视口高度\n    -   markerUnits：指示标记放置在形状上的位置时如何旋转\n\n<!---->\n\n-   mask\n\n{% oembed https://codepen.io/l-jour/pen/GRxmgEN %}\n\n## 七、滤镜元素\n\n### 相关标签\n\n> 滤镜通过`<filter>`在`<defs>`中进行定义，在filter标签中提供一系列图元，使用滤镜只需为svg元素设置filter属性即可。\n\n### 常见属性\n\n-   in：标识输入的原语\n\n    -   SourceGraphic：该关键词表示图形元素自身将作为`<filter>`原语的原始输入\n    -   SourceAlpha：该关键词表示图形元素自身将作为`<filter>`原语的原始输入. SourceAlpha 与 SourceGraphic 具有相同的规则除了 SourceAlpha 只使用元素的透明度。\n    -   BackgroundImage：该关键词表示 filter 元素当前底下的区域的图形快照将被调用。\n    -   BackgroundAlpha：BackgroundImage 相同除了只使用透明度。\n    -   FillPaint：此关键字表示过滤效果的目标元素上的`fill`属性值。在许多情况下，FillPaint 在任何地方都是不透明的，但如果形状是使用渐变或图案绘制的，它本身包括透明或半透明部分，则情况可能并非如此。\n    -   StrokePaint：此关键字表示滤镜效果的目标元素上的笔画属性的值。在许多情况下，StrokePaint 在任何地方都是不透明的，但如果形状是使用渐变或图案绘制的，它本身包括透明或半透明部分，则情况可能并非如此。\n\n<!---->\n\n-   in2：in2 属性标识给定filter原语的第二个输入。它的工作原理与 in 属性完全相同。\n\n\n> colorMatrix颜色矩阵变换\n\n```typescript\n/* R G B A 1 颜色矩阵计算 */\n 1 0 0 0 0 // R = 1*R + 0*G + 0*B + 0*A + 0 \n 0 1 0 0 0 // G = 0*R + 1*G + 0*B + 0*A + 0 \n 0 0 1 0 0 // B = 0*R + 0*G + 1*B + 0*A + 0 \n 0 0 0 1 0 // A = 0*R + 0*G + 0*B + 1*A + 0\n```\n\n{% oembed https://codepen.io/l-jour/pen/xxWzjde %}\n\n\n> 使用feGaussianBlur、feColorMatrix、feBlend实现粘稠效果\n\n{% oembed https://codepen.io/l-jour/pen/JjLZbQO %}\n\n\n> 使用feComposite并设置operator为in，控制显示图像的一部分。\n\n关于feComposite，更多可以看这里：[feComposite](https://apike.ca/prog_svg_filter_feComposite.html)\n\n{% oembed https://codepen.io/l-jour/pen/wvmXOwZ %}\n\n\n\n> feDisplacementMap、feTurbulence\n\nfeDisplacementMap推荐看这篇：[深入理解SVG feDisplacementMap滤镜及实际应用](https://www.zhangxinxu.com/wordpress/2017/12/understand-svg-fedisplacementmap-filter/)\n\nfeTurbulence推荐看这篇：[说说SVG的feTurbulence滤镜](https://zhuanlan.zhihu.com/p/366438535)\n\n位置转换公式：\n\n`P'(x,y) ← P(x + scale * (XC(x,y) - 0.5), y + scale * (YC(x,y) - 0.5))`\n\n{% oembed https://codepen.io/l-jour/pen/OJvwJqV %}\n\n## 八、渐变元素\n-   -   ###   linearGradient：线性渐变-   gradientUnits: 控制渐变坐标的单位-   gradientTransform: 对渐变坐标系进行变换（translate、skew、rotate。。。）-   x1：线性渐变起点x坐标-   y1：线性渐变起点y坐标-   x2：线性渐变终点x坐标-   y2：线性渐变终点y坐标-   spreadMethod：定义如何在渐变之外填充\n\n            -   pad：用渐变终点颜色去填充额外区域\n            -   repeat：按照开始的渐变顺序重复\n            -   reflect：按照开始的渐变相反顺序重复\n{% oembed https://codepen.io/l-jour/pen/JjLMMjR %}\n    -   ###   radialGradient：径向渐变-   gradientUnits：控制渐变坐标的单位-   gradientTransform：对渐变坐标系进行变换（translate、skew、rotate。。。）-   cx: 用来定义径向渐变终止圆的 x 轴坐标(默认50%)。-   cy：用来定义径向渐变终止圆的 y 轴坐标。-   r：用来定义径向渐变终止圆的半径。-   fx：用来定义径向渐变的焦点的 x 轴坐标-   fy：用来定义径向渐变的焦点的 y 轴坐标-   spreadMethod：确定如何在渐变的定义边缘之外填充形状。\n\n            -   pad：用渐变终点颜色去填充额外区域\n            -   repeat：按照开始的渐变顺序重复\n            -   reflect：按照开始的渐变相反顺序重复\n    -   stop：渐变的颜色坡度\n{% oembed https://codepen.io/l-jour/pen/OJvwJqV %}\n\n## 九、关于svg与canvas\n\n可以看看msdn的文章[如何为您的网站在Canvas和SVG之间做出选择](https://docs.microsoft.com/zh-cn/previous-versions/msdn10/Hh377884(v=MSDN.10))\n\n## 总结\n\nsvg的世界非常丰富，并且很多属性可以作用不同的元素、拥有不同的效果。元素直接有可以搭配使用，如多个动画，多个滤镜等等，滤镜元素还涉及更多领域知识。总之，元素种类、元素属性非常多，还是需要得慢慢地学习、阅读相关的案例并操作一下才能有所掌握。\n\n-   ## Reference\n-   -   [feComposite](https://apike.ca/prog_svg_filter_feComposite.html)\n    -   [贝塞尔曲线-wiki](https://zh.wikipedia.org/zh-cn/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A)\n\n","slug":"svg基础","published":1,"updated":"2022-08-14T04:28:16.971Z","_id":"cl6g38k4900001bm8hx4w93u0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一-、定义\"><a href=\"#一-、定义\" class=\"headerlink\" title=\"一 、定义\"></a>一 、定义</h2><p>svg（Scalable Vector Graphics）可缩放的矢量图形，是 W3C XML 的分支语言之一，用于标记可缩放的矢量图形。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"二、命名空间\"><a href=\"#二、命名空间\" class=\"headerlink\" title=\"二、命名空间\"></a>二、命名空间</h2><p>定义的命名空间可以把通配、元素、属性选择器限制在指定命名空间里的元素。</p>\n<h3 id=\"声明命名空间\"><a href=\"#声明命名空间\" class=\"headerlink\" title=\"声明命名空间\"></a>声明命名空间</h3><p>使用xmlns属性进行命名空间的声明，下面的声明意味着svg以及它的子节点都属于“<a href=\"http://www.w3.org/2000/svg%E2%80%9D%E8%BF%99%E4%B8%AAsvg%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E3%80%82\">http://www.w3.org/2000/svg”这个svg命名空间。</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、SVG-元素\"><a href=\"#三、SVG-元素\" class=\"headerlink\" title=\"三、SVG 元素\"></a>三、SVG 元素</h2><p>See more：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element#svg_%E5%85%83%E7%B4%A0%EF%BC%88%E6%8C%89%E7%B1%BB%E5%88%AB%E5%88%86%E7%B1%BB%EF%BC%89\">mdn-svg元素参考</a></p>\n<p><img src=\"https://p-bytetech.bytedance.net/tos-cn-i-vz0z6vmpra/7dfd2742543f46309944295368f166e2~tplv-vz0z6vmpra-image.image\" alt=\"image.png\"></p>\n<blockquote>\n<p>上面列出了一些常见以及常用的svg元素，下面我们可以来看看它们是什么样子的以及怎么改变它们的属性。</p>\n</blockquote>\n<h2 id=\"四、图形元素\"><a href=\"#四、图形元素\" class=\"headerlink\" title=\"四、图形元素\"></a>四、图形元素</h2><h3 id=\"基础图形元素\"><a href=\"#基础图形元素\" class=\"headerlink\" title=\"基础图形元素\"></a>基础图形元素</h3><div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/RwMVwNE)</span></div>\n\n<h3 id=\"线段属性\"><a href=\"#线段属性\" class=\"headerlink\" title=\"线段属性\"></a>线段属性</h3><p>对于stroke填充的线段来说，stroke-dasharray与stroke-dashoffset是两个比较有用的属性。</p>\n<ul>\n<li>  stroke-dasharray：控制用控制线段实线与虚线的单元长度。</li>\n</ul>\n<!---->\n\n<ul>\n<li>  stroke-dasharray：控制虚线的偏移</li>\n</ul>\n<blockquote>\n<p>stroke-dasharray结合animate的例子</p>\n</blockquote>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/ZExoMmN)</span></div>\n\n<blockquote>\n<p>使用stroke-dashoffset与animateTransform、animate绘制加载动画</p>\n</blockquote>\n<p>用animate控制stroke-dashoffset虚线部分的偏移，同时animateTransform控制整个圆环的自转。</p>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/ExELqMa)</span></div>\n\n<blockquote>\n<p>心电图</p>\n</blockquote>\n<p>这里主要思路就是使用polyline绘制折线图，使用stroke-dasharray绘制虚线，stroke-dashoffset控制虚线空白处的偏移，然后用animate控制stroke-dashoffset的值，就能看见这种线段移动的效果了🫥</p>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/qBoYyxL)</span></div>\n\n<h3 id=\"强大的path元素\"><a href=\"#强大的path元素\" class=\"headerlink\" title=\"强大的path元素\"></a>强大的path元素</h3><p>上面的基本图形都是可以用path来创建的，而path的功能远远不止上面这些图形😏。path元素的形状通过属性d来定义，属性d的值是一个“命令+参数”的序列。下面就列出了一些常用的命令。</p>\n<h4 id=\"直线命令\"><a href=\"#直线命令\" class=\"headerlink\" title=\"直线命令\"></a>直线命令</h4><ol>\n<li><p>Moveto</p>\n<ol>\n<li> <code>M x,y</code> 在这里x和y是绝对坐标，分别代表水平坐标和垂直坐标。</li>\n<li> <code>m dx,dy</code> 在这里dx和dy是相对于当前点的距离，分别是向右和向下的距离。</li>\n</ol>\n</li>\n</ol>\n<!---->\n\n<ol start=\"2\">\n<li> Lineto</li>\n</ol>\n<ul>\n<li>  <code>Lineto</code>指令将绘制一条直线段。这个直线段从当前位置移到指定位置</li>\n<li><ul>\n<li>  <code>Lx,y</code> x与y是绝对坐标，分别代表水平坐标和垂直坐标</li>\n<li>  <code>ldx,dy</code> dx和dy是相对于当前点的距离，分别是向右和向下的距离</li>\n<li>  <code>Hx</code> 绝对坐标，水平移动</li>\n<li>  <code>Vy</code> 绝对坐标，垂直移动</li>\n<li>  <code>hdx</code> 水平移动相对距离</li>\n<li>  <code>vdy</code> 垂直移动相对距离</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li> Z or z：闭合路径</li>\n</ol>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/NWYjyxL)</span></div>\n\n<h4 id=\"曲线命令\"><a href=\"#曲线命令\" class=\"headerlink\" title=\"曲线命令\"></a>曲线命令</h4><p>小写的指令意义同上，都是跟相对的距离</p>\n<ol>\n<li><p>Curveto</p>\n<ol>\n<li>   C命令创建一个三次贝塞尔曲线，其中 (x1,y1) (x2,y2)为控制点，x,y为曲线终点</li>\n<li> <code>C x1 y1, x2 y2, x y </code>or <code>c dx1 dy1, dx2 dy2, dx dy</code></li>\n</ol>\n</li>\n</ol>\n<!---->\n\n<ol start=\"2\">\n<li><p>Smooth Curveto</p>\n<ol>\n<li>   S命令可以用来创建于与前面一样的贝塞尔曲线，如果S命令跟在一个C或S命令后面，则它的第一个控制点会被假设成前一个命令曲线的第二个控制点的中心对称点。如果S命令单独使用，前面没有C或者S命令，那当前点将作为第一个控制点。最大的作用就是光滑地连接两条曲线</li>\n<li> <code>S x2 y2,x y</code> or <code>s dx2 dy2, dx dy</code></li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>C、S命令例子</p>\n</blockquote>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/rNdmJma)</span></div>\n\n<ol start=\"3\">\n<li> Quadratic Bézier curveto</li>\n</ol>\n<ul>\n<li>  Q命令用来创建一条二次贝塞尔曲线，只需要一个控制点</li>\n<li><ul>\n<li>  <code>Q x1 y1,x y</code> or <code>q dx1 dx2,dx dy</code></li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li> Smooth quadratic Bézier curveto</li>\n</ol>\n<ul>\n<li>  T命令类似S命令，用于平滑链接二次贝塞尔曲线</li>\n<li><ul>\n<li>  <code>T x1 y1 </code>or <code>t dx dy</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Q、T命令例子</p>\n</blockquote>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/PoRJaqN)</span></div>\n\n<ol start=\"5\">\n<li> Arc</li>\n</ol>\n<ul>\n<li>  A命令也可以用于绘制曲线</li>\n<li><ul>\n<li>  <code>A rx ry x-axis-rotation large-arc-flag sweep-flag x y</code> <code>a rx ry x-axis-rotation large-arc-flag sweep-flag dx dy</code></li>\n<li>    参数说明：</li>\n<li>    rx ry: x、y轴半径</li>\n<li>    X-axis-rotation: 绕x轴旋转角度</li>\n<li>    large-arc-flag：0-弧小于180度、1-弧大于180度</li>\n<li>    sweep-flag：0-逆时针画弧、1-顺时针画弧</li>\n<li>    x y：终点坐标</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"五、动画\"><a href=\"#五、动画\" class=\"headerlink\" title=\"五、动画\"></a>五、动画</h2><blockquote>\n<p>放入形状元素内部，在指定的时间段里，设置相关属性的开始与结束值，变化曲线等。</p>\n</blockquote>\n<ul>\n<li><h4 id=\"动画元素\"><a href=\"#动画元素\" class=\"headerlink\" title=\"动画元素\"></a>动画元素</h4></li>\n<li><ul>\n<li>  animate：用来定义一个元素的某个属性在相应时间的变化</li>\n<li>  animateTransform：改变目标元素上的一个变形属性，控制旋转、缩放、平移、斜切变换</li>\n<li>  animateMotion：定义目标元素如何沿一个路径运动</li>\n<li>  discard：指定在何时丢弃特定元素，从而减少 SVG 用户代理所需的资源。</li>\n<li>  mpath：配合animateMotion，可代替animateMotion的path属性，用于引用一个外部的path</li>\n<li>  set：可以用来设定一个属性值，并为该值赋予一个持续时间。它支持所有的属性类型， 包括那些原理上不能插值的， 例如值为字符串和布尔类型的属性。 set 元素是非叠加的。无法在其上使用 additive 属性或 accumulate 属性，即使声明了这些属性也会自动被忽略。</li>\n</ul>\n</li>\n</ul>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/wvmrYLy)</span></div>\n\n<h4 id=\"动画属性\"><a href=\"#动画属性\" class=\"headerlink\" title=\"动画属性\"></a>动画属性</h4><p>这里大致可以分为三类：</p>\n<ol>\n<li><p>取值属性：控制要动画的属性（如x坐标，width等属性）的值</p>\n<ol>\n<li><p> <strong>calcMode：</strong> 设置动画的变化曲线（discrete | linear | paced | spline），除了animateMotion默认是paced外，其他是默认linear，当一些不支持线性变化的属性值（string类型的）就会变为discrete。</p>\n</li>\n<li><p> <strong>values：</strong> 定义动画过程中的值序列（一个或多个值的分号分隔列表）的值。 如果指定了此属性，则将忽略在元素上设置的任何 <code>from</code>, <code>to</code>, 和 <code>by</code> 属性值。</p>\n</li>\n<li><p><strong>keyTimes：</strong> 以分号分隔的时间值列表，用于控制动画的执行步骤。列表中的每个值与<code>values</code>中的值一一对应，定义了<code>values</code>中的值在动画中何时执行，keyTimes 列表中的每一个值都是指定在 [0-1] 之间的浮点数，表示动画的完成时间。每一个连续的时间值必须大于等于前一个时间值。</p>\n<ul>\n<li>  对于 linear 和 spline动画，列表中的第一个时间值必须为 0，列表的最后一个时间值必须为 1。与每个 value 关联的时间值定义了何时设置该 value，该 value 在 keyTimes 的时间 值的中间插值。</li>\n<li>  对于 discrete动画，列表中的第一个值必须为 0。与每个 value 关联的时间值定义了何时设置该 value，动画函数使用该 value，直到 keyTimes 中定义的下一个时间值。</li>\n<li>  如果插值模式是 paced动画，keyTimes 属性被忽略。</li>\n</ul>\n</li>\n<li><p> <strong>keySplines：</strong> 定义了一组与 keyTimes 列表关联的 Bézier 曲线控制点，定义了一个控制间隔（keyTimes的值列表长度减1即为间隔数）的三次 Bézier 函数。只有spline动画才会有效。</p>\n</li>\n<li><p> <strong>from：</strong> 指定属性的开始值</p>\n</li>\n<li><p> <strong>by：</strong> 指定将在动画期间修改的属性的相对偏移值</p>\n</li>\n<li><p> <strong>to：</strong> 表示将在动画期间修改的属性的最终值</p>\n</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>取值属性例子</p>\n</blockquote>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/WNzdXNZ)</span></div>\n\n<ol start=\"2\">\n<li><p>时间属性：控制动画如何开始，何时开始、重复次数等</p>\n<ol>\n<li><p> <strong>begin：</strong> 动画开始时间</p>\n</li>\n<li><p> <strong>end：</strong> 动画结束时间</p>\n</li>\n<li><p> <strong>dur：</strong> 动画持续时间</p>\n</li>\n<li><p> <strong>min/max：</strong> 限制动画的最小/大持续时间</p>\n</li>\n<li><p><strong>restart：</strong> 控制动画是否可以重新开始</p>\n<ul>\n<li>  <code>always</code> ：任何时候都可重新开始</li>\n<li>  <code>whenNotActive</code> ：非动画时可重新开始</li>\n<li>  <code>never</code> ：任何时候都不能重新开始</li>\n</ul>\n</li>\n<li><p> <strong>repeatCount：</strong> 指定动画重复的次数、值必须大于 0。</p>\n</li>\n<li><p> <strong>repeatDur：</strong> 指定动画的重复时间</p>\n</li>\n<li><p><strong>fill：</strong> 控制动画结束时的状态。有两个值可选</p>\n<ul>\n<li>  remove：在动画的激活持续时间结束后，动画效果会移除（不再应用）。在动画的激活结束后，动画不再对目标元素有影响（除非动画重新开始）。</li>\n<li>  freeze：在动画激活持续时间结束后，文档持续时间的剩余时间里（或者直到动画重新开始）动画效果会“冻结”着。（保持动画终态）</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<!---->\n\n<ol start=\"3\">\n<li><p>目标属性：控制要动画的属性</p>\n<ol>\n<li> a<strong>ttributeType：</strong> 当attributeType=”XML”时，attributeName被认为是XML的属性；当attributeType=”CSS”时，attributeName被认为是css的属性；不指定attributeType时，默认为”auto”，会先将attributeName作为css的属性，如果无效，再将attributeName作为XML的属性。</li>\n<li> <strong>attributeName：</strong> 要动画的属性名</li>\n</ol>\n</li>\n</ol>\n<!---->\n\n<ol start=\"4\">\n<li><p>其他属性：additive、accumulate</p>\n<ol>\n<li> <strong>additive：</strong> 控制动画属性是否是附加的。</li>\n<li> <strong>accumulate：</strong> 在原来的结果的基础上重复动画的时候每一次循环都累加。这个属性告诉动画是否是每次循环，前一个动画属性值要加上去。需要设置from与to属性。</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>additive、accumulate例子</p>\n</blockquote>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/PoREOjj)</span></div>\n\n<h2 id=\"六、结构元素\"><a href=\"#六、结构元素\" class=\"headerlink\" title=\"六、结构元素\"></a>六、结构元素</h2><blockquote>\n<p>结构元素关注的是复用</p>\n</blockquote>\n<ul>\n<li>  <strong>defs：</strong> 定义一个复用的图形。在<code>defs</code>元素中定义的图形元素不会直接呈现。 你可以在你的视口的任意地方利用 <code>use</code>元素呈现这些元素。</li>\n</ul>\n<!---->\n\n<ul>\n<li>  <strong>g：</strong> 组合子元素的容器，g元素的属性会被其所有的子元素继承 。与<code>defs</code>相比，g定义的除了复用外，在定义时会进行渲染。</li>\n</ul>\n<!---->\n\n<ul>\n<li>  <strong>symbol：</strong> 定义一个图形模版对象，使用<code>use</code>元素实例化。<code>symbol</code>元素对图形的作用是在同一文档中多次使用，添加结构和语义。symbol通过<code>use</code>调用时，<code> &lt;use  ``/``&gt;</code>可以设置height、width控制实际绘制的大小。</li>\n</ul>\n<!---->\n\n<ul>\n<li>  <strong>svg</strong> <strong>：</strong> 如果 <code>svg</code> 不是根元素，<code>svg</code> 元素可以用于在当前文档（比如说，一个 HTML 文档）内嵌套一个独立的 svg 片段 。 这个独立片段拥有独立的视口和坐标系统。</li>\n</ul>\n<!---->\n\n<ul>\n<li><p><strong>marker：</strong> 定义了在特定的path元素、line元素、polyline元素或者polygon元素上绘制箭头或者多边形标记图形。</p>\n<ul>\n<li>  refx：定义元素参考点的x坐标 (默认是0)</li>\n<li>  refy：定义元素参考点的y坐标 (默认是0)</li>\n<li>  markerWidth：表示根据 viewBox 和 preserveAspectRatio 属性渲染 <code>&lt;marker&gt;</code> 时要适合的视口宽度</li>\n<li>  markerHeight：表示根据 viewBox 和 preserveAspectRatio 属性渲染 <code>&lt;marker&gt; </code>时要适合的视口高度</li>\n<li>  markerUnits：指示标记放置在形状上的位置时如何旋转</li>\n</ul>\n</li>\n</ul>\n<!---->\n\n<ul>\n<li>  mask</li>\n</ul>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/GRxmgEN)</span></div>\n\n<h2 id=\"七、滤镜元素\"><a href=\"#七、滤镜元素\" class=\"headerlink\" title=\"七、滤镜元素\"></a>七、滤镜元素</h2><h3 id=\"相关标签\"><a href=\"#相关标签\" class=\"headerlink\" title=\"相关标签\"></a>相关标签</h3><blockquote>\n<p>滤镜通过<code>&lt;filter&gt;</code>在<code>&lt;defs&gt;</code>中进行定义，在filter标签中提供一系列图元，使用滤镜只需为svg元素设置filter属性即可。</p>\n</blockquote>\n<h3 id=\"常见属性\"><a href=\"#常见属性\" class=\"headerlink\" title=\"常见属性\"></a>常见属性</h3><ul>\n<li><p>in：标识输入的原语</p>\n<ul>\n<li>  SourceGraphic：该关键词表示图形元素自身将作为<code>&lt;filter&gt;</code>原语的原始输入</li>\n<li>  SourceAlpha：该关键词表示图形元素自身将作为<code>&lt;filter&gt;</code>原语的原始输入. SourceAlpha 与 SourceGraphic 具有相同的规则除了 SourceAlpha 只使用元素的透明度。</li>\n<li>  BackgroundImage：该关键词表示 filter 元素当前底下的区域的图形快照将被调用。</li>\n<li>  BackgroundAlpha：BackgroundImage 相同除了只使用透明度。</li>\n<li>  FillPaint：此关键字表示过滤效果的目标元素上的<code>fill</code>属性值。在许多情况下，FillPaint 在任何地方都是不透明的，但如果形状是使用渐变或图案绘制的，它本身包括透明或半透明部分，则情况可能并非如此。</li>\n<li>  StrokePaint：此关键字表示滤镜效果的目标元素上的笔画属性的值。在许多情况下，StrokePaint 在任何地方都是不透明的，但如果形状是使用渐变或图案绘制的，它本身包括透明或半透明部分，则情况可能并非如此。</li>\n</ul>\n</li>\n</ul>\n<!---->\n\n<ul>\n<li>  in2：in2 属性标识给定filter原语的第二个输入。它的工作原理与 in 属性完全相同。</li>\n</ul>\n<blockquote>\n<p>colorMatrix颜色矩阵变换</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* R G B A 1 颜色矩阵计算 */</span></span><br><span class=\"line\"> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"comment\">// R = 1*R + 0*G + 0*B + 0*A + 0 </span></span><br><span class=\"line\"> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"comment\">// G = 0*R + 1*G + 0*B + 0*A + 0 </span></span><br><span class=\"line\"> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"comment\">// B = 0*R + 0*G + 1*B + 0*A + 0 </span></span><br><span class=\"line\"> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"comment\">// A = 0*R + 0*G + 0*B + 1*A + 0</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/xxWzjde)</span></div>\n\n\n<blockquote>\n<p>使用feGaussianBlur、feColorMatrix、feBlend实现粘稠效果</p>\n</blockquote>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/JjLZbQO)</span></div>\n\n\n<blockquote>\n<p>使用feComposite并设置operator为in，控制显示图像的一部分。</p>\n</blockquote>\n<p>关于feComposite，更多可以看这里：<a href=\"https://apike.ca/prog_svg_filter_feComposite.html\">feComposite</a></p>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/wvmXOwZ)</span></div>\n\n\n\n<blockquote>\n<p>feDisplacementMap、feTurbulence</p>\n</blockquote>\n<p>feDisplacementMap推荐看这篇：<a href=\"https://www.zhangxinxu.com/wordpress/2017/12/understand-svg-fedisplacementmap-filter/\">深入理解SVG feDisplacementMap滤镜及实际应用</a></p>\n<p>feTurbulence推荐看这篇：<a href=\"https://zhuanlan.zhihu.com/p/366438535\">说说SVG的feTurbulence滤镜</a></p>\n<p>位置转换公式：</p>\n<p><code>P&#39;(x,y) ← P(x + scale * (XC(x,y) - 0.5), y + scale * (YC(x,y) - 0.5))</code></p>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/OJvwJqV)</span></div>\n\n<h2 id=\"八、渐变元素\"><a href=\"#八、渐变元素\" class=\"headerlink\" title=\"八、渐变元素\"></a>八、渐变元素</h2><ul>\n<li><ul>\n<li><h3 id=\"linearGradient：线性渐变-gradientUnits-控制渐变坐标的单位-gradientTransform-对渐变坐标系进行变换（translate、skew、rotate。。。）-x1：线性渐变起点x坐标-y1：线性渐变起点y坐标-x2：线性渐变终点x坐标-y2：线性渐变终点y坐标-spreadMethod：定义如何在渐变之外填充\"><a href=\"#linearGradient：线性渐变-gradientUnits-控制渐变坐标的单位-gradientTransform-对渐变坐标系进行变换（translate、skew、rotate。。。）-x1：线性渐变起点x坐标-y1：线性渐变起点y坐标-x2：线性渐变终点x坐标-y2：线性渐变终点y坐标-spreadMethod：定义如何在渐变之外填充\" class=\"headerlink\" title=\"linearGradient：线性渐变-   gradientUnits: 控制渐变坐标的单位-   gradientTransform: 对渐变坐标系进行变换（translate、skew、rotate。。。）-   x1：线性渐变起点x坐标-   y1：线性渐变起点y坐标-   x2：线性渐变终点x坐标-   y2：线性渐变终点y坐标-   spreadMethod：定义如何在渐变之外填充\"></a>linearGradient：线性渐变-   gradientUnits: 控制渐变坐标的单位-   gradientTransform: 对渐变坐标系进行变换（translate、skew、rotate。。。）-   x1：线性渐变起点x坐标-   y1：线性渐变起点y坐标-   x2：线性渐变终点x坐标-   y2：线性渐变终点y坐标-   spreadMethod：定义如何在渐变之外填充</h3><pre><code>    -   pad：用渐变终点颜色去填充额外区域\n    -   repeat：按照开始的渐变顺序重复\n    -   reflect：按照开始的渐变相反顺序重复\n</code></pre>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/JjLMMjR)</span></div></li>\n<li><h3 id=\"radialGradient：径向渐变-gradientUnits：控制渐变坐标的单位-gradientTransform：对渐变坐标系进行变换（translate、skew、rotate。。。）-cx-用来定义径向渐变终止圆的-x-轴坐标-默认50-。-cy：用来定义径向渐变终止圆的-y-轴坐标。-r：用来定义径向渐变终止圆的半径。-fx：用来定义径向渐变的焦点的-x-轴坐标-fy：用来定义径向渐变的焦点的-y-轴坐标-spreadMethod：确定如何在渐变的定义边缘之外填充形状。\"><a href=\"#radialGradient：径向渐变-gradientUnits：控制渐变坐标的单位-gradientTransform：对渐变坐标系进行变换（translate、skew、rotate。。。）-cx-用来定义径向渐变终止圆的-x-轴坐标-默认50-。-cy：用来定义径向渐变终止圆的-y-轴坐标。-r：用来定义径向渐变终止圆的半径。-fx：用来定义径向渐变的焦点的-x-轴坐标-fy：用来定义径向渐变的焦点的-y-轴坐标-spreadMethod：确定如何在渐变的定义边缘之外填充形状。\" class=\"headerlink\" title=\"radialGradient：径向渐变-   gradientUnits：控制渐变坐标的单位-   gradientTransform：对渐变坐标系进行变换（translate、skew、rotate。。。）-   cx: 用来定义径向渐变终止圆的 x 轴坐标(默认50%)。-   cy：用来定义径向渐变终止圆的 y 轴坐标。-   r：用来定义径向渐变终止圆的半径。-   fx：用来定义径向渐变的焦点的 x 轴坐标-   fy：用来定义径向渐变的焦点的 y 轴坐标-   spreadMethod：确定如何在渐变的定义边缘之外填充形状。\"></a>radialGradient：径向渐变-   gradientUnits：控制渐变坐标的单位-   gradientTransform：对渐变坐标系进行变换（translate、skew、rotate。。。）-   cx: 用来定义径向渐变终止圆的 x 轴坐标(默认50%)。-   cy：用来定义径向渐变终止圆的 y 轴坐标。-   r：用来定义径向渐变终止圆的半径。-   fx：用来定义径向渐变的焦点的 x 轴坐标-   fy：用来定义径向渐变的焦点的 y 轴坐标-   spreadMethod：确定如何在渐变的定义边缘之外填充形状。</h3><pre><code>  -   pad：用渐变终点颜色去填充额外区域\n  -   repeat：按照开始的渐变顺序重复\n  -   reflect：按照开始的渐变相反顺序重复\n</code></pre>\n</li>\n<li><p>  stop：渐变的颜色坡度</p>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/OJvwJqV)</span></div></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"九、关于svg与canvas\"><a href=\"#九、关于svg与canvas\" class=\"headerlink\" title=\"九、关于svg与canvas\"></a>九、关于svg与canvas</h2><p>可以看看msdn的文章<a href=\"https://docs.microsoft.com/zh-cn/previous-versions/msdn10/Hh377884(v=MSDN.10)\">如何为您的网站在Canvas和SVG之间做出选择</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>svg的世界非常丰富，并且很多属性可以作用不同的元素、拥有不同的效果。元素直接有可以搭配使用，如多个动画，多个滤镜等等，滤镜元素还涉及更多领域知识。总之，元素种类、元素属性非常多，还是需要得慢慢地学习、阅读相关的案例并操作一下才能有所掌握。</p>\n<ul>\n<li><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2></li>\n<li><ul>\n<li>  <a href=\"https://apike.ca/prog_svg_filter_feComposite.html\">feComposite</a></li>\n<li>  <a href=\"https://zh.wikipedia.org/zh-cn/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A\">贝塞尔曲线-wiki</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"linklist":[{"nickname":"ZCW","avatar":"http://sherry.formeky.xyz:8090/upload/2021/09/QQ%E5%9B%BE%E7%89%8720210629151630-d1748408bc4d4d3b995abaf38440b71d.jpg","site":"http://sherry.formeky.xyz:8090/","descp":"后端工程师"},{"nickname":"LJC","site":"https://lengthmin.me/","descp":"这大概就是大佬吧","avatar":"https://lengthmin.me/images/avatar.png"}]}},"length":7113,"excerpt":"<h2 id=\"一-、定义\"><a href=\"#一-、定义\" class=\"headerlink\" title=\"一 、定义\"></a>一 、定义</h2><p>svg（Scalable Vector Graphics）可缩放的矢量图形，是 W3C XML 的分支语言之一，用于标记可缩放的矢量图形。</p>","more":"<h2 id=\"二、命名空间\"><a href=\"#二、命名空间\" class=\"headerlink\" title=\"二、命名空间\"></a>二、命名空间</h2><p>定义的命名空间可以把通配、元素、属性选择器限制在指定命名空间里的元素。</p>\n<h3 id=\"声明命名空间\"><a href=\"#声明命名空间\" class=\"headerlink\" title=\"声明命名空间\"></a>声明命名空间</h3><p>使用xmlns属性进行命名空间的声明，下面的声明意味着svg以及它的子节点都属于“<a href=\"http://www.w3.org/2000/svg%E2%80%9D%E8%BF%99%E4%B8%AAsvg%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E3%80%82\">http://www.w3.org/2000/svg”这个svg命名空间。</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、SVG-元素\"><a href=\"#三、SVG-元素\" class=\"headerlink\" title=\"三、SVG 元素\"></a>三、SVG 元素</h2><p>See more：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element#svg_%E5%85%83%E7%B4%A0%EF%BC%88%E6%8C%89%E7%B1%BB%E5%88%AB%E5%88%86%E7%B1%BB%EF%BC%89\">mdn-svg元素参考</a></p>\n<p><img src=\"https://p-bytetech.bytedance.net/tos-cn-i-vz0z6vmpra/7dfd2742543f46309944295368f166e2~tplv-vz0z6vmpra-image.image\" alt=\"image.png\"></p>\n<blockquote>\n<p>上面列出了一些常见以及常用的svg元素，下面我们可以来看看它们是什么样子的以及怎么改变它们的属性。</p>\n</blockquote>\n<h2 id=\"四、图形元素\"><a href=\"#四、图形元素\" class=\"headerlink\" title=\"四、图形元素\"></a>四、图形元素</h2><h3 id=\"基础图形元素\"><a href=\"#基础图形元素\" class=\"headerlink\" title=\"基础图形元素\"></a>基础图形元素</h3><div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/RwMVwNE)</span></div>\n\n<h3 id=\"线段属性\"><a href=\"#线段属性\" class=\"headerlink\" title=\"线段属性\"></a>线段属性</h3><p>对于stroke填充的线段来说，stroke-dasharray与stroke-dashoffset是两个比较有用的属性。</p>\n<ul>\n<li>  stroke-dasharray：控制用控制线段实线与虚线的单元长度。</li>\n</ul>\n<!---->\n\n<ul>\n<li>  stroke-dasharray：控制虚线的偏移</li>\n</ul>\n<blockquote>\n<p>stroke-dasharray结合animate的例子</p>\n</blockquote>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/ZExoMmN)</span></div>\n\n<blockquote>\n<p>使用stroke-dashoffset与animateTransform、animate绘制加载动画</p>\n</blockquote>\n<p>用animate控制stroke-dashoffset虚线部分的偏移，同时animateTransform控制整个圆环的自转。</p>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/ExELqMa)</span></div>\n\n<blockquote>\n<p>心电图</p>\n</blockquote>\n<p>这里主要思路就是使用polyline绘制折线图，使用stroke-dasharray绘制虚线，stroke-dashoffset控制虚线空白处的偏移，然后用animate控制stroke-dashoffset的值，就能看见这种线段移动的效果了🫥</p>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/qBoYyxL)</span></div>\n\n<h3 id=\"强大的path元素\"><a href=\"#强大的path元素\" class=\"headerlink\" title=\"强大的path元素\"></a>强大的path元素</h3><p>上面的基本图形都是可以用path来创建的，而path的功能远远不止上面这些图形😏。path元素的形状通过属性d来定义，属性d的值是一个“命令+参数”的序列。下面就列出了一些常用的命令。</p>\n<h4 id=\"直线命令\"><a href=\"#直线命令\" class=\"headerlink\" title=\"直线命令\"></a>直线命令</h4><ol>\n<li><p>Moveto</p>\n<ol>\n<li> <code>M x,y</code> 在这里x和y是绝对坐标，分别代表水平坐标和垂直坐标。</li>\n<li> <code>m dx,dy</code> 在这里dx和dy是相对于当前点的距离，分别是向右和向下的距离。</li>\n</ol>\n</li>\n</ol>\n<!---->\n\n<ol start=\"2\">\n<li> Lineto</li>\n</ol>\n<ul>\n<li>  <code>Lineto</code>指令将绘制一条直线段。这个直线段从当前位置移到指定位置</li>\n<li><ul>\n<li>  <code>Lx,y</code> x与y是绝对坐标，分别代表水平坐标和垂直坐标</li>\n<li>  <code>ldx,dy</code> dx和dy是相对于当前点的距离，分别是向右和向下的距离</li>\n<li>  <code>Hx</code> 绝对坐标，水平移动</li>\n<li>  <code>Vy</code> 绝对坐标，垂直移动</li>\n<li>  <code>hdx</code> 水平移动相对距离</li>\n<li>  <code>vdy</code> 垂直移动相对距离</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li> Z or z：闭合路径</li>\n</ol>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/NWYjyxL)</span></div>\n\n<h4 id=\"曲线命令\"><a href=\"#曲线命令\" class=\"headerlink\" title=\"曲线命令\"></a>曲线命令</h4><p>小写的指令意义同上，都是跟相对的距离</p>\n<ol>\n<li><p>Curveto</p>\n<ol>\n<li>   C命令创建一个三次贝塞尔曲线，其中 (x1,y1) (x2,y2)为控制点，x,y为曲线终点</li>\n<li> <code>C x1 y1, x2 y2, x y </code>or <code>c dx1 dy1, dx2 dy2, dx dy</code></li>\n</ol>\n</li>\n</ol>\n<!---->\n\n<ol start=\"2\">\n<li><p>Smooth Curveto</p>\n<ol>\n<li>   S命令可以用来创建于与前面一样的贝塞尔曲线，如果S命令跟在一个C或S命令后面，则它的第一个控制点会被假设成前一个命令曲线的第二个控制点的中心对称点。如果S命令单独使用，前面没有C或者S命令，那当前点将作为第一个控制点。最大的作用就是光滑地连接两条曲线</li>\n<li> <code>S x2 y2,x y</code> or <code>s dx2 dy2, dx dy</code></li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>C、S命令例子</p>\n</blockquote>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/rNdmJma)</span></div>\n\n<ol start=\"3\">\n<li> Quadratic Bézier curveto</li>\n</ol>\n<ul>\n<li>  Q命令用来创建一条二次贝塞尔曲线，只需要一个控制点</li>\n<li><ul>\n<li>  <code>Q x1 y1,x y</code> or <code>q dx1 dx2,dx dy</code></li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li> Smooth quadratic Bézier curveto</li>\n</ol>\n<ul>\n<li>  T命令类似S命令，用于平滑链接二次贝塞尔曲线</li>\n<li><ul>\n<li>  <code>T x1 y1 </code>or <code>t dx dy</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Q、T命令例子</p>\n</blockquote>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/PoRJaqN)</span></div>\n\n<ol start=\"5\">\n<li> Arc</li>\n</ol>\n<ul>\n<li>  A命令也可以用于绘制曲线</li>\n<li><ul>\n<li>  <code>A rx ry x-axis-rotation large-arc-flag sweep-flag x y</code> <code>a rx ry x-axis-rotation large-arc-flag sweep-flag dx dy</code></li>\n<li>    参数说明：</li>\n<li>    rx ry: x、y轴半径</li>\n<li>    X-axis-rotation: 绕x轴旋转角度</li>\n<li>    large-arc-flag：0-弧小于180度、1-弧大于180度</li>\n<li>    sweep-flag：0-逆时针画弧、1-顺时针画弧</li>\n<li>    x y：终点坐标</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"五、动画\"><a href=\"#五、动画\" class=\"headerlink\" title=\"五、动画\"></a>五、动画</h2><blockquote>\n<p>放入形状元素内部，在指定的时间段里，设置相关属性的开始与结束值，变化曲线等。</p>\n</blockquote>\n<ul>\n<li><h4 id=\"动画元素\"><a href=\"#动画元素\" class=\"headerlink\" title=\"动画元素\"></a>动画元素</h4></li>\n<li><ul>\n<li>  animate：用来定义一个元素的某个属性在相应时间的变化</li>\n<li>  animateTransform：改变目标元素上的一个变形属性，控制旋转、缩放、平移、斜切变换</li>\n<li>  animateMotion：定义目标元素如何沿一个路径运动</li>\n<li>  discard：指定在何时丢弃特定元素，从而减少 SVG 用户代理所需的资源。</li>\n<li>  mpath：配合animateMotion，可代替animateMotion的path属性，用于引用一个外部的path</li>\n<li>  set：可以用来设定一个属性值，并为该值赋予一个持续时间。它支持所有的属性类型， 包括那些原理上不能插值的， 例如值为字符串和布尔类型的属性。 set 元素是非叠加的。无法在其上使用 additive 属性或 accumulate 属性，即使声明了这些属性也会自动被忽略。</li>\n</ul>\n</li>\n</ul>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/wvmrYLy)</span></div>\n\n<h4 id=\"动画属性\"><a href=\"#动画属性\" class=\"headerlink\" title=\"动画属性\"></a>动画属性</h4><p>这里大致可以分为三类：</p>\n<ol>\n<li><p>取值属性：控制要动画的属性（如x坐标，width等属性）的值</p>\n<ol>\n<li><p> <strong>calcMode：</strong> 设置动画的变化曲线（discrete | linear | paced | spline），除了animateMotion默认是paced外，其他是默认linear，当一些不支持线性变化的属性值（string类型的）就会变为discrete。</p>\n</li>\n<li><p> <strong>values：</strong> 定义动画过程中的值序列（一个或多个值的分号分隔列表）的值。 如果指定了此属性，则将忽略在元素上设置的任何 <code>from</code>, <code>to</code>, 和 <code>by</code> 属性值。</p>\n</li>\n<li><p><strong>keyTimes：</strong> 以分号分隔的时间值列表，用于控制动画的执行步骤。列表中的每个值与<code>values</code>中的值一一对应，定义了<code>values</code>中的值在动画中何时执行，keyTimes 列表中的每一个值都是指定在 [0-1] 之间的浮点数，表示动画的完成时间。每一个连续的时间值必须大于等于前一个时间值。</p>\n<ul>\n<li>  对于 linear 和 spline动画，列表中的第一个时间值必须为 0，列表的最后一个时间值必须为 1。与每个 value 关联的时间值定义了何时设置该 value，该 value 在 keyTimes 的时间 值的中间插值。</li>\n<li>  对于 discrete动画，列表中的第一个值必须为 0。与每个 value 关联的时间值定义了何时设置该 value，动画函数使用该 value，直到 keyTimes 中定义的下一个时间值。</li>\n<li>  如果插值模式是 paced动画，keyTimes 属性被忽略。</li>\n</ul>\n</li>\n<li><p> <strong>keySplines：</strong> 定义了一组与 keyTimes 列表关联的 Bézier 曲线控制点，定义了一个控制间隔（keyTimes的值列表长度减1即为间隔数）的三次 Bézier 函数。只有spline动画才会有效。</p>\n</li>\n<li><p> <strong>from：</strong> 指定属性的开始值</p>\n</li>\n<li><p> <strong>by：</strong> 指定将在动画期间修改的属性的相对偏移值</p>\n</li>\n<li><p> <strong>to：</strong> 表示将在动画期间修改的属性的最终值</p>\n</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>取值属性例子</p>\n</blockquote>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/WNzdXNZ)</span></div>\n\n<ol start=\"2\">\n<li><p>时间属性：控制动画如何开始，何时开始、重复次数等</p>\n<ol>\n<li><p> <strong>begin：</strong> 动画开始时间</p>\n</li>\n<li><p> <strong>end：</strong> 动画结束时间</p>\n</li>\n<li><p> <strong>dur：</strong> 动画持续时间</p>\n</li>\n<li><p> <strong>min/max：</strong> 限制动画的最小/大持续时间</p>\n</li>\n<li><p><strong>restart：</strong> 控制动画是否可以重新开始</p>\n<ul>\n<li>  <code>always</code> ：任何时候都可重新开始</li>\n<li>  <code>whenNotActive</code> ：非动画时可重新开始</li>\n<li>  <code>never</code> ：任何时候都不能重新开始</li>\n</ul>\n</li>\n<li><p> <strong>repeatCount：</strong> 指定动画重复的次数、值必须大于 0。</p>\n</li>\n<li><p> <strong>repeatDur：</strong> 指定动画的重复时间</p>\n</li>\n<li><p><strong>fill：</strong> 控制动画结束时的状态。有两个值可选</p>\n<ul>\n<li>  remove：在动画的激活持续时间结束后，动画效果会移除（不再应用）。在动画的激活结束后，动画不再对目标元素有影响（除非动画重新开始）。</li>\n<li>  freeze：在动画激活持续时间结束后，文档持续时间的剩余时间里（或者直到动画重新开始）动画效果会“冻结”着。（保持动画终态）</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<!---->\n\n<ol start=\"3\">\n<li><p>目标属性：控制要动画的属性</p>\n<ol>\n<li> a<strong>ttributeType：</strong> 当attributeType=”XML”时，attributeName被认为是XML的属性；当attributeType=”CSS”时，attributeName被认为是css的属性；不指定attributeType时，默认为”auto”，会先将attributeName作为css的属性，如果无效，再将attributeName作为XML的属性。</li>\n<li> <strong>attributeName：</strong> 要动画的属性名</li>\n</ol>\n</li>\n</ol>\n<!---->\n\n<ol start=\"4\">\n<li><p>其他属性：additive、accumulate</p>\n<ol>\n<li> <strong>additive：</strong> 控制动画属性是否是附加的。</li>\n<li> <strong>accumulate：</strong> 在原来的结果的基础上重复动画的时候每一次循环都累加。这个属性告诉动画是否是每次循环，前一个动画属性值要加上去。需要设置from与to属性。</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>additive、accumulate例子</p>\n</blockquote>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/PoREOjj)</span></div>\n\n<h2 id=\"六、结构元素\"><a href=\"#六、结构元素\" class=\"headerlink\" title=\"六、结构元素\"></a>六、结构元素</h2><blockquote>\n<p>结构元素关注的是复用</p>\n</blockquote>\n<ul>\n<li>  <strong>defs：</strong> 定义一个复用的图形。在<code>defs</code>元素中定义的图形元素不会直接呈现。 你可以在你的视口的任意地方利用 <code>use</code>元素呈现这些元素。</li>\n</ul>\n<!---->\n\n<ul>\n<li>  <strong>g：</strong> 组合子元素的容器，g元素的属性会被其所有的子元素继承 。与<code>defs</code>相比，g定义的除了复用外，在定义时会进行渲染。</li>\n</ul>\n<!---->\n\n<ul>\n<li>  <strong>symbol：</strong> 定义一个图形模版对象，使用<code>use</code>元素实例化。<code>symbol</code>元素对图形的作用是在同一文档中多次使用，添加结构和语义。symbol通过<code>use</code>调用时，<code> &lt;use  ``/``&gt;</code>可以设置height、width控制实际绘制的大小。</li>\n</ul>\n<!---->\n\n<ul>\n<li>  <strong>svg</strong> <strong>：</strong> 如果 <code>svg</code> 不是根元素，<code>svg</code> 元素可以用于在当前文档（比如说，一个 HTML 文档）内嵌套一个独立的 svg 片段 。 这个独立片段拥有独立的视口和坐标系统。</li>\n</ul>\n<!---->\n\n<ul>\n<li><p><strong>marker：</strong> 定义了在特定的path元素、line元素、polyline元素或者polygon元素上绘制箭头或者多边形标记图形。</p>\n<ul>\n<li>  refx：定义元素参考点的x坐标 (默认是0)</li>\n<li>  refy：定义元素参考点的y坐标 (默认是0)</li>\n<li>  markerWidth：表示根据 viewBox 和 preserveAspectRatio 属性渲染 <code>&lt;marker&gt;</code> 时要适合的视口宽度</li>\n<li>  markerHeight：表示根据 viewBox 和 preserveAspectRatio 属性渲染 <code>&lt;marker&gt; </code>时要适合的视口高度</li>\n<li>  markerUnits：指示标记放置在形状上的位置时如何旋转</li>\n</ul>\n</li>\n</ul>\n<!---->\n\n<ul>\n<li>  mask</li>\n</ul>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/GRxmgEN)</span></div>\n\n<h2 id=\"七、滤镜元素\"><a href=\"#七、滤镜元素\" class=\"headerlink\" title=\"七、滤镜元素\"></a>七、滤镜元素</h2><h3 id=\"相关标签\"><a href=\"#相关标签\" class=\"headerlink\" title=\"相关标签\"></a>相关标签</h3><blockquote>\n<p>滤镜通过<code>&lt;filter&gt;</code>在<code>&lt;defs&gt;</code>中进行定义，在filter标签中提供一系列图元，使用滤镜只需为svg元素设置filter属性即可。</p>\n</blockquote>\n<h3 id=\"常见属性\"><a href=\"#常见属性\" class=\"headerlink\" title=\"常见属性\"></a>常见属性</h3><ul>\n<li><p>in：标识输入的原语</p>\n<ul>\n<li>  SourceGraphic：该关键词表示图形元素自身将作为<code>&lt;filter&gt;</code>原语的原始输入</li>\n<li>  SourceAlpha：该关键词表示图形元素自身将作为<code>&lt;filter&gt;</code>原语的原始输入. SourceAlpha 与 SourceGraphic 具有相同的规则除了 SourceAlpha 只使用元素的透明度。</li>\n<li>  BackgroundImage：该关键词表示 filter 元素当前底下的区域的图形快照将被调用。</li>\n<li>  BackgroundAlpha：BackgroundImage 相同除了只使用透明度。</li>\n<li>  FillPaint：此关键字表示过滤效果的目标元素上的<code>fill</code>属性值。在许多情况下，FillPaint 在任何地方都是不透明的，但如果形状是使用渐变或图案绘制的，它本身包括透明或半透明部分，则情况可能并非如此。</li>\n<li>  StrokePaint：此关键字表示滤镜效果的目标元素上的笔画属性的值。在许多情况下，StrokePaint 在任何地方都是不透明的，但如果形状是使用渐变或图案绘制的，它本身包括透明或半透明部分，则情况可能并非如此。</li>\n</ul>\n</li>\n</ul>\n<!---->\n\n<ul>\n<li>  in2：in2 属性标识给定filter原语的第二个输入。它的工作原理与 in 属性完全相同。</li>\n</ul>\n<blockquote>\n<p>colorMatrix颜色矩阵变换</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* R G B A 1 颜色矩阵计算 */</span></span><br><span class=\"line\"> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"comment\">// R = 1*R + 0*G + 0*B + 0*A + 0 </span></span><br><span class=\"line\"> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"comment\">// G = 0*R + 1*G + 0*B + 0*A + 0 </span></span><br><span class=\"line\"> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"comment\">// B = 0*R + 0*G + 1*B + 0*A + 0 </span></span><br><span class=\"line\"> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"comment\">// A = 0*R + 0*G + 0*B + 1*A + 0</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/xxWzjde)</span></div>\n\n\n<blockquote>\n<p>使用feGaussianBlur、feColorMatrix、feBlend实现粘稠效果</p>\n</blockquote>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/JjLZbQO)</span></div>\n\n\n<blockquote>\n<p>使用feComposite并设置operator为in，控制显示图像的一部分。</p>\n</blockquote>\n<p>关于feComposite，更多可以看这里：<a href=\"https://apike.ca/prog_svg_filter_feComposite.html\">feComposite</a></p>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/wvmXOwZ)</span></div>\n\n\n\n<blockquote>\n<p>feDisplacementMap、feTurbulence</p>\n</blockquote>\n<p>feDisplacementMap推荐看这篇：<a href=\"https://www.zhangxinxu.com/wordpress/2017/12/understand-svg-fedisplacementmap-filter/\">深入理解SVG feDisplacementMap滤镜及实际应用</a></p>\n<p>feTurbulence推荐看这篇：<a href=\"https://zhuanlan.zhihu.com/p/366438535\">说说SVG的feTurbulence滤镜</a></p>\n<p>位置转换公式：</p>\n<p><code>P&#39;(x,y) ← P(x + scale * (XC(x,y) - 0.5), y + scale * (YC(x,y) - 0.5))</code></p>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/OJvwJqV)</span></div>\n\n<h2 id=\"八、渐变元素\"><a href=\"#八、渐变元素\" class=\"headerlink\" title=\"八、渐变元素\"></a>八、渐变元素</h2><ul>\n<li><ul>\n<li><h3 id=\"linearGradient：线性渐变-gradientUnits-控制渐变坐标的单位-gradientTransform-对渐变坐标系进行变换（translate、skew、rotate。。。）-x1：线性渐变起点x坐标-y1：线性渐变起点y坐标-x2：线性渐变终点x坐标-y2：线性渐变终点y坐标-spreadMethod：定义如何在渐变之外填充\"><a href=\"#linearGradient：线性渐变-gradientUnits-控制渐变坐标的单位-gradientTransform-对渐变坐标系进行变换（translate、skew、rotate。。。）-x1：线性渐变起点x坐标-y1：线性渐变起点y坐标-x2：线性渐变终点x坐标-y2：线性渐变终点y坐标-spreadMethod：定义如何在渐变之外填充\" class=\"headerlink\" title=\"linearGradient：线性渐变-   gradientUnits: 控制渐变坐标的单位-   gradientTransform: 对渐变坐标系进行变换（translate、skew、rotate。。。）-   x1：线性渐变起点x坐标-   y1：线性渐变起点y坐标-   x2：线性渐变终点x坐标-   y2：线性渐变终点y坐标-   spreadMethod：定义如何在渐变之外填充\"></a>linearGradient：线性渐变-   gradientUnits: 控制渐变坐标的单位-   gradientTransform: 对渐变坐标系进行变换（translate、skew、rotate。。。）-   x1：线性渐变起点x坐标-   y1：线性渐变起点y坐标-   x2：线性渐变终点x坐标-   y2：线性渐变终点y坐标-   spreadMethod：定义如何在渐变之外填充</h3><pre><code>    -   pad：用渐变终点颜色去填充额外区域\n    -   repeat：按照开始的渐变顺序重复\n    -   reflect：按照开始的渐变相反顺序重复\n</code></pre>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/JjLMMjR)</span></div></li>\n<li><h3 id=\"radialGradient：径向渐变-gradientUnits：控制渐变坐标的单位-gradientTransform：对渐变坐标系进行变换（translate、skew、rotate。。。）-cx-用来定义径向渐变终止圆的-x-轴坐标-默认50-。-cy：用来定义径向渐变终止圆的-y-轴坐标。-r：用来定义径向渐变终止圆的半径。-fx：用来定义径向渐变的焦点的-x-轴坐标-fy：用来定义径向渐变的焦点的-y-轴坐标-spreadMethod：确定如何在渐变的定义边缘之外填充形状。\"><a href=\"#radialGradient：径向渐变-gradientUnits：控制渐变坐标的单位-gradientTransform：对渐变坐标系进行变换（translate、skew、rotate。。。）-cx-用来定义径向渐变终止圆的-x-轴坐标-默认50-。-cy：用来定义径向渐变终止圆的-y-轴坐标。-r：用来定义径向渐变终止圆的半径。-fx：用来定义径向渐变的焦点的-x-轴坐标-fy：用来定义径向渐变的焦点的-y-轴坐标-spreadMethod：确定如何在渐变的定义边缘之外填充形状。\" class=\"headerlink\" title=\"radialGradient：径向渐变-   gradientUnits：控制渐变坐标的单位-   gradientTransform：对渐变坐标系进行变换（translate、skew、rotate。。。）-   cx: 用来定义径向渐变终止圆的 x 轴坐标(默认50%)。-   cy：用来定义径向渐变终止圆的 y 轴坐标。-   r：用来定义径向渐变终止圆的半径。-   fx：用来定义径向渐变的焦点的 x 轴坐标-   fy：用来定义径向渐变的焦点的 y 轴坐标-   spreadMethod：确定如何在渐变的定义边缘之外填充形状。\"></a>radialGradient：径向渐变-   gradientUnits：控制渐变坐标的单位-   gradientTransform：对渐变坐标系进行变换（translate、skew、rotate。。。）-   cx: 用来定义径向渐变终止圆的 x 轴坐标(默认50%)。-   cy：用来定义径向渐变终止圆的 y 轴坐标。-   r：用来定义径向渐变终止圆的半径。-   fx：用来定义径向渐变的焦点的 x 轴坐标-   fy：用来定义径向渐变的焦点的 y 轴坐标-   spreadMethod：确定如何在渐变的定义边缘之外填充形状。</h3><pre><code>  -   pad：用渐变终点颜色去填充额外区域\n  -   repeat：按照开始的渐变顺序重复\n  -   reflect：按照开始的渐变相反顺序重复\n</code></pre>\n</li>\n<li><p>  stop：渐变的颜色坡度</p>\n<div class=\"oembed-error\" style=\"color: red;\"><span>failed getting oembed item.(url=https://codepen.io/l-jour/pen/OJvwJqV)</span></div></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"九、关于svg与canvas\"><a href=\"#九、关于svg与canvas\" class=\"headerlink\" title=\"九、关于svg与canvas\"></a>九、关于svg与canvas</h2><p>可以看看msdn的文章<a href=\"https://docs.microsoft.com/zh-cn/previous-versions/msdn10/Hh377884(v=MSDN.10)\">如何为您的网站在Canvas和SVG之间做出选择</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>svg的世界非常丰富，并且很多属性可以作用不同的元素、拥有不同的效果。元素直接有可以搭配使用，如多个动画，多个滤镜等等，滤镜元素还涉及更多领域知识。总之，元素种类、元素属性非常多，还是需要得慢慢地学习、阅读相关的案例并操作一下才能有所掌握。</p>\n<ul>\n<li><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2></li>\n<li><ul>\n<li>  <a href=\"https://apike.ca/prog_svg_filter_feComposite.html\">feComposite</a></li>\n<li>  <a href=\"https://zh.wikipedia.org/zh-cn/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A\">贝塞尔曲线-wiki</a></li>\n</ul>\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl3itto7a00019ov7gn0t1vp2","category_id":"cl3itto7g00049ov72lbgfwrc","_id":"cl3itto7s000g9ov74qcsgxtl"},{"post_id":"cl3itto7j00069ov79wd2fx34","category_id":"cl3itto7p000b9ov74t0u0acw","_id":"cl3itto7w000m9ov7dog077yt"},{"post_id":"cl3itto7l00099ov75sfn4jas","category_id":"cl3itto7s000h9ov73ypo63cr","_id":"cl3itto7y000p9ov7f2ooc5uf"},{"post_id":"cl3itto7q000c9ov7h2791u4d","category_id":"cl3itto7w000n9ov7aym638rk","_id":"cl3itto7y000s9ov74jzahhhv"},{"post_id":"cl3itto7r000f9ov75vmp02ei","category_id":"cl3itto7y000r9ov79esg8k14","_id":"cl3itto7z000u9ov7aouob16n"},{"post_id":"cl3itto7s000i9ov722w43h40","category_id":"cl3itto7y000t9ov7ew5r3d52","_id":"cl3itto81000x9ov7dzmvd0u3"},{"post_id":"cl3itto7u000k9ov77gi3ay34","category_id":"cl3itto7w000n9ov7aym638rk","_id":"cl3itto82000y9ov742g2ax6t"},{"post_id":"cl3itto7x000o9ov7a8n750fh","category_id":"cl3itto7y000r9ov79esg8k14","_id":"cl3itto82000z9ov7h27vdj3a"}],"PostTag":[{"post_id":"cl3itto7e00039ov7hsyw17j7","tag_id":"cl3itto7k00079ov7g1ghaoot","_id":"cl3itto7r000e9ov77vf85d71"},{"post_id":"cl3itto7l00099ov75sfn4jas","tag_id":"cl3itto7q000d9ov7f48vah26","_id":"cl3itto7w000l9ov7e4lb1h74"},{"post_id":"cl3itto7r000f9ov75vmp02ei","tag_id":"cl3itto7t000j9ov7159x4bzz","_id":"cl3itto7y000q9ov7h5v43vaa"}],"Tag":[{"name":"deploy qingfuwu","_id":"cl3itto7k00079ov7g1ghaoot"},{"name":"numpy","_id":"cl3itto7q000d9ov7f48vah26"},{"name":"Event","_id":"cl3itto7t000j9ov7159x4bzz"}]}}